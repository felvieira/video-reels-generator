"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tauri-apps";
exports.ids = ["vendor-chunks/@tauri-apps"];
exports.modules = {

/***/ "(ssr)/./node_modules/@tauri-apps/api/dialog.js":
/*!************************************************!*\
  !*** ./node_modules/@tauri-apps/api/dialog.js ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ask: () => (/* binding */ ask),\n/* harmony export */   confirm: () => (/* binding */ confirm),\n/* harmony export */   message: () => (/* binding */ message),\n/* harmony export */   open: () => (/* binding */ open),\n/* harmony export */   save: () => (/* binding */ save)\n/* harmony export */ });\n/* harmony import */ var _helpers_tauri_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers/tauri.js */ \"(ssr)/./node_modules/@tauri-apps/api/helpers/tauri.js\");\n\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/**\n * Native system dialogs for opening and saving files.\n *\n * This package is also accessible with `window.__TAURI__.dialog` when [`build.withGlobalTauri`](https://tauri.app/v1/api/config/#buildconfig.withglobaltauri) in `tauri.conf.json` is set to `true`.\n *\n * The APIs must be added to [`tauri.allowlist.dialog`](https://tauri.app/v1/api/config/#allowlistconfig.dialog) in `tauri.conf.json`:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"dialog\": {\n *         \"all\": true, // enable all dialog APIs\n *         \"ask\": true, // enable dialog ask API\n *         \"confirm\": true, // enable dialog confirm API\n *         \"message\": true, // enable dialog message API\n *         \"open\": true, // enable file open API\n *         \"save\": true // enable file save API\n *       }\n *     }\n *   }\n * }\n * ```\n * It is recommended to allowlist only the APIs you use for optimal bundle size and security.\n * @module\n */\n/**\n * Open a file/directory selection dialog.\n *\n * The selected paths are added to the filesystem and asset protocol allowlist scopes.\n * When security is more important than the easy of use of this API,\n * prefer writing a dedicated command instead.\n *\n * Note that the allowlist scope change is not persisted, so the values are cleared when the application is restarted.\n * You can save it to the filesystem using [tauri-plugin-persisted-scope](https://github.com/tauri-apps/plugins-workspace/tree/v1/plugins/persisted-scope).\n * @example\n * ```typescript\n * import { open } from '@tauri-apps/api/dialog';\n * // Open a selection dialog for image files\n * const selected = await open({\n *   multiple: true,\n *   filters: [{\n *     name: 'Image',\n *     extensions: ['png', 'jpeg']\n *   }]\n * });\n * if (Array.isArray(selected)) {\n *   // user selected multiple files\n * } else if (selected === null) {\n *   // user cancelled the selection\n * } else {\n *   // user selected a single file\n * }\n * ```\n *\n * @example\n * ```typescript\n * import { open } from '@tauri-apps/api/dialog';\n * import { appDir } from '@tauri-apps/api/path';\n * // Open a selection dialog for directories\n * const selected = await open({\n *   directory: true,\n *   multiple: true,\n *   defaultPath: await appDir(),\n * });\n * if (Array.isArray(selected)) {\n *   // user selected multiple directories\n * } else if (selected === null) {\n *   // user cancelled the selection\n * } else {\n *   // user selected a single directory\n * }\n * ```\n *\n * @returns A promise resolving to the selected path(s)\n *\n * @since 1.0.0\n */\nasync function open(options = {}) {\n    if (typeof options === 'object') {\n        Object.freeze(options);\n    }\n    return (0,_helpers_tauri_js__WEBPACK_IMPORTED_MODULE_0__.invokeTauriCommand)({\n        __tauriModule: 'Dialog',\n        message: {\n            cmd: 'openDialog',\n            options\n        }\n    });\n}\n/**\n * Open a file/directory save dialog.\n *\n * The selected path is added to the filesystem and asset protocol allowlist scopes.\n * When security is more important than the easy of use of this API,\n * prefer writing a dedicated command instead.\n *\n * Note that the allowlist scope change is not persisted, so the values are cleared when the application is restarted.\n * You can save it to the filesystem using [tauri-plugin-persisted-scope](https://github.com/tauri-apps/plugins-workspace/tree/v1/plugins/persisted-scope).\n * @example\n * ```typescript\n * import { save } from '@tauri-apps/api/dialog';\n * const filePath = await save({\n *   filters: [{\n *     name: 'Image',\n *     extensions: ['png', 'jpeg']\n *   }]\n * });\n * ```\n *\n * @returns A promise resolving to the selected path.\n *\n * @since 1.0.0\n */\nasync function save(options = {}) {\n    if (typeof options === 'object') {\n        Object.freeze(options);\n    }\n    return (0,_helpers_tauri_js__WEBPACK_IMPORTED_MODULE_0__.invokeTauriCommand)({\n        __tauriModule: 'Dialog',\n        message: {\n            cmd: 'saveDialog',\n            options\n        }\n    });\n}\n/**\n * Shows a message dialog with an `Ok` button.\n * @example\n * ```typescript\n * import { message } from '@tauri-apps/api/dialog';\n * await message('Tauri is awesome', 'Tauri');\n * await message('File not found', { title: 'Tauri', type: 'error' });\n * ```\n *\n * @param message The message to show.\n * @param options The dialog's options. If a string, it represents the dialog title.\n *\n * @returns A promise indicating the success or failure of the operation.\n *\n * @since 1.0.0\n *\n */\nasync function message(message, options) {\n    var _a, _b;\n    const opts = typeof options === 'string' ? { title: options } : options;\n    return (0,_helpers_tauri_js__WEBPACK_IMPORTED_MODULE_0__.invokeTauriCommand)({\n        __tauriModule: 'Dialog',\n        message: {\n            cmd: 'messageDialog',\n            message: message.toString(),\n            title: (_a = opts === null || opts === void 0 ? void 0 : opts.title) === null || _a === void 0 ? void 0 : _a.toString(),\n            type: opts === null || opts === void 0 ? void 0 : opts.type,\n            buttonLabel: (_b = opts === null || opts === void 0 ? void 0 : opts.okLabel) === null || _b === void 0 ? void 0 : _b.toString()\n        }\n    });\n}\n/**\n * Shows a question dialog with `Yes` and `No` buttons.\n * @example\n * ```typescript\n * import { ask } from '@tauri-apps/api/dialog';\n * const yes = await ask('Are you sure?', 'Tauri');\n * const yes2 = await ask('This action cannot be reverted. Are you sure?', { title: 'Tauri', type: 'warning' });\n * ```\n *\n * @param message The message to show.\n * @param options The dialog's options. If a string, it represents the dialog title.\n *\n * @returns A promise resolving to a boolean indicating whether `Yes` was clicked or not.\n *\n * @since 1.0.0\n */\nasync function ask(message, options) {\n    var _a, _b, _c, _d, _e;\n    const opts = typeof options === 'string' ? { title: options } : options;\n    return (0,_helpers_tauri_js__WEBPACK_IMPORTED_MODULE_0__.invokeTauriCommand)({\n        __tauriModule: 'Dialog',\n        message: {\n            cmd: 'askDialog',\n            message: message.toString(),\n            title: (_a = opts === null || opts === void 0 ? void 0 : opts.title) === null || _a === void 0 ? void 0 : _a.toString(),\n            type: opts === null || opts === void 0 ? void 0 : opts.type,\n            buttonLabels: [\n                (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.okLabel) === null || _b === void 0 ? void 0 : _b.toString()) !== null && _c !== void 0 ? _c : 'Yes',\n                (_e = (_d = opts === null || opts === void 0 ? void 0 : opts.cancelLabel) === null || _d === void 0 ? void 0 : _d.toString()) !== null && _e !== void 0 ? _e : 'No'\n            ]\n        }\n    });\n}\n/**\n * Shows a question dialog with `Ok` and `Cancel` buttons.\n * @example\n * ```typescript\n * import { confirm } from '@tauri-apps/api/dialog';\n * const confirmed = await confirm('Are you sure?', 'Tauri');\n * const confirmed2 = await confirm('This action cannot be reverted. Are you sure?', { title: 'Tauri', type: 'warning' });\n * ```\n *\n * @param message The message to show.\n * @param options The dialog's options. If a string, it represents the dialog title.\n *\n * @returns A promise resolving to a boolean indicating whether `Ok` was clicked or not.\n *\n * @since 1.0.0\n */\nasync function confirm(message, options) {\n    var _a, _b, _c, _d, _e;\n    const opts = typeof options === 'string' ? { title: options } : options;\n    return (0,_helpers_tauri_js__WEBPACK_IMPORTED_MODULE_0__.invokeTauriCommand)({\n        __tauriModule: 'Dialog',\n        message: {\n            cmd: 'confirmDialog',\n            message: message.toString(),\n            title: (_a = opts === null || opts === void 0 ? void 0 : opts.title) === null || _a === void 0 ? void 0 : _a.toString(),\n            type: opts === null || opts === void 0 ? void 0 : opts.type,\n            buttonLabels: [\n                (_c = (_b = opts === null || opts === void 0 ? void 0 : opts.okLabel) === null || _b === void 0 ? void 0 : _b.toString()) !== null && _c !== void 0 ? _c : 'Ok',\n                (_e = (_d = opts === null || opts === void 0 ? void 0 : opts.cancelLabel) === null || _d === void 0 ? void 0 : _d.toString()) !== null && _e !== void 0 ? _e : 'Cancel'\n            ]\n        }\n    });\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tauri-apps/api/dialog.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tauri-apps/api/helpers/tauri.js":
/*!*******************************************************!*\
  !*** ./node_modules/@tauri-apps/api/helpers/tauri.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   invokeTauriCommand: () => (/* binding */ invokeTauriCommand)\n/* harmony export */ });\n/* harmony import */ var _tauri_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../tauri.js */ \"(ssr)/./node_modules/@tauri-apps/api/tauri.js\");\n\n\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** @ignore */\nasync function invokeTauriCommand(command) {\n    return (0,_tauri_js__WEBPACK_IMPORTED_MODULE_0__.invoke)('tauri', command);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhdXJpLWFwcHMvYXBpL2hlbHBlcnMvdGF1cmkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcUM7O0FBRXJDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGlEQUFNO0FBQ2pCOztBQUU4QiIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpZGVvLWVkaXRvci1hcHAvLi9ub2RlX21vZHVsZXMvQHRhdXJpLWFwcHMvYXBpL2hlbHBlcnMvdGF1cmkuanM/N2Q0NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbnZva2UgfSBmcm9tICcuLi90YXVyaS5qcyc7XG5cbi8vIENvcHlyaWdodCAyMDE5LTIwMjMgVGF1cmkgUHJvZ3JhbW1lIHdpdGhpbiBUaGUgQ29tbW9ucyBDb25zZXJ2YW5jeVxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEFwYWNoZS0yLjBcbi8vIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBNSVRcbi8qKiBAaWdub3JlICovXG5hc3luYyBmdW5jdGlvbiBpbnZva2VUYXVyaUNvbW1hbmQoY29tbWFuZCkge1xuICAgIHJldHVybiBpbnZva2UoJ3RhdXJpJywgY29tbWFuZCk7XG59XG5cbmV4cG9ydCB7IGludm9rZVRhdXJpQ29tbWFuZCB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tauri-apps/api/helpers/tauri.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tauri-apps/api/tauri.js":
/*!***********************************************!*\
  !*** ./node_modules/@tauri-apps/api/tauri.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   convertFileSrc: () => (/* binding */ convertFileSrc),\n/* harmony export */   invoke: () => (/* binding */ invoke),\n/* harmony export */   transformCallback: () => (/* binding */ transformCallback)\n/* harmony export */ });\n// Copyright 2019-2023 Tauri Programme within The Commons Conservancy\n// SPDX-License-Identifier: Apache-2.0\n// SPDX-License-Identifier: MIT\n/** @ignore */\nfunction uid() {\n    return window.crypto.getRandomValues(new Uint32Array(1))[0];\n}\n/**\n * Transforms a callback function to a string identifier that can be passed to the backend.\n * The backend uses the identifier to `eval()` the callback.\n *\n * @return A unique identifier associated with the callback function.\n *\n * @since 1.0.0\n */\nfunction transformCallback(callback, once = false) {\n    const identifier = uid();\n    const prop = `_${identifier}`;\n    Object.defineProperty(window, prop, {\n        value: (result) => {\n            if (once) {\n                Reflect.deleteProperty(window, prop);\n            }\n            return callback === null || callback === void 0 ? void 0 : callback(result);\n        },\n        writable: false,\n        configurable: true\n    });\n    return identifier;\n}\n/**\n * Sends a message to the backend.\n * @example\n * ```typescript\n * import { invoke } from '@tauri-apps/api/tauri';\n * await invoke('login', { user: 'tauri', password: 'poiwe3h4r5ip3yrhtew9ty' });\n * ```\n *\n * @param cmd The command name.\n * @param args The optional arguments to pass to the command.\n * @return A promise resolving or rejecting to the backend response.\n *\n * @since 1.0.0\n */\nasync function invoke(cmd, args = {}) {\n    return new Promise((resolve, reject) => {\n        const callback = transformCallback((e) => {\n            resolve(e);\n            Reflect.deleteProperty(window, `_${error}`);\n        }, true);\n        const error = transformCallback((e) => {\n            reject(e);\n            Reflect.deleteProperty(window, `_${callback}`);\n        }, true);\n        window.__TAURI_IPC__({\n            cmd,\n            callback,\n            error,\n            ...args\n        });\n    });\n}\n/**\n * Convert a device file path to an URL that can be loaded by the webview.\n * Note that `asset:` and `https://asset.localhost` must be added to [`tauri.security.csp`](https://tauri.app/v1/api/config/#securityconfig.csp) in `tauri.conf.json`.\n * Example CSP value: `\"csp\": \"default-src 'self'; img-src 'self' asset: https://asset.localhost\"` to use the asset protocol on image sources.\n *\n * Additionally, `asset` must be added to [`tauri.allowlist.protocol`](https://tauri.app/v1/api/config/#allowlistconfig.protocol)\n * in `tauri.conf.json` and its access scope must be defined on the `assetScope` array on the same `protocol` object.\n * For example:\n * ```json\n * {\n *   \"tauri\": {\n *     \"allowlist\": {\n *       \"protocol\": {\n *         \"asset\": true,\n *         \"assetScope\": [\"$APPDATA/assets/*\"]\n *       }\n *     }\n *   }\n * }\n * ```\n *\n * @param  filePath The file path.\n * @param  protocol The protocol to use. Defaults to `asset`. You only need to set this when using a custom protocol.\n * @example\n * ```typescript\n * import { appDataDir, join } from '@tauri-apps/api/path';\n * import { convertFileSrc } from '@tauri-apps/api/tauri';\n * const appDataDirPath = await appDataDir();\n * const filePath = await join(appDataDirPath, 'assets/video.mp4');\n * const assetUrl = convertFileSrc(filePath);\n *\n * const video = document.getElementById('my-video');\n * const source = document.createElement('source');\n * source.type = 'video/mp4';\n * source.src = assetUrl;\n * video.appendChild(source);\n * video.load();\n * ```\n *\n * @return the URL that can be used as source on the webview.\n *\n * @since 1.0.0\n */\nfunction convertFileSrc(filePath, protocol = 'asset') {\n    return window.__TAURI__.convertFileSrc(filePath, protocol);\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhdXJpLWFwcHMvYXBpL3RhdXJpLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsV0FBVztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLFNBQVM7QUFDckIsMkJBQTJCLG1EQUFtRDtBQUM5RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxNQUFNO0FBQ3JELFNBQVM7QUFDVDtBQUNBO0FBQ0EsK0NBQStDLFNBQVM7QUFDeEQsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1EO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksbUJBQW1CO0FBQy9CLFlBQVksaUJBQWlCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVxRCIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpZGVvLWVkaXRvci1hcHAvLi9ub2RlX21vZHVsZXMvQHRhdXJpLWFwcHMvYXBpL3RhdXJpLmpzP2UyMjUiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMyBUYXVyaSBQcm9ncmFtbWUgd2l0aGluIFRoZSBDb21tb25zIENvbnNlcnZhbmN5XG4vLyBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQXBhY2hlLTIuMFxuLy8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVFxuLyoqIEBpZ25vcmUgKi9cbmZ1bmN0aW9uIHVpZCgpIHtcbiAgICByZXR1cm4gd2luZG93LmNyeXB0by5nZXRSYW5kb21WYWx1ZXMobmV3IFVpbnQzMkFycmF5KDEpKVswXTtcbn1cbi8qKlxuICogVHJhbnNmb3JtcyBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIGEgc3RyaW5nIGlkZW50aWZpZXIgdGhhdCBjYW4gYmUgcGFzc2VkIHRvIHRoZSBiYWNrZW5kLlxuICogVGhlIGJhY2tlbmQgdXNlcyB0aGUgaWRlbnRpZmllciB0byBgZXZhbCgpYCB0aGUgY2FsbGJhY2suXG4gKlxuICogQHJldHVybiBBIHVuaXF1ZSBpZGVudGlmaWVyIGFzc29jaWF0ZWQgd2l0aCB0aGUgY2FsbGJhY2sgZnVuY3Rpb24uXG4gKlxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmZ1bmN0aW9uIHRyYW5zZm9ybUNhbGxiYWNrKGNhbGxiYWNrLCBvbmNlID0gZmFsc2UpIHtcbiAgICBjb25zdCBpZGVudGlmaWVyID0gdWlkKCk7XG4gICAgY29uc3QgcHJvcCA9IGBfJHtpZGVudGlmaWVyfWA7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdywgcHJvcCwge1xuICAgICAgICB2YWx1ZTogKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgaWYgKG9uY2UpIHtcbiAgICAgICAgICAgICAgICBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHdpbmRvdywgcHJvcCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sgPT09IG51bGwgfHwgY2FsbGJhY2sgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNhbGxiYWNrKHJlc3VsdCk7XG4gICAgICAgIH0sXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgcmV0dXJuIGlkZW50aWZpZXI7XG59XG4vKipcbiAqIFNlbmRzIGEgbWVzc2FnZSB0byB0aGUgYmFja2VuZC5cbiAqIEBleGFtcGxlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBpbnZva2UgfSBmcm9tICdAdGF1cmktYXBwcy9hcGkvdGF1cmknO1xuICogYXdhaXQgaW52b2tlKCdsb2dpbicsIHsgdXNlcjogJ3RhdXJpJywgcGFzc3dvcmQ6ICdwb2l3ZTNoNHI1aXAzeXJodGV3OXR5JyB9KTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBjbWQgVGhlIGNvbW1hbmQgbmFtZS5cbiAqIEBwYXJhbSBhcmdzIFRoZSBvcHRpb25hbCBhcmd1bWVudHMgdG8gcGFzcyB0byB0aGUgY29tbWFuZC5cbiAqIEByZXR1cm4gQSBwcm9taXNlIHJlc29sdmluZyBvciByZWplY3RpbmcgdG8gdGhlIGJhY2tlbmQgcmVzcG9uc2UuXG4gKlxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGludm9rZShjbWQsIGFyZ3MgPSB7fSkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrID0gdHJhbnNmb3JtQ2FsbGJhY2soKGUpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoZSk7XG4gICAgICAgICAgICBSZWZsZWN0LmRlbGV0ZVByb3BlcnR5KHdpbmRvdywgYF8ke2Vycm9yfWApO1xuICAgICAgICB9LCB0cnVlKTtcbiAgICAgICAgY29uc3QgZXJyb3IgPSB0cmFuc2Zvcm1DYWxsYmFjaygoZSkgPT4ge1xuICAgICAgICAgICAgcmVqZWN0KGUpO1xuICAgICAgICAgICAgUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh3aW5kb3csIGBfJHtjYWxsYmFja31gKTtcbiAgICAgICAgfSwgdHJ1ZSk7XG4gICAgICAgIHdpbmRvdy5fX1RBVVJJX0lQQ19fKHtcbiAgICAgICAgICAgIGNtZCxcbiAgICAgICAgICAgIGNhbGxiYWNrLFxuICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICAuLi5hcmdzXG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLyoqXG4gKiBDb252ZXJ0IGEgZGV2aWNlIGZpbGUgcGF0aCB0byBhbiBVUkwgdGhhdCBjYW4gYmUgbG9hZGVkIGJ5IHRoZSB3ZWJ2aWV3LlxuICogTm90ZSB0aGF0IGBhc3NldDpgIGFuZCBgaHR0cHM6Ly9hc3NldC5sb2NhbGhvc3RgIG11c3QgYmUgYWRkZWQgdG8gW2B0YXVyaS5zZWN1cml0eS5jc3BgXShodHRwczovL3RhdXJpLmFwcC92MS9hcGkvY29uZmlnLyNzZWN1cml0eWNvbmZpZy5jc3ApIGluIGB0YXVyaS5jb25mLmpzb25gLlxuICogRXhhbXBsZSBDU1AgdmFsdWU6IGBcImNzcFwiOiBcImRlZmF1bHQtc3JjICdzZWxmJzsgaW1nLXNyYyAnc2VsZicgYXNzZXQ6IGh0dHBzOi8vYXNzZXQubG9jYWxob3N0XCJgIHRvIHVzZSB0aGUgYXNzZXQgcHJvdG9jb2wgb24gaW1hZ2Ugc291cmNlcy5cbiAqXG4gKiBBZGRpdGlvbmFsbHksIGBhc3NldGAgbXVzdCBiZSBhZGRlZCB0byBbYHRhdXJpLmFsbG93bGlzdC5wcm90b2NvbGBdKGh0dHBzOi8vdGF1cmkuYXBwL3YxL2FwaS9jb25maWcvI2FsbG93bGlzdGNvbmZpZy5wcm90b2NvbClcbiAqIGluIGB0YXVyaS5jb25mLmpzb25gIGFuZCBpdHMgYWNjZXNzIHNjb3BlIG11c3QgYmUgZGVmaW5lZCBvbiB0aGUgYGFzc2V0U2NvcGVgIGFycmF5IG9uIHRoZSBzYW1lIGBwcm90b2NvbGAgb2JqZWN0LlxuICogRm9yIGV4YW1wbGU6XG4gKiBgYGBqc29uXG4gKiB7XG4gKiAgIFwidGF1cmlcIjoge1xuICogICAgIFwiYWxsb3dsaXN0XCI6IHtcbiAqICAgICAgIFwicHJvdG9jb2xcIjoge1xuICogICAgICAgICBcImFzc2V0XCI6IHRydWUsXG4gKiAgICAgICAgIFwiYXNzZXRTY29wZVwiOiBbXCIkQVBQREFUQS9hc3NldHMvKlwiXVxuICogICAgICAgfVxuICogICAgIH1cbiAqICAgfVxuICogfVxuICogYGBgXG4gKlxuICogQHBhcmFtICBmaWxlUGF0aCBUaGUgZmlsZSBwYXRoLlxuICogQHBhcmFtICBwcm90b2NvbCBUaGUgcHJvdG9jb2wgdG8gdXNlLiBEZWZhdWx0cyB0byBgYXNzZXRgLiBZb3Ugb25seSBuZWVkIHRvIHNldCB0aGlzIHdoZW4gdXNpbmcgYSBjdXN0b20gcHJvdG9jb2wuXG4gKiBAZXhhbXBsZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgYXBwRGF0YURpciwgam9pbiB9IGZyb20gJ0B0YXVyaS1hcHBzL2FwaS9wYXRoJztcbiAqIGltcG9ydCB7IGNvbnZlcnRGaWxlU3JjIH0gZnJvbSAnQHRhdXJpLWFwcHMvYXBpL3RhdXJpJztcbiAqIGNvbnN0IGFwcERhdGFEaXJQYXRoID0gYXdhaXQgYXBwRGF0YURpcigpO1xuICogY29uc3QgZmlsZVBhdGggPSBhd2FpdCBqb2luKGFwcERhdGFEaXJQYXRoLCAnYXNzZXRzL3ZpZGVvLm1wNCcpO1xuICogY29uc3QgYXNzZXRVcmwgPSBjb252ZXJ0RmlsZVNyYyhmaWxlUGF0aCk7XG4gKlxuICogY29uc3QgdmlkZW8gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbXktdmlkZW8nKTtcbiAqIGNvbnN0IHNvdXJjZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NvdXJjZScpO1xuICogc291cmNlLnR5cGUgPSAndmlkZW8vbXA0JztcbiAqIHNvdXJjZS5zcmMgPSBhc3NldFVybDtcbiAqIHZpZGVvLmFwcGVuZENoaWxkKHNvdXJjZSk7XG4gKiB2aWRlby5sb2FkKCk7XG4gKiBgYGBcbiAqXG4gKiBAcmV0dXJuIHRoZSBVUkwgdGhhdCBjYW4gYmUgdXNlZCBhcyBzb3VyY2Ugb24gdGhlIHdlYnZpZXcuXG4gKlxuICogQHNpbmNlIDEuMC4wXG4gKi9cbmZ1bmN0aW9uIGNvbnZlcnRGaWxlU3JjKGZpbGVQYXRoLCBwcm90b2NvbCA9ICdhc3NldCcpIHtcbiAgICByZXR1cm4gd2luZG93Ll9fVEFVUklfXy5jb252ZXJ0RmlsZVNyYyhmaWxlUGF0aCwgcHJvdG9jb2wpO1xufVxuXG5leHBvcnQgeyBjb252ZXJ0RmlsZVNyYywgaW52b2tlLCB0cmFuc2Zvcm1DYWxsYmFjayB9O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tauri-apps/api/tauri.js\n");

/***/ })

};
;