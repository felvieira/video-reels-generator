"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/node-appwrite";
exports.ids = ["vendor-chunks/node-appwrite"];
exports.modules = {

/***/ "(rsc)/./node_modules/node-appwrite/dist/client.js":
/*!***************************************************!*\
  !*** ./node_modules/node-appwrite/dist/client.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar nodeFetchNativeWithAgent = __webpack_require__(/*! node-fetch-native-with-agent */ \"(rsc)/./node_modules/node-fetch-native-with-agent/lib/index.cjs\");\nvar agent = __webpack_require__(/*! node-fetch-native-with-agent/agent */ \"(rsc)/./node_modules/node-fetch-native-with-agent/dist/agent.cjs\");\nvar query = __webpack_require__(/*! ./query */ \"(rsc)/./node_modules/node-appwrite/dist/query.js\");\nclass AppwriteException extends Error {\n    constructor(message, code = 0, type = \"\", response = \"\"){\n        super(message);\n        this.name = \"AppwriteException\";\n        this.message = message;\n        this.code = code;\n        this.type = type;\n        this.response = response;\n    }\n}\nfunction getUserAgent() {\n    let ua = \"AppwriteNodeJSSDK/14.1.0\";\n    const platform = [];\n    if (typeof process !== \"undefined\") {\n        if (typeof process.platform === \"string\") platform.push(process.platform);\n        if (typeof process.arch === \"string\") platform.push(process.arch);\n    }\n    if (platform.length > 0) {\n        ua += ` (${platform.join(\"; \")})`;\n    }\n    if (typeof navigator !== \"undefined\" && typeof navigator.userAgent === \"string\") {\n        ua += ` ${navigator.userAgent}`;\n    } else if (typeof globalThis.EdgeRuntime === \"string\") {\n        ua += ` EdgeRuntime`;\n    } else if (typeof process !== \"undefined\" && typeof process.version === \"string\") {\n        ua += ` Node.js/${process.version}`;\n    }\n    return ua;\n}\nconst _Client = class _Client {\n    constructor(){\n        this.config = {\n            endpoint: \"https://cloud.appwrite.io/v1\",\n            selfSigned: false,\n            project: \"\",\n            key: \"\",\n            jwt: \"\",\n            locale: \"\",\n            session: \"\",\n            forwardeduseragent: \"\"\n        };\n        this.headers = {\n            \"x-sdk-name\": \"Node.js\",\n            \"x-sdk-platform\": \"server\",\n            \"x-sdk-language\": \"nodejs\",\n            \"x-sdk-version\": \"14.1.0\",\n            \"user-agent\": getUserAgent(),\n            \"X-Appwrite-Response-Format\": \"1.6.0\"\n        };\n    }\n    /**\n   * Set Endpoint\n   *\n   * Your project endpoint\n   *\n   * @param {string} endpoint\n   *\n   * @returns {this}\n   */ setEndpoint(endpoint) {\n        this.config.endpoint = endpoint;\n        return this;\n    }\n    /**\n   * Set self-signed\n   *\n   * @param {boolean} selfSigned\n   *\n   * @returns {this}\n   */ setSelfSigned(selfSigned) {\n        if (typeof globalThis.EdgeRuntime !== \"undefined\") {\n            console.warn(\"setSelfSigned is not supported in edge runtimes.\");\n        }\n        this.config.selfSigned = selfSigned;\n        return this;\n    }\n    /**\n   * Add header\n   *\n   * @param {string} header\n   * @param {string} value\n   *\n   * @returns {this}\n   */ addHeader(header, value) {\n        this.headers[header.toLowerCase()] = value;\n        return this;\n    }\n    /**\n   * Set Project\n   *\n   * Your project ID\n   *\n   * @param value string\n   *\n   * @return {this}\n   */ setProject(value) {\n        this.headers[\"X-Appwrite-Project\"] = value;\n        this.config.project = value;\n        return this;\n    }\n    /**\n   * Set Key\n   *\n   * Your secret API key\n   *\n   * @param value string\n   *\n   * @return {this}\n   */ setKey(value) {\n        this.headers[\"X-Appwrite-Key\"] = value;\n        this.config.key = value;\n        return this;\n    }\n    /**\n   * Set JWT\n   *\n   * Your secret JSON Web Token\n   *\n   * @param value string\n   *\n   * @return {this}\n   */ setJWT(value) {\n        this.headers[\"X-Appwrite-JWT\"] = value;\n        this.config.jwt = value;\n        return this;\n    }\n    /**\n   * Set Locale\n   *\n   * @param value string\n   *\n   * @return {this}\n   */ setLocale(value) {\n        this.headers[\"X-Appwrite-Locale\"] = value;\n        this.config.locale = value;\n        return this;\n    }\n    /**\n   * Set Session\n   *\n   * The user session to authenticate with\n   *\n   * @param value string\n   *\n   * @return {this}\n   */ setSession(value) {\n        this.headers[\"X-Appwrite-Session\"] = value;\n        this.config.session = value;\n        return this;\n    }\n    /**\n   * Set ForwardedUserAgent\n   *\n   * The user agent string of the client that made the request\n   *\n   * @param value string\n   *\n   * @return {this}\n   */ setForwardedUserAgent(value) {\n        this.headers[\"X-Forwarded-User-Agent\"] = value;\n        this.config.forwardeduseragent = value;\n        return this;\n    }\n    prepareRequest(method, url, headers = {}, params = {}) {\n        method = method.toUpperCase();\n        headers = Object.assign({}, this.headers, headers);\n        let options = {\n            method,\n            headers,\n            ...agent.createAgent(this.config.endpoint, {\n                rejectUnauthorized: !this.config.selfSigned\n            })\n        };\n        if (method === \"GET\") {\n            for (const [key, value] of Object.entries(_Client.flatten(params))){\n                url.searchParams.append(key, value);\n            }\n        } else {\n            switch(headers[\"content-type\"]){\n                case \"application/json\":\n                    options.body = JSON.stringify(params);\n                    break;\n                case \"multipart/form-data\":\n                    const formData = new nodeFetchNativeWithAgent.FormData();\n                    for (const [key, value] of Object.entries(params)){\n                        if (value instanceof nodeFetchNativeWithAgent.File) {\n                            formData.append(key, value, value.name);\n                        } else if (Array.isArray(value)) {\n                            for (const nestedValue of value){\n                                formData.append(`${key}[]`, nestedValue);\n                            }\n                        } else {\n                            formData.append(key, value);\n                        }\n                    }\n                    options.body = formData;\n                    delete headers[\"content-type\"];\n                    break;\n            }\n        }\n        return {\n            uri: url.toString(),\n            options\n        };\n    }\n    async chunkedUpload(method, url, headers = {}, originalPayload = {}, onProgress) {\n        const file = Object.values(originalPayload).find((value)=>value instanceof nodeFetchNativeWithAgent.File);\n        if (file.size <= _Client.CHUNK_SIZE) {\n            return await this.call(method, url, headers, originalPayload);\n        }\n        let start = 0;\n        let response = null;\n        while(start < file.size){\n            let end = start + _Client.CHUNK_SIZE;\n            if (end >= file.size) {\n                end = file.size;\n            }\n            headers[\"content-range\"] = `bytes ${start}-${end - 1}/${file.size}`;\n            const chunk = file.slice(start, end);\n            let payload = {\n                ...originalPayload,\n                file: new nodeFetchNativeWithAgent.File([\n                    chunk\n                ], file.name)\n            };\n            response = await this.call(method, url, headers, payload);\n            if (onProgress && typeof onProgress === \"function\") {\n                onProgress({\n                    $id: response.$id,\n                    progress: Math.round(end / file.size * 100),\n                    sizeUploaded: end,\n                    chunksTotal: Math.ceil(file.size / _Client.CHUNK_SIZE),\n                    chunksUploaded: Math.ceil(end / _Client.CHUNK_SIZE)\n                });\n            }\n            if (response && response.$id) {\n                headers[\"x-appwrite-id\"] = response.$id;\n            }\n            start = end;\n        }\n        return response;\n    }\n    async redirect(method, url, headers = {}, params = {}) {\n        const { uri, options } = this.prepareRequest(method, url, headers, params);\n        const response = await nodeFetchNativeWithAgent.fetch(uri, {\n            ...options,\n            redirect: \"manual\"\n        });\n        if (response.status !== 301 && response.status !== 302) {\n            throw new AppwriteException(\"Invalid redirect\", response.status);\n        }\n        return response.headers.get(\"location\") || \"\";\n    }\n    async call(method, url, headers = {}, params = {}, responseType = \"json\") {\n        var _a;\n        const { uri, options } = this.prepareRequest(method, url, headers, params);\n        let data = null;\n        const response = await nodeFetchNativeWithAgent.fetch(uri, options);\n        const warnings = response.headers.get(\"x-appwrite-warning\");\n        if (warnings) {\n            warnings.split(\";\").forEach((warning)=>console.warn(\"Warning: \" + warning));\n        }\n        if ((_a = response.headers.get(\"content-type\")) == null ? void 0 : _a.includes(\"application/json\")) {\n            data = await response.json();\n        } else if (responseType === \"arrayBuffer\") {\n            data = await response.arrayBuffer();\n        } else {\n            data = {\n                message: await response.text()\n            };\n        }\n        if (400 <= response.status) {\n            throw new AppwriteException(data == null ? void 0 : data.message, response.status, data == null ? void 0 : data.type, data);\n        }\n        return data;\n    }\n    static flatten(data, prefix = \"\") {\n        let output = {};\n        for (const [key, value] of Object.entries(data)){\n            let finalKey = prefix ? prefix + \"[\" + key + \"]\" : key;\n            if (Array.isArray(value)) {\n                output = {\n                    ...output,\n                    ..._Client.flatten(value, finalKey)\n                };\n            } else {\n                output[finalKey] = value;\n            }\n        }\n        return output;\n    }\n};\n_Client.CHUNK_SIZE = 1024 * 1024 * 5;\nlet Client = _Client;\nObject.defineProperty(exports, \"Query\", ({\n    enumerable: true,\n    get: function() {\n        return query.Query;\n    }\n}));\nexports.AppwriteException = AppwriteException;\nexports.Client = Client; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=client.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/client.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/enums/authentication-factor.js":
/*!************************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/authentication-factor.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar AuthenticationFactor = /* @__PURE__ */ ((AuthenticationFactor2)=>{\n    AuthenticationFactor2[\"Email\"] = \"email\";\n    AuthenticationFactor2[\"Phone\"] = \"phone\";\n    AuthenticationFactor2[\"Totp\"] = \"totp\";\n    AuthenticationFactor2[\"Recoverycode\"] = \"recoverycode\";\n    return AuthenticationFactor2;\n})(AuthenticationFactor || {});\nexports.AuthenticationFactor = AuthenticationFactor; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=authentication-factor.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL2F1dGhlbnRpY2F0aW9uLWZhY3Rvci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLHVCQUF1QyxhQUFILEdBQUksRUFBQ0M7SUFDM0NBLHFCQUFxQixDQUFDLFFBQVEsR0FBRztJQUNqQ0EscUJBQXFCLENBQUMsUUFBUSxHQUFHO0lBQ2pDQSxxQkFBcUIsQ0FBQyxPQUFPLEdBQUc7SUFDaENBLHFCQUFxQixDQUFDLGVBQWUsR0FBRztJQUN4QyxPQUFPQTtBQUNULEdBQUdELHdCQUF3QixDQUFDO0FBRTVCRSw0QkFBNEIsR0FBR0Ysc0JBQy9CLCtCQUErQjtDQUMvQixpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWRlby1lZGl0b3ItYXBwLy4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvZGlzdC9lbnVtcy9hdXRoZW50aWNhdGlvbi1mYWN0b3IuanM/YTljMCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBBdXRoZW50aWNhdGlvbkZhY3RvciA9IC8qIEBfX1BVUkVfXyAqLyAoKEF1dGhlbnRpY2F0aW9uRmFjdG9yMikgPT4ge1xuICBBdXRoZW50aWNhdGlvbkZhY3RvcjJbXCJFbWFpbFwiXSA9IFwiZW1haWxcIjtcbiAgQXV0aGVudGljYXRpb25GYWN0b3IyW1wiUGhvbmVcIl0gPSBcInBob25lXCI7XG4gIEF1dGhlbnRpY2F0aW9uRmFjdG9yMltcIlRvdHBcIl0gPSBcInRvdHBcIjtcbiAgQXV0aGVudGljYXRpb25GYWN0b3IyW1wiUmVjb3Zlcnljb2RlXCJdID0gXCJyZWNvdmVyeWNvZGVcIjtcbiAgcmV0dXJuIEF1dGhlbnRpY2F0aW9uRmFjdG9yMjtcbn0pKEF1dGhlbnRpY2F0aW9uRmFjdG9yIHx8IHt9KTtcblxuZXhwb3J0cy5BdXRoZW50aWNhdGlvbkZhY3RvciA9IEF1dGhlbnRpY2F0aW9uRmFjdG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3V0LmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXV0aGVudGljYXRpb24tZmFjdG9yLmpzLm1hcCJdLCJuYW1lcyI6WyJBdXRoZW50aWNhdGlvbkZhY3RvciIsIkF1dGhlbnRpY2F0aW9uRmFjdG9yMiIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/enums/authentication-factor.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/enums/authenticator-type.js":
/*!*********************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/authenticator-type.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar AuthenticatorType = /* @__PURE__ */ ((AuthenticatorType2)=>{\n    AuthenticatorType2[\"Totp\"] = \"totp\";\n    return AuthenticatorType2;\n})(AuthenticatorType || {});\nexports.AuthenticatorType = AuthenticatorType; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=authenticator-type.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL2F1dGhlbnRpY2F0b3ItdHlwZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLG9CQUFvQyxhQUFILEdBQUksRUFBQ0M7SUFDeENBLGtCQUFrQixDQUFDLE9BQU8sR0FBRztJQUM3QixPQUFPQTtBQUNULEdBQUdELHFCQUFxQixDQUFDO0FBRXpCRSx5QkFBeUIsR0FBR0YsbUJBQzVCLCtCQUErQjtDQUMvQiw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWRlby1lZGl0b3ItYXBwLy4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvZGlzdC9lbnVtcy9hdXRoZW50aWNhdG9yLXR5cGUuanM/NTgyNiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBBdXRoZW50aWNhdG9yVHlwZSA9IC8qIEBfX1BVUkVfXyAqLyAoKEF1dGhlbnRpY2F0b3JUeXBlMikgPT4ge1xuICBBdXRoZW50aWNhdG9yVHlwZTJbXCJUb3RwXCJdID0gXCJ0b3RwXCI7XG4gIHJldHVybiBBdXRoZW50aWNhdG9yVHlwZTI7XG59KShBdXRoZW50aWNhdG9yVHlwZSB8fCB7fSk7XG5cbmV4cG9ydHMuQXV0aGVudGljYXRvclR5cGUgPSBBdXRoZW50aWNhdG9yVHlwZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW91dC5qcy5tYXBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF1dGhlbnRpY2F0b3ItdHlwZS5qcy5tYXAiXSwibmFtZXMiOlsiQXV0aGVudGljYXRvclR5cGUiLCJBdXRoZW50aWNhdG9yVHlwZTIiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/enums/authenticator-type.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/enums/browser.js":
/*!**********************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/browser.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar Browser = /* @__PURE__ */ ((Browser2)=>{\n    Browser2[\"AvantBrowser\"] = \"aa\";\n    Browser2[\"AndroidWebViewBeta\"] = \"an\";\n    Browser2[\"GoogleChrome\"] = \"ch\";\n    Browser2[\"GoogleChromeIOS\"] = \"ci\";\n    Browser2[\"GoogleChromeMobile\"] = \"cm\";\n    Browser2[\"Chromium\"] = \"cr\";\n    Browser2[\"MozillaFirefox\"] = \"ff\";\n    Browser2[\"Safari\"] = \"sf\";\n    Browser2[\"MobileSafari\"] = \"mf\";\n    Browser2[\"MicrosoftEdge\"] = \"ps\";\n    Browser2[\"MicrosoftEdgeIOS\"] = \"oi\";\n    Browser2[\"OperaMini\"] = \"om\";\n    Browser2[\"Opera\"] = \"op\";\n    Browser2[\"OperaNext\"] = \"on\";\n    return Browser2;\n})(Browser || {});\nexports.Browser = Browser; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=browser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL2Jyb3dzZXIuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxVQUEwQixhQUFILEdBQUksRUFBQ0M7SUFDOUJBLFFBQVEsQ0FBQyxlQUFlLEdBQUc7SUFDM0JBLFFBQVEsQ0FBQyxxQkFBcUIsR0FBRztJQUNqQ0EsUUFBUSxDQUFDLGVBQWUsR0FBRztJQUMzQkEsUUFBUSxDQUFDLGtCQUFrQixHQUFHO0lBQzlCQSxRQUFRLENBQUMscUJBQXFCLEdBQUc7SUFDakNBLFFBQVEsQ0FBQyxXQUFXLEdBQUc7SUFDdkJBLFFBQVEsQ0FBQyxpQkFBaUIsR0FBRztJQUM3QkEsUUFBUSxDQUFDLFNBQVMsR0FBRztJQUNyQkEsUUFBUSxDQUFDLGVBQWUsR0FBRztJQUMzQkEsUUFBUSxDQUFDLGdCQUFnQixHQUFHO0lBQzVCQSxRQUFRLENBQUMsbUJBQW1CLEdBQUc7SUFDL0JBLFFBQVEsQ0FBQyxZQUFZLEdBQUc7SUFDeEJBLFFBQVEsQ0FBQyxRQUFRLEdBQUc7SUFDcEJBLFFBQVEsQ0FBQyxZQUFZLEdBQUc7SUFDeEIsT0FBT0E7QUFDVCxHQUFHRCxXQUFXLENBQUM7QUFFZkUsZUFBZSxHQUFHRixTQUNsQiwrQkFBK0I7Q0FDL0IsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmlkZW8tZWRpdG9yLWFwcC8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2Rpc3QvZW51bXMvYnJvd3Nlci5qcz83MDc0Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEJyb3dzZXIgPSAvKiBAX19QVVJFX18gKi8gKChCcm93c2VyMikgPT4ge1xuICBCcm93c2VyMltcIkF2YW50QnJvd3NlclwiXSA9IFwiYWFcIjtcbiAgQnJvd3NlcjJbXCJBbmRyb2lkV2ViVmlld0JldGFcIl0gPSBcImFuXCI7XG4gIEJyb3dzZXIyW1wiR29vZ2xlQ2hyb21lXCJdID0gXCJjaFwiO1xuICBCcm93c2VyMltcIkdvb2dsZUNocm9tZUlPU1wiXSA9IFwiY2lcIjtcbiAgQnJvd3NlcjJbXCJHb29nbGVDaHJvbWVNb2JpbGVcIl0gPSBcImNtXCI7XG4gIEJyb3dzZXIyW1wiQ2hyb21pdW1cIl0gPSBcImNyXCI7XG4gIEJyb3dzZXIyW1wiTW96aWxsYUZpcmVmb3hcIl0gPSBcImZmXCI7XG4gIEJyb3dzZXIyW1wiU2FmYXJpXCJdID0gXCJzZlwiO1xuICBCcm93c2VyMltcIk1vYmlsZVNhZmFyaVwiXSA9IFwibWZcIjtcbiAgQnJvd3NlcjJbXCJNaWNyb3NvZnRFZGdlXCJdID0gXCJwc1wiO1xuICBCcm93c2VyMltcIk1pY3Jvc29mdEVkZ2VJT1NcIl0gPSBcIm9pXCI7XG4gIEJyb3dzZXIyW1wiT3BlcmFNaW5pXCJdID0gXCJvbVwiO1xuICBCcm93c2VyMltcIk9wZXJhXCJdID0gXCJvcFwiO1xuICBCcm93c2VyMltcIk9wZXJhTmV4dFwiXSA9IFwib25cIjtcbiAgcmV0dXJuIEJyb3dzZXIyO1xufSkoQnJvd3NlciB8fCB7fSk7XG5cbmV4cG9ydHMuQnJvd3NlciA9IEJyb3dzZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vdXQuanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD1icm93c2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJCcm93c2VyIiwiQnJvd3NlcjIiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/enums/browser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/enums/compression.js":
/*!**************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/compression.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar Compression = /* @__PURE__ */ ((Compression2)=>{\n    Compression2[\"None\"] = \"none\";\n    Compression2[\"Gzip\"] = \"gzip\";\n    Compression2[\"Zstd\"] = \"zstd\";\n    return Compression2;\n})(Compression || {});\nexports.Compression = Compression; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=compression.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL2NvbXByZXNzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsY0FBOEIsYUFBSCxHQUFJLEVBQUNDO0lBQ2xDQSxZQUFZLENBQUMsT0FBTyxHQUFHO0lBQ3ZCQSxZQUFZLENBQUMsT0FBTyxHQUFHO0lBQ3ZCQSxZQUFZLENBQUMsT0FBTyxHQUFHO0lBQ3ZCLE9BQU9BO0FBQ1QsR0FBR0QsZUFBZSxDQUFDO0FBRW5CRSxtQkFBbUIsR0FBR0YsYUFDdEIsK0JBQStCO0NBQy9CLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpZGVvLWVkaXRvci1hcHAvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL2NvbXByZXNzaW9uLmpzP2IwNzgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ29tcHJlc3Npb24gPSAvKiBAX19QVVJFX18gKi8gKChDb21wcmVzc2lvbjIpID0+IHtcbiAgQ29tcHJlc3Npb24yW1wiTm9uZVwiXSA9IFwibm9uZVwiO1xuICBDb21wcmVzc2lvbjJbXCJHemlwXCJdID0gXCJnemlwXCI7XG4gIENvbXByZXNzaW9uMltcIlpzdGRcIl0gPSBcInpzdGRcIjtcbiAgcmV0dXJuIENvbXByZXNzaW9uMjtcbn0pKENvbXByZXNzaW9uIHx8IHt9KTtcblxuZXhwb3J0cy5Db21wcmVzc2lvbiA9IENvbXByZXNzaW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3V0LmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcHJlc3Npb24uanMubWFwIl0sIm5hbWVzIjpbIkNvbXByZXNzaW9uIiwiQ29tcHJlc3Npb24yIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/enums/compression.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/enums/credit-card.js":
/*!**************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/credit-card.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar CreditCard = /* @__PURE__ */ ((CreditCard2)=>{\n    CreditCard2[\"AmericanExpress\"] = \"amex\";\n    CreditCard2[\"Argencard\"] = \"argencard\";\n    CreditCard2[\"Cabal\"] = \"cabal\";\n    CreditCard2[\"Cencosud\"] = \"cencosud\";\n    CreditCard2[\"DinersClub\"] = \"diners\";\n    CreditCard2[\"Discover\"] = \"discover\";\n    CreditCard2[\"Elo\"] = \"elo\";\n    CreditCard2[\"Hipercard\"] = \"hipercard\";\n    CreditCard2[\"JCB\"] = \"jcb\";\n    CreditCard2[\"Mastercard\"] = \"mastercard\";\n    CreditCard2[\"Naranja\"] = \"naranja\";\n    CreditCard2[\"TarjetaShopping\"] = \"targeta-shopping\";\n    CreditCard2[\"UnionChinaPay\"] = \"union-china-pay\";\n    CreditCard2[\"Visa\"] = \"visa\";\n    CreditCard2[\"MIR\"] = \"mir\";\n    CreditCard2[\"Maestro\"] = \"maestro\";\n    return CreditCard2;\n})(CreditCard || {});\nexports.CreditCard = CreditCard; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=credit-card.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL2NyZWRpdC1jYXJkLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsYUFBNkIsYUFBSCxHQUFJLEVBQUNDO0lBQ2pDQSxXQUFXLENBQUMsa0JBQWtCLEdBQUc7SUFDakNBLFdBQVcsQ0FBQyxZQUFZLEdBQUc7SUFDM0JBLFdBQVcsQ0FBQyxRQUFRLEdBQUc7SUFDdkJBLFdBQVcsQ0FBQyxXQUFXLEdBQUc7SUFDMUJBLFdBQVcsQ0FBQyxhQUFhLEdBQUc7SUFDNUJBLFdBQVcsQ0FBQyxXQUFXLEdBQUc7SUFDMUJBLFdBQVcsQ0FBQyxNQUFNLEdBQUc7SUFDckJBLFdBQVcsQ0FBQyxZQUFZLEdBQUc7SUFDM0JBLFdBQVcsQ0FBQyxNQUFNLEdBQUc7SUFDckJBLFdBQVcsQ0FBQyxhQUFhLEdBQUc7SUFDNUJBLFdBQVcsQ0FBQyxVQUFVLEdBQUc7SUFDekJBLFdBQVcsQ0FBQyxrQkFBa0IsR0FBRztJQUNqQ0EsV0FBVyxDQUFDLGdCQUFnQixHQUFHO0lBQy9CQSxXQUFXLENBQUMsT0FBTyxHQUFHO0lBQ3RCQSxXQUFXLENBQUMsTUFBTSxHQUFHO0lBQ3JCQSxXQUFXLENBQUMsVUFBVSxHQUFHO0lBQ3pCLE9BQU9BO0FBQ1QsR0FBR0QsY0FBYyxDQUFDO0FBRWxCRSxrQkFBa0IsR0FBR0YsWUFDckIsK0JBQStCO0NBQy9CLHVDQUF1QyIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpZGVvLWVkaXRvci1hcHAvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL2NyZWRpdC1jYXJkLmpzPzcxN2YiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgQ3JlZGl0Q2FyZCA9IC8qIEBfX1BVUkVfXyAqLyAoKENyZWRpdENhcmQyKSA9PiB7XG4gIENyZWRpdENhcmQyW1wiQW1lcmljYW5FeHByZXNzXCJdID0gXCJhbWV4XCI7XG4gIENyZWRpdENhcmQyW1wiQXJnZW5jYXJkXCJdID0gXCJhcmdlbmNhcmRcIjtcbiAgQ3JlZGl0Q2FyZDJbXCJDYWJhbFwiXSA9IFwiY2FiYWxcIjtcbiAgQ3JlZGl0Q2FyZDJbXCJDZW5jb3N1ZFwiXSA9IFwiY2VuY29zdWRcIjtcbiAgQ3JlZGl0Q2FyZDJbXCJEaW5lcnNDbHViXCJdID0gXCJkaW5lcnNcIjtcbiAgQ3JlZGl0Q2FyZDJbXCJEaXNjb3ZlclwiXSA9IFwiZGlzY292ZXJcIjtcbiAgQ3JlZGl0Q2FyZDJbXCJFbG9cIl0gPSBcImVsb1wiO1xuICBDcmVkaXRDYXJkMltcIkhpcGVyY2FyZFwiXSA9IFwiaGlwZXJjYXJkXCI7XG4gIENyZWRpdENhcmQyW1wiSkNCXCJdID0gXCJqY2JcIjtcbiAgQ3JlZGl0Q2FyZDJbXCJNYXN0ZXJjYXJkXCJdID0gXCJtYXN0ZXJjYXJkXCI7XG4gIENyZWRpdENhcmQyW1wiTmFyYW5qYVwiXSA9IFwibmFyYW5qYVwiO1xuICBDcmVkaXRDYXJkMltcIlRhcmpldGFTaG9wcGluZ1wiXSA9IFwidGFyZ2V0YS1zaG9wcGluZ1wiO1xuICBDcmVkaXRDYXJkMltcIlVuaW9uQ2hpbmFQYXlcIl0gPSBcInVuaW9uLWNoaW5hLXBheVwiO1xuICBDcmVkaXRDYXJkMltcIlZpc2FcIl0gPSBcInZpc2FcIjtcbiAgQ3JlZGl0Q2FyZDJbXCJNSVJcIl0gPSBcIm1pclwiO1xuICBDcmVkaXRDYXJkMltcIk1hZXN0cm9cIl0gPSBcIm1hZXN0cm9cIjtcbiAgcmV0dXJuIENyZWRpdENhcmQyO1xufSkoQ3JlZGl0Q2FyZCB8fCB7fSk7XG5cbmV4cG9ydHMuQ3JlZGl0Q2FyZCA9IENyZWRpdENhcmQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vdXQuanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVkaXQtY2FyZC5qcy5tYXAiXSwibmFtZXMiOlsiQ3JlZGl0Q2FyZCIsIkNyZWRpdENhcmQyIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/enums/credit-card.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/enums/execution-method.js":
/*!*******************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/execution-method.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar ExecutionMethod = /* @__PURE__ */ ((ExecutionMethod2)=>{\n    ExecutionMethod2[\"GET\"] = \"GET\";\n    ExecutionMethod2[\"POST\"] = \"POST\";\n    ExecutionMethod2[\"PUT\"] = \"PUT\";\n    ExecutionMethod2[\"PATCH\"] = \"PATCH\";\n    ExecutionMethod2[\"DELETE\"] = \"DELETE\";\n    ExecutionMethod2[\"OPTIONS\"] = \"OPTIONS\";\n    return ExecutionMethod2;\n})(ExecutionMethod || {});\nexports.ExecutionMethod = ExecutionMethod; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=execution-method.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL2V4ZWN1dGlvbi1tZXRob2QuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxrQkFBa0MsYUFBSCxHQUFJLEVBQUNDO0lBQ3RDQSxnQkFBZ0IsQ0FBQyxNQUFNLEdBQUc7SUFDMUJBLGdCQUFnQixDQUFDLE9BQU8sR0FBRztJQUMzQkEsZ0JBQWdCLENBQUMsTUFBTSxHQUFHO0lBQzFCQSxnQkFBZ0IsQ0FBQyxRQUFRLEdBQUc7SUFDNUJBLGdCQUFnQixDQUFDLFNBQVMsR0FBRztJQUM3QkEsZ0JBQWdCLENBQUMsVUFBVSxHQUFHO0lBQzlCLE9BQU9BO0FBQ1QsR0FBR0QsbUJBQW1CLENBQUM7QUFFdkJFLHVCQUF1QixHQUFHRixpQkFDMUIsK0JBQStCO0NBQy9CLDRDQUE0QyIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpZGVvLWVkaXRvci1hcHAvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL2V4ZWN1dGlvbi1tZXRob2QuanM/MzJjMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBFeGVjdXRpb25NZXRob2QgPSAvKiBAX19QVVJFX18gKi8gKChFeGVjdXRpb25NZXRob2QyKSA9PiB7XG4gIEV4ZWN1dGlvbk1ldGhvZDJbXCJHRVRcIl0gPSBcIkdFVFwiO1xuICBFeGVjdXRpb25NZXRob2QyW1wiUE9TVFwiXSA9IFwiUE9TVFwiO1xuICBFeGVjdXRpb25NZXRob2QyW1wiUFVUXCJdID0gXCJQVVRcIjtcbiAgRXhlY3V0aW9uTWV0aG9kMltcIlBBVENIXCJdID0gXCJQQVRDSFwiO1xuICBFeGVjdXRpb25NZXRob2QyW1wiREVMRVRFXCJdID0gXCJERUxFVEVcIjtcbiAgRXhlY3V0aW9uTWV0aG9kMltcIk9QVElPTlNcIl0gPSBcIk9QVElPTlNcIjtcbiAgcmV0dXJuIEV4ZWN1dGlvbk1ldGhvZDI7XG59KShFeGVjdXRpb25NZXRob2QgfHwge30pO1xuXG5leHBvcnRzLkV4ZWN1dGlvbk1ldGhvZCA9IEV4ZWN1dGlvbk1ldGhvZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW91dC5qcy5tYXBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV4ZWN1dGlvbi1tZXRob2QuanMubWFwIl0sIm5hbWVzIjpbIkV4ZWN1dGlvbk1ldGhvZCIsIkV4ZWN1dGlvbk1ldGhvZDIiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/enums/execution-method.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/enums/flag.js":
/*!*******************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/flag.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar Flag = /* @__PURE__ */ ((Flag2)=>{\n    Flag2[\"Afghanistan\"] = \"af\";\n    Flag2[\"Angola\"] = \"ao\";\n    Flag2[\"Albania\"] = \"al\";\n    Flag2[\"Andorra\"] = \"ad\";\n    Flag2[\"UnitedArabEmirates\"] = \"ae\";\n    Flag2[\"Argentina\"] = \"ar\";\n    Flag2[\"Armenia\"] = \"am\";\n    Flag2[\"AntiguaAndBarbuda\"] = \"ag\";\n    Flag2[\"Australia\"] = \"au\";\n    Flag2[\"Austria\"] = \"at\";\n    Flag2[\"Azerbaijan\"] = \"az\";\n    Flag2[\"Burundi\"] = \"bi\";\n    Flag2[\"Belgium\"] = \"be\";\n    Flag2[\"Benin\"] = \"bj\";\n    Flag2[\"BurkinaFaso\"] = \"bf\";\n    Flag2[\"Bangladesh\"] = \"bd\";\n    Flag2[\"Bulgaria\"] = \"bg\";\n    Flag2[\"Bahrain\"] = \"bh\";\n    Flag2[\"Bahamas\"] = \"bs\";\n    Flag2[\"BosniaAndHerzegovina\"] = \"ba\";\n    Flag2[\"Belarus\"] = \"by\";\n    Flag2[\"Belize\"] = \"bz\";\n    Flag2[\"Bolivia\"] = \"bo\";\n    Flag2[\"Brazil\"] = \"br\";\n    Flag2[\"Barbados\"] = \"bb\";\n    Flag2[\"BruneiDarussalam\"] = \"bn\";\n    Flag2[\"Bhutan\"] = \"bt\";\n    Flag2[\"Botswana\"] = \"bw\";\n    Flag2[\"CentralAfricanRepublic\"] = \"cf\";\n    Flag2[\"Canada\"] = \"ca\";\n    Flag2[\"Switzerland\"] = \"ch\";\n    Flag2[\"Chile\"] = \"cl\";\n    Flag2[\"China\"] = \"cn\";\n    Flag2[\"CoteDIvoire\"] = \"ci\";\n    Flag2[\"Cameroon\"] = \"cm\";\n    Flag2[\"DemocraticRepublicOfTheCongo\"] = \"cd\";\n    Flag2[\"RepublicOfTheCongo\"] = \"cg\";\n    Flag2[\"Colombia\"] = \"co\";\n    Flag2[\"Comoros\"] = \"km\";\n    Flag2[\"CapeVerde\"] = \"cv\";\n    Flag2[\"CostaRica\"] = \"cr\";\n    Flag2[\"Cuba\"] = \"cu\";\n    Flag2[\"Cyprus\"] = \"cy\";\n    Flag2[\"CzechRepublic\"] = \"cz\";\n    Flag2[\"Germany\"] = \"de\";\n    Flag2[\"Djibouti\"] = \"dj\";\n    Flag2[\"Dominica\"] = \"dm\";\n    Flag2[\"Denmark\"] = \"dk\";\n    Flag2[\"DominicanRepublic\"] = \"do\";\n    Flag2[\"Algeria\"] = \"dz\";\n    Flag2[\"Ecuador\"] = \"ec\";\n    Flag2[\"Egypt\"] = \"eg\";\n    Flag2[\"Eritrea\"] = \"er\";\n    Flag2[\"Spain\"] = \"es\";\n    Flag2[\"Estonia\"] = \"ee\";\n    Flag2[\"Ethiopia\"] = \"et\";\n    Flag2[\"Finland\"] = \"fi\";\n    Flag2[\"Fiji\"] = \"fj\";\n    Flag2[\"France\"] = \"fr\";\n    Flag2[\"MicronesiaFederatedStatesOf\"] = \"fm\";\n    Flag2[\"Gabon\"] = \"ga\";\n    Flag2[\"UnitedKingdom\"] = \"gb\";\n    Flag2[\"Georgia\"] = \"ge\";\n    Flag2[\"Ghana\"] = \"gh\";\n    Flag2[\"Guinea\"] = \"gn\";\n    Flag2[\"Gambia\"] = \"gm\";\n    Flag2[\"GuineaBissau\"] = \"gw\";\n    Flag2[\"EquatorialGuinea\"] = \"gq\";\n    Flag2[\"Greece\"] = \"gr\";\n    Flag2[\"Grenada\"] = \"gd\";\n    Flag2[\"Guatemala\"] = \"gt\";\n    Flag2[\"Guyana\"] = \"gy\";\n    Flag2[\"Honduras\"] = \"hn\";\n    Flag2[\"Croatia\"] = \"hr\";\n    Flag2[\"Haiti\"] = \"ht\";\n    Flag2[\"Hungary\"] = \"hu\";\n    Flag2[\"Indonesia\"] = \"id\";\n    Flag2[\"India\"] = \"in\";\n    Flag2[\"Ireland\"] = \"ie\";\n    Flag2[\"IranIslamicRepublicOf\"] = \"ir\";\n    Flag2[\"Iraq\"] = \"iq\";\n    Flag2[\"Iceland\"] = \"is\";\n    Flag2[\"Israel\"] = \"il\";\n    Flag2[\"Italy\"] = \"it\";\n    Flag2[\"Jamaica\"] = \"jm\";\n    Flag2[\"Jordan\"] = \"jo\";\n    Flag2[\"Japan\"] = \"jp\";\n    Flag2[\"Kazakhstan\"] = \"kz\";\n    Flag2[\"Kenya\"] = \"ke\";\n    Flag2[\"Kyrgyzstan\"] = \"kg\";\n    Flag2[\"Cambodia\"] = \"kh\";\n    Flag2[\"Kiribati\"] = \"ki\";\n    Flag2[\"SaintKittsAndNevis\"] = \"kn\";\n    Flag2[\"SouthKorea\"] = \"kr\";\n    Flag2[\"Kuwait\"] = \"kw\";\n    Flag2[\"LaoPeopleSDemocraticRepublic\"] = \"la\";\n    Flag2[\"Lebanon\"] = \"lb\";\n    Flag2[\"Liberia\"] = \"lr\";\n    Flag2[\"Libya\"] = \"ly\";\n    Flag2[\"SaintLucia\"] = \"lc\";\n    Flag2[\"Liechtenstein\"] = \"li\";\n    Flag2[\"SriLanka\"] = \"lk\";\n    Flag2[\"Lesotho\"] = \"ls\";\n    Flag2[\"Lithuania\"] = \"lt\";\n    Flag2[\"Luxembourg\"] = \"lu\";\n    Flag2[\"Latvia\"] = \"lv\";\n    Flag2[\"Morocco\"] = \"ma\";\n    Flag2[\"Monaco\"] = \"mc\";\n    Flag2[\"Moldova\"] = \"md\";\n    Flag2[\"Madagascar\"] = \"mg\";\n    Flag2[\"Maldives\"] = \"mv\";\n    Flag2[\"Mexico\"] = \"mx\";\n    Flag2[\"MarshallIslands\"] = \"mh\";\n    Flag2[\"NorthMacedonia\"] = \"mk\";\n    Flag2[\"Mali\"] = \"ml\";\n    Flag2[\"Malta\"] = \"mt\";\n    Flag2[\"Myanmar\"] = \"mm\";\n    Flag2[\"Montenegro\"] = \"me\";\n    Flag2[\"Mongolia\"] = \"mn\";\n    Flag2[\"Mozambique\"] = \"mz\";\n    Flag2[\"Mauritania\"] = \"mr\";\n    Flag2[\"Mauritius\"] = \"mu\";\n    Flag2[\"Malawi\"] = \"mw\";\n    Flag2[\"Malaysia\"] = \"my\";\n    Flag2[\"Namibia\"] = \"na\";\n    Flag2[\"Niger\"] = \"ne\";\n    Flag2[\"Nigeria\"] = \"ng\";\n    Flag2[\"Nicaragua\"] = \"ni\";\n    Flag2[\"Netherlands\"] = \"nl\";\n    Flag2[\"Norway\"] = \"no\";\n    Flag2[\"Nepal\"] = \"np\";\n    Flag2[\"Nauru\"] = \"nr\";\n    Flag2[\"NewZealand\"] = \"nz\";\n    Flag2[\"Oman\"] = \"om\";\n    Flag2[\"Pakistan\"] = \"pk\";\n    Flag2[\"Panama\"] = \"pa\";\n    Flag2[\"Peru\"] = \"pe\";\n    Flag2[\"Philippines\"] = \"ph\";\n    Flag2[\"Palau\"] = \"pw\";\n    Flag2[\"PapuaNewGuinea\"] = \"pg\";\n    Flag2[\"Poland\"] = \"pl\";\n    Flag2[\"FrenchPolynesia\"] = \"pf\";\n    Flag2[\"NorthKorea\"] = \"kp\";\n    Flag2[\"Portugal\"] = \"pt\";\n    Flag2[\"Paraguay\"] = \"py\";\n    Flag2[\"Qatar\"] = \"qa\";\n    Flag2[\"Romania\"] = \"ro\";\n    Flag2[\"Russia\"] = \"ru\";\n    Flag2[\"Rwanda\"] = \"rw\";\n    Flag2[\"SaudiArabia\"] = \"sa\";\n    Flag2[\"Sudan\"] = \"sd\";\n    Flag2[\"Senegal\"] = \"sn\";\n    Flag2[\"Singapore\"] = \"sg\";\n    Flag2[\"SolomonIslands\"] = \"sb\";\n    Flag2[\"SierraLeone\"] = \"sl\";\n    Flag2[\"ElSalvador\"] = \"sv\";\n    Flag2[\"SanMarino\"] = \"sm\";\n    Flag2[\"Somalia\"] = \"so\";\n    Flag2[\"Serbia\"] = \"rs\";\n    Flag2[\"SouthSudan\"] = \"ss\";\n    Flag2[\"SaoTomeAndPrincipe\"] = \"st\";\n    Flag2[\"Suriname\"] = \"sr\";\n    Flag2[\"Slovakia\"] = \"sk\";\n    Flag2[\"Slovenia\"] = \"si\";\n    Flag2[\"Sweden\"] = \"se\";\n    Flag2[\"Eswatini\"] = \"sz\";\n    Flag2[\"Seychelles\"] = \"sc\";\n    Flag2[\"Syria\"] = \"sy\";\n    Flag2[\"Chad\"] = \"td\";\n    Flag2[\"Togo\"] = \"tg\";\n    Flag2[\"Thailand\"] = \"th\";\n    Flag2[\"Tajikistan\"] = \"tj\";\n    Flag2[\"Turkmenistan\"] = \"tm\";\n    Flag2[\"TimorLeste\"] = \"tl\";\n    Flag2[\"Tonga\"] = \"to\";\n    Flag2[\"TrinidadAndTobago\"] = \"tt\";\n    Flag2[\"Tunisia\"] = \"tn\";\n    Flag2[\"Turkey\"] = \"tr\";\n    Flag2[\"Tuvalu\"] = \"tv\";\n    Flag2[\"Tanzania\"] = \"tz\";\n    Flag2[\"Uganda\"] = \"ug\";\n    Flag2[\"Ukraine\"] = \"ua\";\n    Flag2[\"Uruguay\"] = \"uy\";\n    Flag2[\"UnitedStates\"] = \"us\";\n    Flag2[\"Uzbekistan\"] = \"uz\";\n    Flag2[\"VaticanCity\"] = \"va\";\n    Flag2[\"SaintVincentAndTheGrenadines\"] = \"vc\";\n    Flag2[\"Venezuela\"] = \"ve\";\n    Flag2[\"Vietnam\"] = \"vn\";\n    Flag2[\"Vanuatu\"] = \"vu\";\n    Flag2[\"Samoa\"] = \"ws\";\n    Flag2[\"Yemen\"] = \"ye\";\n    Flag2[\"SouthAfrica\"] = \"za\";\n    Flag2[\"Zambia\"] = \"zm\";\n    Flag2[\"Zimbabwe\"] = \"zw\";\n    return Flag2;\n})(Flag || {});\nexports.Flag = Flag; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=flag.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/enums/flag.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/enums/image-format.js":
/*!***************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/image-format.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar ImageFormat = /* @__PURE__ */ ((ImageFormat2)=>{\n    ImageFormat2[\"Jpg\"] = \"jpg\";\n    ImageFormat2[\"Jpeg\"] = \"jpeg\";\n    ImageFormat2[\"Gif\"] = \"gif\";\n    ImageFormat2[\"Png\"] = \"png\";\n    ImageFormat2[\"Webp\"] = \"webp\";\n    return ImageFormat2;\n})(ImageFormat || {});\nexports.ImageFormat = ImageFormat; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=image-format.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL2ltYWdlLWZvcm1hdC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLGNBQThCLGFBQUgsR0FBSSxFQUFDQztJQUNsQ0EsWUFBWSxDQUFDLE1BQU0sR0FBRztJQUN0QkEsWUFBWSxDQUFDLE9BQU8sR0FBRztJQUN2QkEsWUFBWSxDQUFDLE1BQU0sR0FBRztJQUN0QkEsWUFBWSxDQUFDLE1BQU0sR0FBRztJQUN0QkEsWUFBWSxDQUFDLE9BQU8sR0FBRztJQUN2QixPQUFPQTtBQUNULEdBQUdELGVBQWUsQ0FBQztBQUVuQkUsbUJBQW1CLEdBQUdGLGFBQ3RCLCtCQUErQjtDQUMvQix3Q0FBd0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWRlby1lZGl0b3ItYXBwLy4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvZGlzdC9lbnVtcy9pbWFnZS1mb3JtYXQuanM/M2IwNCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBJbWFnZUZvcm1hdCA9IC8qIEBfX1BVUkVfXyAqLyAoKEltYWdlRm9ybWF0MikgPT4ge1xuICBJbWFnZUZvcm1hdDJbXCJKcGdcIl0gPSBcImpwZ1wiO1xuICBJbWFnZUZvcm1hdDJbXCJKcGVnXCJdID0gXCJqcGVnXCI7XG4gIEltYWdlRm9ybWF0MltcIkdpZlwiXSA9IFwiZ2lmXCI7XG4gIEltYWdlRm9ybWF0MltcIlBuZ1wiXSA9IFwicG5nXCI7XG4gIEltYWdlRm9ybWF0MltcIldlYnBcIl0gPSBcIndlYnBcIjtcbiAgcmV0dXJuIEltYWdlRm9ybWF0Mjtcbn0pKEltYWdlRm9ybWF0IHx8IHt9KTtcblxuZXhwb3J0cy5JbWFnZUZvcm1hdCA9IEltYWdlRm9ybWF0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3V0LmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW1hZ2UtZm9ybWF0LmpzLm1hcCJdLCJuYW1lcyI6WyJJbWFnZUZvcm1hdCIsIkltYWdlRm9ybWF0MiIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/enums/image-format.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/enums/image-gravity.js":
/*!****************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/image-gravity.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar ImageGravity = /* @__PURE__ */ ((ImageGravity2)=>{\n    ImageGravity2[\"Center\"] = \"center\";\n    ImageGravity2[\"Topleft\"] = \"top-left\";\n    ImageGravity2[\"Top\"] = \"top\";\n    ImageGravity2[\"Topright\"] = \"top-right\";\n    ImageGravity2[\"Left\"] = \"left\";\n    ImageGravity2[\"Right\"] = \"right\";\n    ImageGravity2[\"Bottomleft\"] = \"bottom-left\";\n    ImageGravity2[\"Bottom\"] = \"bottom\";\n    ImageGravity2[\"Bottomright\"] = \"bottom-right\";\n    return ImageGravity2;\n})(ImageGravity || {});\nexports.ImageGravity = ImageGravity; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=image-gravity.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL2ltYWdlLWdyYXZpdHkuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxlQUErQixhQUFILEdBQUksRUFBQ0M7SUFDbkNBLGFBQWEsQ0FBQyxTQUFTLEdBQUc7SUFDMUJBLGFBQWEsQ0FBQyxVQUFVLEdBQUc7SUFDM0JBLGFBQWEsQ0FBQyxNQUFNLEdBQUc7SUFDdkJBLGFBQWEsQ0FBQyxXQUFXLEdBQUc7SUFDNUJBLGFBQWEsQ0FBQyxPQUFPLEdBQUc7SUFDeEJBLGFBQWEsQ0FBQyxRQUFRLEdBQUc7SUFDekJBLGFBQWEsQ0FBQyxhQUFhLEdBQUc7SUFDOUJBLGFBQWEsQ0FBQyxTQUFTLEdBQUc7SUFDMUJBLGFBQWEsQ0FBQyxjQUFjLEdBQUc7SUFDL0IsT0FBT0E7QUFDVCxHQUFHRCxnQkFBZ0IsQ0FBQztBQUVwQkUsb0JBQW9CLEdBQUdGLGNBQ3ZCLCtCQUErQjtDQUMvQix5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWRlby1lZGl0b3ItYXBwLy4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvZGlzdC9lbnVtcy9pbWFnZS1ncmF2aXR5LmpzPzEwMzYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgSW1hZ2VHcmF2aXR5ID0gLyogQF9fUFVSRV9fICovICgoSW1hZ2VHcmF2aXR5MikgPT4ge1xuICBJbWFnZUdyYXZpdHkyW1wiQ2VudGVyXCJdID0gXCJjZW50ZXJcIjtcbiAgSW1hZ2VHcmF2aXR5MltcIlRvcGxlZnRcIl0gPSBcInRvcC1sZWZ0XCI7XG4gIEltYWdlR3Jhdml0eTJbXCJUb3BcIl0gPSBcInRvcFwiO1xuICBJbWFnZUdyYXZpdHkyW1wiVG9wcmlnaHRcIl0gPSBcInRvcC1yaWdodFwiO1xuICBJbWFnZUdyYXZpdHkyW1wiTGVmdFwiXSA9IFwibGVmdFwiO1xuICBJbWFnZUdyYXZpdHkyW1wiUmlnaHRcIl0gPSBcInJpZ2h0XCI7XG4gIEltYWdlR3Jhdml0eTJbXCJCb3R0b21sZWZ0XCJdID0gXCJib3R0b20tbGVmdFwiO1xuICBJbWFnZUdyYXZpdHkyW1wiQm90dG9tXCJdID0gXCJib3R0b21cIjtcbiAgSW1hZ2VHcmF2aXR5MltcIkJvdHRvbXJpZ2h0XCJdID0gXCJib3R0b20tcmlnaHRcIjtcbiAgcmV0dXJuIEltYWdlR3Jhdml0eTI7XG59KShJbWFnZUdyYXZpdHkgfHwge30pO1xuXG5leHBvcnRzLkltYWdlR3Jhdml0eSA9IEltYWdlR3Jhdml0eTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW91dC5qcy5tYXBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWltYWdlLWdyYXZpdHkuanMubWFwIl0sIm5hbWVzIjpbIkltYWdlR3Jhdml0eSIsIkltYWdlR3Jhdml0eTIiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/enums/image-gravity.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/enums/index-type.js":
/*!*************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/index-type.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar IndexType = /* @__PURE__ */ ((IndexType2)=>{\n    IndexType2[\"Key\"] = \"key\";\n    IndexType2[\"Fulltext\"] = \"fulltext\";\n    IndexType2[\"Unique\"] = \"unique\";\n    return IndexType2;\n})(IndexType || {});\nexports.IndexType = IndexType; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=index-type.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL2luZGV4LXR5cGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxZQUE0QixhQUFILEdBQUksRUFBQ0M7SUFDaENBLFVBQVUsQ0FBQyxNQUFNLEdBQUc7SUFDcEJBLFVBQVUsQ0FBQyxXQUFXLEdBQUc7SUFDekJBLFVBQVUsQ0FBQyxTQUFTLEdBQUc7SUFDdkIsT0FBT0E7QUFDVCxHQUFHRCxhQUFhLENBQUM7QUFFakJFLGlCQUFpQixHQUFHRixXQUNwQiwrQkFBK0I7Q0FDL0Isc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmlkZW8tZWRpdG9yLWFwcC8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2Rpc3QvZW51bXMvaW5kZXgtdHlwZS5qcz9mNDI3Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEluZGV4VHlwZSA9IC8qIEBfX1BVUkVfXyAqLyAoKEluZGV4VHlwZTIpID0+IHtcbiAgSW5kZXhUeXBlMltcIktleVwiXSA9IFwia2V5XCI7XG4gIEluZGV4VHlwZTJbXCJGdWxsdGV4dFwiXSA9IFwiZnVsbHRleHRcIjtcbiAgSW5kZXhUeXBlMltcIlVuaXF1ZVwiXSA9IFwidW5pcXVlXCI7XG4gIHJldHVybiBJbmRleFR5cGUyO1xufSkoSW5kZXhUeXBlIHx8IHt9KTtcblxuZXhwb3J0cy5JbmRleFR5cGUgPSBJbmRleFR5cGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vdXQuanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC10eXBlLmpzLm1hcCJdLCJuYW1lcyI6WyJJbmRleFR5cGUiLCJJbmRleFR5cGUyIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/enums/index-type.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/enums/messaging-provider-type.js":
/*!**************************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/messaging-provider-type.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar MessagingProviderType = /* @__PURE__ */ ((MessagingProviderType2)=>{\n    MessagingProviderType2[\"Email\"] = \"email\";\n    MessagingProviderType2[\"Sms\"] = \"sms\";\n    MessagingProviderType2[\"Push\"] = \"push\";\n    return MessagingProviderType2;\n})(MessagingProviderType || {});\nexports.MessagingProviderType = MessagingProviderType; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=messaging-provider-type.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL21lc3NhZ2luZy1wcm92aWRlci10eXBlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsd0JBQXdDLGFBQUgsR0FBSSxFQUFDQztJQUM1Q0Esc0JBQXNCLENBQUMsUUFBUSxHQUFHO0lBQ2xDQSxzQkFBc0IsQ0FBQyxNQUFNLEdBQUc7SUFDaENBLHNCQUFzQixDQUFDLE9BQU8sR0FBRztJQUNqQyxPQUFPQTtBQUNULEdBQUdELHlCQUF5QixDQUFDO0FBRTdCRSw2QkFBNkIsR0FBR0YsdUJBQ2hDLCtCQUErQjtDQUMvQixtREFBbUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWRlby1lZGl0b3ItYXBwLy4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvZGlzdC9lbnVtcy9tZXNzYWdpbmctcHJvdmlkZXItdHlwZS5qcz8yZTkxIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIE1lc3NhZ2luZ1Byb3ZpZGVyVHlwZSA9IC8qIEBfX1BVUkVfXyAqLyAoKE1lc3NhZ2luZ1Byb3ZpZGVyVHlwZTIpID0+IHtcbiAgTWVzc2FnaW5nUHJvdmlkZXJUeXBlMltcIkVtYWlsXCJdID0gXCJlbWFpbFwiO1xuICBNZXNzYWdpbmdQcm92aWRlclR5cGUyW1wiU21zXCJdID0gXCJzbXNcIjtcbiAgTWVzc2FnaW5nUHJvdmlkZXJUeXBlMltcIlB1c2hcIl0gPSBcInB1c2hcIjtcbiAgcmV0dXJuIE1lc3NhZ2luZ1Byb3ZpZGVyVHlwZTI7XG59KShNZXNzYWdpbmdQcm92aWRlclR5cGUgfHwge30pO1xuXG5leHBvcnRzLk1lc3NhZ2luZ1Byb3ZpZGVyVHlwZSA9IE1lc3NhZ2luZ1Byb3ZpZGVyVHlwZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW91dC5qcy5tYXBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lc3NhZ2luZy1wcm92aWRlci10eXBlLmpzLm1hcCJdLCJuYW1lcyI6WyJNZXNzYWdpbmdQcm92aWRlclR5cGUiLCJNZXNzYWdpbmdQcm92aWRlclR5cGUyIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/enums/messaging-provider-type.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/enums/name.js":
/*!*******************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/name.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar Name = /* @__PURE__ */ ((Name2)=>{\n    Name2[\"V1database\"] = \"v1-database\";\n    Name2[\"V1deletes\"] = \"v1-deletes\";\n    Name2[\"V1audits\"] = \"v1-audits\";\n    Name2[\"V1mails\"] = \"v1-mails\";\n    Name2[\"V1functions\"] = \"v1-functions\";\n    Name2[\"V1usage\"] = \"v1-usage\";\n    Name2[\"V1usagedump\"] = \"v1-usage-dump\";\n    Name2[\"V1webhooks\"] = \"v1-webhooks\";\n    Name2[\"V1certificates\"] = \"v1-certificates\";\n    Name2[\"V1builds\"] = \"v1-builds\";\n    Name2[\"V1messaging\"] = \"v1-messaging\";\n    Name2[\"V1migrations\"] = \"v1-migrations\";\n    return Name2;\n})(Name || {});\nexports.Name = Name; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=name.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL25hbWUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxPQUF1QixhQUFILEdBQUksRUFBQ0M7SUFDM0JBLEtBQUssQ0FBQyxhQUFhLEdBQUc7SUFDdEJBLEtBQUssQ0FBQyxZQUFZLEdBQUc7SUFDckJBLEtBQUssQ0FBQyxXQUFXLEdBQUc7SUFDcEJBLEtBQUssQ0FBQyxVQUFVLEdBQUc7SUFDbkJBLEtBQUssQ0FBQyxjQUFjLEdBQUc7SUFDdkJBLEtBQUssQ0FBQyxVQUFVLEdBQUc7SUFDbkJBLEtBQUssQ0FBQyxjQUFjLEdBQUc7SUFDdkJBLEtBQUssQ0FBQyxhQUFhLEdBQUc7SUFDdEJBLEtBQUssQ0FBQyxpQkFBaUIsR0FBRztJQUMxQkEsS0FBSyxDQUFDLFdBQVcsR0FBRztJQUNwQkEsS0FBSyxDQUFDLGNBQWMsR0FBRztJQUN2QkEsS0FBSyxDQUFDLGVBQWUsR0FBRztJQUN4QixPQUFPQTtBQUNULEdBQUdELFFBQVEsQ0FBQztBQUVaRSxZQUFZLEdBQUdGLE1BQ2YsK0JBQStCO0NBQy9CLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpZGVvLWVkaXRvci1hcHAvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL25hbWUuanM/Zjk5ZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbnZhciBOYW1lID0gLyogQF9fUFVSRV9fICovICgoTmFtZTIpID0+IHtcbiAgTmFtZTJbXCJWMWRhdGFiYXNlXCJdID0gXCJ2MS1kYXRhYmFzZVwiO1xuICBOYW1lMltcIlYxZGVsZXRlc1wiXSA9IFwidjEtZGVsZXRlc1wiO1xuICBOYW1lMltcIlYxYXVkaXRzXCJdID0gXCJ2MS1hdWRpdHNcIjtcbiAgTmFtZTJbXCJWMW1haWxzXCJdID0gXCJ2MS1tYWlsc1wiO1xuICBOYW1lMltcIlYxZnVuY3Rpb25zXCJdID0gXCJ2MS1mdW5jdGlvbnNcIjtcbiAgTmFtZTJbXCJWMXVzYWdlXCJdID0gXCJ2MS11c2FnZVwiO1xuICBOYW1lMltcIlYxdXNhZ2VkdW1wXCJdID0gXCJ2MS11c2FnZS1kdW1wXCI7XG4gIE5hbWUyW1wiVjF3ZWJob29rc1wiXSA9IFwidjEtd2ViaG9va3NcIjtcbiAgTmFtZTJbXCJWMWNlcnRpZmljYXRlc1wiXSA9IFwidjEtY2VydGlmaWNhdGVzXCI7XG4gIE5hbWUyW1wiVjFidWlsZHNcIl0gPSBcInYxLWJ1aWxkc1wiO1xuICBOYW1lMltcIlYxbWVzc2FnaW5nXCJdID0gXCJ2MS1tZXNzYWdpbmdcIjtcbiAgTmFtZTJbXCJWMW1pZ3JhdGlvbnNcIl0gPSBcInYxLW1pZ3JhdGlvbnNcIjtcbiAgcmV0dXJuIE5hbWUyO1xufSkoTmFtZSB8fCB7fSk7XG5cbmV4cG9ydHMuTmFtZSA9IE5hbWU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vdXQuanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD1uYW1lLmpzLm1hcCJdLCJuYW1lcyI6WyJOYW1lIiwiTmFtZTIiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/enums/name.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/enums/o-auth-provider.js":
/*!******************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/o-auth-provider.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar OAuthProvider = /* @__PURE__ */ ((OAuthProvider2)=>{\n    OAuthProvider2[\"Amazon\"] = \"amazon\";\n    OAuthProvider2[\"Apple\"] = \"apple\";\n    OAuthProvider2[\"Auth0\"] = \"auth0\";\n    OAuthProvider2[\"Authentik\"] = \"authentik\";\n    OAuthProvider2[\"Autodesk\"] = \"autodesk\";\n    OAuthProvider2[\"Bitbucket\"] = \"bitbucket\";\n    OAuthProvider2[\"Bitly\"] = \"bitly\";\n    OAuthProvider2[\"Box\"] = \"box\";\n    OAuthProvider2[\"Dailymotion\"] = \"dailymotion\";\n    OAuthProvider2[\"Discord\"] = \"discord\";\n    OAuthProvider2[\"Disqus\"] = \"disqus\";\n    OAuthProvider2[\"Dropbox\"] = \"dropbox\";\n    OAuthProvider2[\"Etsy\"] = \"etsy\";\n    OAuthProvider2[\"Facebook\"] = \"facebook\";\n    OAuthProvider2[\"Github\"] = \"github\";\n    OAuthProvider2[\"Gitlab\"] = \"gitlab\";\n    OAuthProvider2[\"Google\"] = \"google\";\n    OAuthProvider2[\"Linkedin\"] = \"linkedin\";\n    OAuthProvider2[\"Microsoft\"] = \"microsoft\";\n    OAuthProvider2[\"Notion\"] = \"notion\";\n    OAuthProvider2[\"Oidc\"] = \"oidc\";\n    OAuthProvider2[\"Okta\"] = \"okta\";\n    OAuthProvider2[\"Paypal\"] = \"paypal\";\n    OAuthProvider2[\"PaypalSandbox\"] = \"paypalSandbox\";\n    OAuthProvider2[\"Podio\"] = \"podio\";\n    OAuthProvider2[\"Salesforce\"] = \"salesforce\";\n    OAuthProvider2[\"Slack\"] = \"slack\";\n    OAuthProvider2[\"Spotify\"] = \"spotify\";\n    OAuthProvider2[\"Stripe\"] = \"stripe\";\n    OAuthProvider2[\"Tradeshift\"] = \"tradeshift\";\n    OAuthProvider2[\"TradeshiftBox\"] = \"tradeshiftBox\";\n    OAuthProvider2[\"Twitch\"] = \"twitch\";\n    OAuthProvider2[\"Wordpress\"] = \"wordpress\";\n    OAuthProvider2[\"Yahoo\"] = \"yahoo\";\n    OAuthProvider2[\"Yammer\"] = \"yammer\";\n    OAuthProvider2[\"Yandex\"] = \"yandex\";\n    OAuthProvider2[\"Zoho\"] = \"zoho\";\n    OAuthProvider2[\"Zoom\"] = \"zoom\";\n    OAuthProvider2[\"Mock\"] = \"mock\";\n    return OAuthProvider2;\n})(OAuthProvider || {});\nexports.OAuthProvider = OAuthProvider; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=o-auth-provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL28tYXV0aC1wcm92aWRlci5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLGdCQUFnQyxhQUFILEdBQUksRUFBQ0M7SUFDcENBLGNBQWMsQ0FBQyxTQUFTLEdBQUc7SUFDM0JBLGNBQWMsQ0FBQyxRQUFRLEdBQUc7SUFDMUJBLGNBQWMsQ0FBQyxRQUFRLEdBQUc7SUFDMUJBLGNBQWMsQ0FBQyxZQUFZLEdBQUc7SUFDOUJBLGNBQWMsQ0FBQyxXQUFXLEdBQUc7SUFDN0JBLGNBQWMsQ0FBQyxZQUFZLEdBQUc7SUFDOUJBLGNBQWMsQ0FBQyxRQUFRLEdBQUc7SUFDMUJBLGNBQWMsQ0FBQyxNQUFNLEdBQUc7SUFDeEJBLGNBQWMsQ0FBQyxjQUFjLEdBQUc7SUFDaENBLGNBQWMsQ0FBQyxVQUFVLEdBQUc7SUFDNUJBLGNBQWMsQ0FBQyxTQUFTLEdBQUc7SUFDM0JBLGNBQWMsQ0FBQyxVQUFVLEdBQUc7SUFDNUJBLGNBQWMsQ0FBQyxPQUFPLEdBQUc7SUFDekJBLGNBQWMsQ0FBQyxXQUFXLEdBQUc7SUFDN0JBLGNBQWMsQ0FBQyxTQUFTLEdBQUc7SUFDM0JBLGNBQWMsQ0FBQyxTQUFTLEdBQUc7SUFDM0JBLGNBQWMsQ0FBQyxTQUFTLEdBQUc7SUFDM0JBLGNBQWMsQ0FBQyxXQUFXLEdBQUc7SUFDN0JBLGNBQWMsQ0FBQyxZQUFZLEdBQUc7SUFDOUJBLGNBQWMsQ0FBQyxTQUFTLEdBQUc7SUFDM0JBLGNBQWMsQ0FBQyxPQUFPLEdBQUc7SUFDekJBLGNBQWMsQ0FBQyxPQUFPLEdBQUc7SUFDekJBLGNBQWMsQ0FBQyxTQUFTLEdBQUc7SUFDM0JBLGNBQWMsQ0FBQyxnQkFBZ0IsR0FBRztJQUNsQ0EsY0FBYyxDQUFDLFFBQVEsR0FBRztJQUMxQkEsY0FBYyxDQUFDLGFBQWEsR0FBRztJQUMvQkEsY0FBYyxDQUFDLFFBQVEsR0FBRztJQUMxQkEsY0FBYyxDQUFDLFVBQVUsR0FBRztJQUM1QkEsY0FBYyxDQUFDLFNBQVMsR0FBRztJQUMzQkEsY0FBYyxDQUFDLGFBQWEsR0FBRztJQUMvQkEsY0FBYyxDQUFDLGdCQUFnQixHQUFHO0lBQ2xDQSxjQUFjLENBQUMsU0FBUyxHQUFHO0lBQzNCQSxjQUFjLENBQUMsWUFBWSxHQUFHO0lBQzlCQSxjQUFjLENBQUMsUUFBUSxHQUFHO0lBQzFCQSxjQUFjLENBQUMsU0FBUyxHQUFHO0lBQzNCQSxjQUFjLENBQUMsU0FBUyxHQUFHO0lBQzNCQSxjQUFjLENBQUMsT0FBTyxHQUFHO0lBQ3pCQSxjQUFjLENBQUMsT0FBTyxHQUFHO0lBQ3pCQSxjQUFjLENBQUMsT0FBTyxHQUFHO0lBQ3pCLE9BQU9BO0FBQ1QsR0FBR0QsaUJBQWlCLENBQUM7QUFFckJFLHFCQUFxQixHQUFHRixlQUN4QiwrQkFBK0I7Q0FDL0IsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmlkZW8tZWRpdG9yLWFwcC8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2Rpc3QvZW51bXMvby1hdXRoLXByb3ZpZGVyLmpzPzU0YTQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgT0F1dGhQcm92aWRlciA9IC8qIEBfX1BVUkVfXyAqLyAoKE9BdXRoUHJvdmlkZXIyKSA9PiB7XG4gIE9BdXRoUHJvdmlkZXIyW1wiQW1hem9uXCJdID0gXCJhbWF6b25cIjtcbiAgT0F1dGhQcm92aWRlcjJbXCJBcHBsZVwiXSA9IFwiYXBwbGVcIjtcbiAgT0F1dGhQcm92aWRlcjJbXCJBdXRoMFwiXSA9IFwiYXV0aDBcIjtcbiAgT0F1dGhQcm92aWRlcjJbXCJBdXRoZW50aWtcIl0gPSBcImF1dGhlbnRpa1wiO1xuICBPQXV0aFByb3ZpZGVyMltcIkF1dG9kZXNrXCJdID0gXCJhdXRvZGVza1wiO1xuICBPQXV0aFByb3ZpZGVyMltcIkJpdGJ1Y2tldFwiXSA9IFwiYml0YnVja2V0XCI7XG4gIE9BdXRoUHJvdmlkZXIyW1wiQml0bHlcIl0gPSBcImJpdGx5XCI7XG4gIE9BdXRoUHJvdmlkZXIyW1wiQm94XCJdID0gXCJib3hcIjtcbiAgT0F1dGhQcm92aWRlcjJbXCJEYWlseW1vdGlvblwiXSA9IFwiZGFpbHltb3Rpb25cIjtcbiAgT0F1dGhQcm92aWRlcjJbXCJEaXNjb3JkXCJdID0gXCJkaXNjb3JkXCI7XG4gIE9BdXRoUHJvdmlkZXIyW1wiRGlzcXVzXCJdID0gXCJkaXNxdXNcIjtcbiAgT0F1dGhQcm92aWRlcjJbXCJEcm9wYm94XCJdID0gXCJkcm9wYm94XCI7XG4gIE9BdXRoUHJvdmlkZXIyW1wiRXRzeVwiXSA9IFwiZXRzeVwiO1xuICBPQXV0aFByb3ZpZGVyMltcIkZhY2Vib29rXCJdID0gXCJmYWNlYm9va1wiO1xuICBPQXV0aFByb3ZpZGVyMltcIkdpdGh1YlwiXSA9IFwiZ2l0aHViXCI7XG4gIE9BdXRoUHJvdmlkZXIyW1wiR2l0bGFiXCJdID0gXCJnaXRsYWJcIjtcbiAgT0F1dGhQcm92aWRlcjJbXCJHb29nbGVcIl0gPSBcImdvb2dsZVwiO1xuICBPQXV0aFByb3ZpZGVyMltcIkxpbmtlZGluXCJdID0gXCJsaW5rZWRpblwiO1xuICBPQXV0aFByb3ZpZGVyMltcIk1pY3Jvc29mdFwiXSA9IFwibWljcm9zb2Z0XCI7XG4gIE9BdXRoUHJvdmlkZXIyW1wiTm90aW9uXCJdID0gXCJub3Rpb25cIjtcbiAgT0F1dGhQcm92aWRlcjJbXCJPaWRjXCJdID0gXCJvaWRjXCI7XG4gIE9BdXRoUHJvdmlkZXIyW1wiT2t0YVwiXSA9IFwib2t0YVwiO1xuICBPQXV0aFByb3ZpZGVyMltcIlBheXBhbFwiXSA9IFwicGF5cGFsXCI7XG4gIE9BdXRoUHJvdmlkZXIyW1wiUGF5cGFsU2FuZGJveFwiXSA9IFwicGF5cGFsU2FuZGJveFwiO1xuICBPQXV0aFByb3ZpZGVyMltcIlBvZGlvXCJdID0gXCJwb2Rpb1wiO1xuICBPQXV0aFByb3ZpZGVyMltcIlNhbGVzZm9yY2VcIl0gPSBcInNhbGVzZm9yY2VcIjtcbiAgT0F1dGhQcm92aWRlcjJbXCJTbGFja1wiXSA9IFwic2xhY2tcIjtcbiAgT0F1dGhQcm92aWRlcjJbXCJTcG90aWZ5XCJdID0gXCJzcG90aWZ5XCI7XG4gIE9BdXRoUHJvdmlkZXIyW1wiU3RyaXBlXCJdID0gXCJzdHJpcGVcIjtcbiAgT0F1dGhQcm92aWRlcjJbXCJUcmFkZXNoaWZ0XCJdID0gXCJ0cmFkZXNoaWZ0XCI7XG4gIE9BdXRoUHJvdmlkZXIyW1wiVHJhZGVzaGlmdEJveFwiXSA9IFwidHJhZGVzaGlmdEJveFwiO1xuICBPQXV0aFByb3ZpZGVyMltcIlR3aXRjaFwiXSA9IFwidHdpdGNoXCI7XG4gIE9BdXRoUHJvdmlkZXIyW1wiV29yZHByZXNzXCJdID0gXCJ3b3JkcHJlc3NcIjtcbiAgT0F1dGhQcm92aWRlcjJbXCJZYWhvb1wiXSA9IFwieWFob29cIjtcbiAgT0F1dGhQcm92aWRlcjJbXCJZYW1tZXJcIl0gPSBcInlhbW1lclwiO1xuICBPQXV0aFByb3ZpZGVyMltcIllhbmRleFwiXSA9IFwieWFuZGV4XCI7XG4gIE9BdXRoUHJvdmlkZXIyW1wiWm9ob1wiXSA9IFwiem9ob1wiO1xuICBPQXV0aFByb3ZpZGVyMltcIlpvb21cIl0gPSBcInpvb21cIjtcbiAgT0F1dGhQcm92aWRlcjJbXCJNb2NrXCJdID0gXCJtb2NrXCI7XG4gIHJldHVybiBPQXV0aFByb3ZpZGVyMjtcbn0pKE9BdXRoUHJvdmlkZXIgfHwge30pO1xuXG5leHBvcnRzLk9BdXRoUHJvdmlkZXIgPSBPQXV0aFByb3ZpZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3V0LmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9by1hdXRoLXByb3ZpZGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPQXV0aFByb3ZpZGVyIiwiT0F1dGhQcm92aWRlcjIiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/enums/o-auth-provider.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/enums/password-hash.js":
/*!****************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/password-hash.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar PasswordHash = /* @__PURE__ */ ((PasswordHash2)=>{\n    PasswordHash2[\"Sha1\"] = \"sha1\";\n    PasswordHash2[\"Sha224\"] = \"sha224\";\n    PasswordHash2[\"Sha256\"] = \"sha256\";\n    PasswordHash2[\"Sha384\"] = \"sha384\";\n    PasswordHash2[\"Sha512224\"] = \"sha512/224\";\n    PasswordHash2[\"Sha512256\"] = \"sha512/256\";\n    PasswordHash2[\"Sha512\"] = \"sha512\";\n    PasswordHash2[\"Sha3224\"] = \"sha3-224\";\n    PasswordHash2[\"Sha3256\"] = \"sha3-256\";\n    PasswordHash2[\"Sha3384\"] = \"sha3-384\";\n    PasswordHash2[\"Sha3512\"] = \"sha3-512\";\n    return PasswordHash2;\n})(PasswordHash || {});\nexports.PasswordHash = PasswordHash; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=password-hash.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL3Bhc3N3b3JkLWhhc2guanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxlQUErQixhQUFILEdBQUksRUFBQ0M7SUFDbkNBLGFBQWEsQ0FBQyxPQUFPLEdBQUc7SUFDeEJBLGFBQWEsQ0FBQyxTQUFTLEdBQUc7SUFDMUJBLGFBQWEsQ0FBQyxTQUFTLEdBQUc7SUFDMUJBLGFBQWEsQ0FBQyxTQUFTLEdBQUc7SUFDMUJBLGFBQWEsQ0FBQyxZQUFZLEdBQUc7SUFDN0JBLGFBQWEsQ0FBQyxZQUFZLEdBQUc7SUFDN0JBLGFBQWEsQ0FBQyxTQUFTLEdBQUc7SUFDMUJBLGFBQWEsQ0FBQyxVQUFVLEdBQUc7SUFDM0JBLGFBQWEsQ0FBQyxVQUFVLEdBQUc7SUFDM0JBLGFBQWEsQ0FBQyxVQUFVLEdBQUc7SUFDM0JBLGFBQWEsQ0FBQyxVQUFVLEdBQUc7SUFDM0IsT0FBT0E7QUFDVCxHQUFHRCxnQkFBZ0IsQ0FBQztBQUVwQkUsb0JBQW9CLEdBQUdGLGNBQ3ZCLCtCQUErQjtDQUMvQix5Q0FBeUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWRlby1lZGl0b3ItYXBwLy4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvZGlzdC9lbnVtcy9wYXNzd29yZC1oYXNoLmpzPzhkYjgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUGFzc3dvcmRIYXNoID0gLyogQF9fUFVSRV9fICovICgoUGFzc3dvcmRIYXNoMikgPT4ge1xuICBQYXNzd29yZEhhc2gyW1wiU2hhMVwiXSA9IFwic2hhMVwiO1xuICBQYXNzd29yZEhhc2gyW1wiU2hhMjI0XCJdID0gXCJzaGEyMjRcIjtcbiAgUGFzc3dvcmRIYXNoMltcIlNoYTI1NlwiXSA9IFwic2hhMjU2XCI7XG4gIFBhc3N3b3JkSGFzaDJbXCJTaGEzODRcIl0gPSBcInNoYTM4NFwiO1xuICBQYXNzd29yZEhhc2gyW1wiU2hhNTEyMjI0XCJdID0gXCJzaGE1MTIvMjI0XCI7XG4gIFBhc3N3b3JkSGFzaDJbXCJTaGE1MTIyNTZcIl0gPSBcInNoYTUxMi8yNTZcIjtcbiAgUGFzc3dvcmRIYXNoMltcIlNoYTUxMlwiXSA9IFwic2hhNTEyXCI7XG4gIFBhc3N3b3JkSGFzaDJbXCJTaGEzMjI0XCJdID0gXCJzaGEzLTIyNFwiO1xuICBQYXNzd29yZEhhc2gyW1wiU2hhMzI1NlwiXSA9IFwic2hhMy0yNTZcIjtcbiAgUGFzc3dvcmRIYXNoMltcIlNoYTMzODRcIl0gPSBcInNoYTMtMzg0XCI7XG4gIFBhc3N3b3JkSGFzaDJbXCJTaGEzNTEyXCJdID0gXCJzaGEzLTUxMlwiO1xuICByZXR1cm4gUGFzc3dvcmRIYXNoMjtcbn0pKFBhc3N3b3JkSGFzaCB8fCB7fSk7XG5cbmV4cG9ydHMuUGFzc3dvcmRIYXNoID0gUGFzc3dvcmRIYXNoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3V0LmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFzc3dvcmQtaGFzaC5qcy5tYXAiXSwibmFtZXMiOlsiUGFzc3dvcmRIYXNoIiwiUGFzc3dvcmRIYXNoMiIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/enums/password-hash.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/enums/relation-mutate.js":
/*!******************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/relation-mutate.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar RelationMutate = /* @__PURE__ */ ((RelationMutate2)=>{\n    RelationMutate2[\"Cascade\"] = \"cascade\";\n    RelationMutate2[\"Restrict\"] = \"restrict\";\n    RelationMutate2[\"SetNull\"] = \"setNull\";\n    return RelationMutate2;\n})(RelationMutate || {});\nexports.RelationMutate = RelationMutate; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=relation-mutate.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL3JlbGF0aW9uLW11dGF0ZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLGlCQUFpQyxhQUFILEdBQUksRUFBQ0M7SUFDckNBLGVBQWUsQ0FBQyxVQUFVLEdBQUc7SUFDN0JBLGVBQWUsQ0FBQyxXQUFXLEdBQUc7SUFDOUJBLGVBQWUsQ0FBQyxVQUFVLEdBQUc7SUFDN0IsT0FBT0E7QUFDVCxHQUFHRCxrQkFBa0IsQ0FBQztBQUV0QkUsc0JBQXNCLEdBQUdGLGdCQUN6QiwrQkFBK0I7Q0FDL0IsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmlkZW8tZWRpdG9yLWFwcC8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2Rpc3QvZW51bXMvcmVsYXRpb24tbXV0YXRlLmpzPzI3MjEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVsYXRpb25NdXRhdGUgPSAvKiBAX19QVVJFX18gKi8gKChSZWxhdGlvbk11dGF0ZTIpID0+IHtcbiAgUmVsYXRpb25NdXRhdGUyW1wiQ2FzY2FkZVwiXSA9IFwiY2FzY2FkZVwiO1xuICBSZWxhdGlvbk11dGF0ZTJbXCJSZXN0cmljdFwiXSA9IFwicmVzdHJpY3RcIjtcbiAgUmVsYXRpb25NdXRhdGUyW1wiU2V0TnVsbFwiXSA9IFwic2V0TnVsbFwiO1xuICByZXR1cm4gUmVsYXRpb25NdXRhdGUyO1xufSkoUmVsYXRpb25NdXRhdGUgfHwge30pO1xuXG5leHBvcnRzLlJlbGF0aW9uTXV0YXRlID0gUmVsYXRpb25NdXRhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vdXQuanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWxhdGlvbi1tdXRhdGUuanMubWFwIl0sIm5hbWVzIjpbIlJlbGF0aW9uTXV0YXRlIiwiUmVsYXRpb25NdXRhdGUyIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/enums/relation-mutate.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/enums/relationship-type.js":
/*!********************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/relationship-type.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar RelationshipType = /* @__PURE__ */ ((RelationshipType2)=>{\n    RelationshipType2[\"OneToOne\"] = \"oneToOne\";\n    RelationshipType2[\"ManyToOne\"] = \"manyToOne\";\n    RelationshipType2[\"ManyToMany\"] = \"manyToMany\";\n    RelationshipType2[\"OneToMany\"] = \"oneToMany\";\n    return RelationshipType2;\n})(RelationshipType || {});\nexports.RelationshipType = RelationshipType; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=relationship-type.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL3JlbGF0aW9uc2hpcC10eXBlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsbUJBQW1DLGFBQUgsR0FBSSxFQUFDQztJQUN2Q0EsaUJBQWlCLENBQUMsV0FBVyxHQUFHO0lBQ2hDQSxpQkFBaUIsQ0FBQyxZQUFZLEdBQUc7SUFDakNBLGlCQUFpQixDQUFDLGFBQWEsR0FBRztJQUNsQ0EsaUJBQWlCLENBQUMsWUFBWSxHQUFHO0lBQ2pDLE9BQU9BO0FBQ1QsR0FBR0Qsb0JBQW9CLENBQUM7QUFFeEJFLHdCQUF3QixHQUFHRixrQkFDM0IsK0JBQStCO0NBQy9CLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL3ZpZGVvLWVkaXRvci1hcHAvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL3JlbGF0aW9uc2hpcC10eXBlLmpzPzUxYmUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVsYXRpb25zaGlwVHlwZSA9IC8qIEBfX1BVUkVfXyAqLyAoKFJlbGF0aW9uc2hpcFR5cGUyKSA9PiB7XG4gIFJlbGF0aW9uc2hpcFR5cGUyW1wiT25lVG9PbmVcIl0gPSBcIm9uZVRvT25lXCI7XG4gIFJlbGF0aW9uc2hpcFR5cGUyW1wiTWFueVRvT25lXCJdID0gXCJtYW55VG9PbmVcIjtcbiAgUmVsYXRpb25zaGlwVHlwZTJbXCJNYW55VG9NYW55XCJdID0gXCJtYW55VG9NYW55XCI7XG4gIFJlbGF0aW9uc2hpcFR5cGUyW1wiT25lVG9NYW55XCJdID0gXCJvbmVUb01hbnlcIjtcbiAgcmV0dXJuIFJlbGF0aW9uc2hpcFR5cGUyO1xufSkoUmVsYXRpb25zaGlwVHlwZSB8fCB7fSk7XG5cbmV4cG9ydHMuUmVsYXRpb25zaGlwVHlwZSA9IFJlbGF0aW9uc2hpcFR5cGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vdXQuanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD1yZWxhdGlvbnNoaXAtdHlwZS5qcy5tYXAiXSwibmFtZXMiOlsiUmVsYXRpb25zaGlwVHlwZSIsIlJlbGF0aW9uc2hpcFR5cGUyIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/enums/relationship-type.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/enums/runtime.js":
/*!**********************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/runtime.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar Runtime = /* @__PURE__ */ ((Runtime2)=>{\n    Runtime2[\"Node145\"] = \"node-14.5\";\n    Runtime2[\"Node160\"] = \"node-16.0\";\n    Runtime2[\"Node180\"] = \"node-18.0\";\n    Runtime2[\"Node190\"] = \"node-19.0\";\n    Runtime2[\"Node200\"] = \"node-20.0\";\n    Runtime2[\"Node210\"] = \"node-21.0\";\n    Runtime2[\"Php80\"] = \"php-8.0\";\n    Runtime2[\"Php81\"] = \"php-8.1\";\n    Runtime2[\"Php82\"] = \"php-8.2\";\n    Runtime2[\"Php83\"] = \"php-8.3\";\n    Runtime2[\"Ruby30\"] = \"ruby-3.0\";\n    Runtime2[\"Ruby31\"] = \"ruby-3.1\";\n    Runtime2[\"Ruby32\"] = \"ruby-3.2\";\n    Runtime2[\"Ruby33\"] = \"ruby-3.3\";\n    Runtime2[\"Python38\"] = \"python-3.8\";\n    Runtime2[\"Python39\"] = \"python-3.9\";\n    Runtime2[\"Python310\"] = \"python-3.10\";\n    Runtime2[\"Python311\"] = \"python-3.11\";\n    Runtime2[\"Python312\"] = \"python-3.12\";\n    Runtime2[\"Pythonml311\"] = \"python-ml-3.11\";\n    Runtime2[\"Deno140\"] = \"deno-1.40\";\n    Runtime2[\"Dart215\"] = \"dart-2.15\";\n    Runtime2[\"Dart216\"] = \"dart-2.16\";\n    Runtime2[\"Dart217\"] = \"dart-2.17\";\n    Runtime2[\"Dart218\"] = \"dart-2.18\";\n    Runtime2[\"Dart30\"] = \"dart-3.0\";\n    Runtime2[\"Dart31\"] = \"dart-3.1\";\n    Runtime2[\"Dart33\"] = \"dart-3.3\";\n    Runtime2[\"Dotnet31\"] = \"dotnet-3.1\";\n    Runtime2[\"Dotnet60\"] = \"dotnet-6.0\";\n    Runtime2[\"Dotnet70\"] = \"dotnet-7.0\";\n    Runtime2[\"Java80\"] = \"java-8.0\";\n    Runtime2[\"Java110\"] = \"java-11.0\";\n    Runtime2[\"Java170\"] = \"java-17.0\";\n    Runtime2[\"Java180\"] = \"java-18.0\";\n    Runtime2[\"Java210\"] = \"java-21.0\";\n    Runtime2[\"Swift55\"] = \"swift-5.5\";\n    Runtime2[\"Swift58\"] = \"swift-5.8\";\n    Runtime2[\"Swift59\"] = \"swift-5.9\";\n    Runtime2[\"Kotlin16\"] = \"kotlin-1.6\";\n    Runtime2[\"Kotlin18\"] = \"kotlin-1.8\";\n    Runtime2[\"Kotlin19\"] = \"kotlin-1.9\";\n    Runtime2[\"Cpp17\"] = \"cpp-17\";\n    Runtime2[\"Cpp20\"] = \"cpp-20\";\n    Runtime2[\"Bun10\"] = \"bun-1.0\";\n    Runtime2[\"Go123\"] = \"go-1.23\";\n    return Runtime2;\n})(Runtime || {});\nexports.Runtime = Runtime; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=runtime.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL3J1bnRpbWUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxVQUEwQixhQUFILEdBQUksRUFBQ0M7SUFDOUJBLFFBQVEsQ0FBQyxVQUFVLEdBQUc7SUFDdEJBLFFBQVEsQ0FBQyxVQUFVLEdBQUc7SUFDdEJBLFFBQVEsQ0FBQyxVQUFVLEdBQUc7SUFDdEJBLFFBQVEsQ0FBQyxVQUFVLEdBQUc7SUFDdEJBLFFBQVEsQ0FBQyxVQUFVLEdBQUc7SUFDdEJBLFFBQVEsQ0FBQyxVQUFVLEdBQUc7SUFDdEJBLFFBQVEsQ0FBQyxRQUFRLEdBQUc7SUFDcEJBLFFBQVEsQ0FBQyxRQUFRLEdBQUc7SUFDcEJBLFFBQVEsQ0FBQyxRQUFRLEdBQUc7SUFDcEJBLFFBQVEsQ0FBQyxRQUFRLEdBQUc7SUFDcEJBLFFBQVEsQ0FBQyxTQUFTLEdBQUc7SUFDckJBLFFBQVEsQ0FBQyxTQUFTLEdBQUc7SUFDckJBLFFBQVEsQ0FBQyxTQUFTLEdBQUc7SUFDckJBLFFBQVEsQ0FBQyxTQUFTLEdBQUc7SUFDckJBLFFBQVEsQ0FBQyxXQUFXLEdBQUc7SUFDdkJBLFFBQVEsQ0FBQyxXQUFXLEdBQUc7SUFDdkJBLFFBQVEsQ0FBQyxZQUFZLEdBQUc7SUFDeEJBLFFBQVEsQ0FBQyxZQUFZLEdBQUc7SUFDeEJBLFFBQVEsQ0FBQyxZQUFZLEdBQUc7SUFDeEJBLFFBQVEsQ0FBQyxjQUFjLEdBQUc7SUFDMUJBLFFBQVEsQ0FBQyxVQUFVLEdBQUc7SUFDdEJBLFFBQVEsQ0FBQyxVQUFVLEdBQUc7SUFDdEJBLFFBQVEsQ0FBQyxVQUFVLEdBQUc7SUFDdEJBLFFBQVEsQ0FBQyxVQUFVLEdBQUc7SUFDdEJBLFFBQVEsQ0FBQyxVQUFVLEdBQUc7SUFDdEJBLFFBQVEsQ0FBQyxTQUFTLEdBQUc7SUFDckJBLFFBQVEsQ0FBQyxTQUFTLEdBQUc7SUFDckJBLFFBQVEsQ0FBQyxTQUFTLEdBQUc7SUFDckJBLFFBQVEsQ0FBQyxXQUFXLEdBQUc7SUFDdkJBLFFBQVEsQ0FBQyxXQUFXLEdBQUc7SUFDdkJBLFFBQVEsQ0FBQyxXQUFXLEdBQUc7SUFDdkJBLFFBQVEsQ0FBQyxTQUFTLEdBQUc7SUFDckJBLFFBQVEsQ0FBQyxVQUFVLEdBQUc7SUFDdEJBLFFBQVEsQ0FBQyxVQUFVLEdBQUc7SUFDdEJBLFFBQVEsQ0FBQyxVQUFVLEdBQUc7SUFDdEJBLFFBQVEsQ0FBQyxVQUFVLEdBQUc7SUFDdEJBLFFBQVEsQ0FBQyxVQUFVLEdBQUc7SUFDdEJBLFFBQVEsQ0FBQyxVQUFVLEdBQUc7SUFDdEJBLFFBQVEsQ0FBQyxVQUFVLEdBQUc7SUFDdEJBLFFBQVEsQ0FBQyxXQUFXLEdBQUc7SUFDdkJBLFFBQVEsQ0FBQyxXQUFXLEdBQUc7SUFDdkJBLFFBQVEsQ0FBQyxXQUFXLEdBQUc7SUFDdkJBLFFBQVEsQ0FBQyxRQUFRLEdBQUc7SUFDcEJBLFFBQVEsQ0FBQyxRQUFRLEdBQUc7SUFDcEJBLFFBQVEsQ0FBQyxRQUFRLEdBQUc7SUFDcEJBLFFBQVEsQ0FBQyxRQUFRLEdBQUc7SUFDcEIsT0FBT0E7QUFDVCxHQUFHRCxXQUFXLENBQUM7QUFFZkUsZUFBZSxHQUFHRixTQUNsQiwrQkFBK0I7Q0FDL0IsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmlkZW8tZWRpdG9yLWFwcC8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2Rpc3QvZW51bXMvcnVudGltZS5qcz9kZTQ5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIFJ1bnRpbWUgPSAvKiBAX19QVVJFX18gKi8gKChSdW50aW1lMikgPT4ge1xuICBSdW50aW1lMltcIk5vZGUxNDVcIl0gPSBcIm5vZGUtMTQuNVwiO1xuICBSdW50aW1lMltcIk5vZGUxNjBcIl0gPSBcIm5vZGUtMTYuMFwiO1xuICBSdW50aW1lMltcIk5vZGUxODBcIl0gPSBcIm5vZGUtMTguMFwiO1xuICBSdW50aW1lMltcIk5vZGUxOTBcIl0gPSBcIm5vZGUtMTkuMFwiO1xuICBSdW50aW1lMltcIk5vZGUyMDBcIl0gPSBcIm5vZGUtMjAuMFwiO1xuICBSdW50aW1lMltcIk5vZGUyMTBcIl0gPSBcIm5vZGUtMjEuMFwiO1xuICBSdW50aW1lMltcIlBocDgwXCJdID0gXCJwaHAtOC4wXCI7XG4gIFJ1bnRpbWUyW1wiUGhwODFcIl0gPSBcInBocC04LjFcIjtcbiAgUnVudGltZTJbXCJQaHA4MlwiXSA9IFwicGhwLTguMlwiO1xuICBSdW50aW1lMltcIlBocDgzXCJdID0gXCJwaHAtOC4zXCI7XG4gIFJ1bnRpbWUyW1wiUnVieTMwXCJdID0gXCJydWJ5LTMuMFwiO1xuICBSdW50aW1lMltcIlJ1YnkzMVwiXSA9IFwicnVieS0zLjFcIjtcbiAgUnVudGltZTJbXCJSdWJ5MzJcIl0gPSBcInJ1YnktMy4yXCI7XG4gIFJ1bnRpbWUyW1wiUnVieTMzXCJdID0gXCJydWJ5LTMuM1wiO1xuICBSdW50aW1lMltcIlB5dGhvbjM4XCJdID0gXCJweXRob24tMy44XCI7XG4gIFJ1bnRpbWUyW1wiUHl0aG9uMzlcIl0gPSBcInB5dGhvbi0zLjlcIjtcbiAgUnVudGltZTJbXCJQeXRob24zMTBcIl0gPSBcInB5dGhvbi0zLjEwXCI7XG4gIFJ1bnRpbWUyW1wiUHl0aG9uMzExXCJdID0gXCJweXRob24tMy4xMVwiO1xuICBSdW50aW1lMltcIlB5dGhvbjMxMlwiXSA9IFwicHl0aG9uLTMuMTJcIjtcbiAgUnVudGltZTJbXCJQeXRob25tbDMxMVwiXSA9IFwicHl0aG9uLW1sLTMuMTFcIjtcbiAgUnVudGltZTJbXCJEZW5vMTQwXCJdID0gXCJkZW5vLTEuNDBcIjtcbiAgUnVudGltZTJbXCJEYXJ0MjE1XCJdID0gXCJkYXJ0LTIuMTVcIjtcbiAgUnVudGltZTJbXCJEYXJ0MjE2XCJdID0gXCJkYXJ0LTIuMTZcIjtcbiAgUnVudGltZTJbXCJEYXJ0MjE3XCJdID0gXCJkYXJ0LTIuMTdcIjtcbiAgUnVudGltZTJbXCJEYXJ0MjE4XCJdID0gXCJkYXJ0LTIuMThcIjtcbiAgUnVudGltZTJbXCJEYXJ0MzBcIl0gPSBcImRhcnQtMy4wXCI7XG4gIFJ1bnRpbWUyW1wiRGFydDMxXCJdID0gXCJkYXJ0LTMuMVwiO1xuICBSdW50aW1lMltcIkRhcnQzM1wiXSA9IFwiZGFydC0zLjNcIjtcbiAgUnVudGltZTJbXCJEb3RuZXQzMVwiXSA9IFwiZG90bmV0LTMuMVwiO1xuICBSdW50aW1lMltcIkRvdG5ldDYwXCJdID0gXCJkb3RuZXQtNi4wXCI7XG4gIFJ1bnRpbWUyW1wiRG90bmV0NzBcIl0gPSBcImRvdG5ldC03LjBcIjtcbiAgUnVudGltZTJbXCJKYXZhODBcIl0gPSBcImphdmEtOC4wXCI7XG4gIFJ1bnRpbWUyW1wiSmF2YTExMFwiXSA9IFwiamF2YS0xMS4wXCI7XG4gIFJ1bnRpbWUyW1wiSmF2YTE3MFwiXSA9IFwiamF2YS0xNy4wXCI7XG4gIFJ1bnRpbWUyW1wiSmF2YTE4MFwiXSA9IFwiamF2YS0xOC4wXCI7XG4gIFJ1bnRpbWUyW1wiSmF2YTIxMFwiXSA9IFwiamF2YS0yMS4wXCI7XG4gIFJ1bnRpbWUyW1wiU3dpZnQ1NVwiXSA9IFwic3dpZnQtNS41XCI7XG4gIFJ1bnRpbWUyW1wiU3dpZnQ1OFwiXSA9IFwic3dpZnQtNS44XCI7XG4gIFJ1bnRpbWUyW1wiU3dpZnQ1OVwiXSA9IFwic3dpZnQtNS45XCI7XG4gIFJ1bnRpbWUyW1wiS290bGluMTZcIl0gPSBcImtvdGxpbi0xLjZcIjtcbiAgUnVudGltZTJbXCJLb3RsaW4xOFwiXSA9IFwia290bGluLTEuOFwiO1xuICBSdW50aW1lMltcIktvdGxpbjE5XCJdID0gXCJrb3RsaW4tMS45XCI7XG4gIFJ1bnRpbWUyW1wiQ3BwMTdcIl0gPSBcImNwcC0xN1wiO1xuICBSdW50aW1lMltcIkNwcDIwXCJdID0gXCJjcHAtMjBcIjtcbiAgUnVudGltZTJbXCJCdW4xMFwiXSA9IFwiYnVuLTEuMFwiO1xuICBSdW50aW1lMltcIkdvMTIzXCJdID0gXCJnby0xLjIzXCI7XG4gIHJldHVybiBSdW50aW1lMjtcbn0pKFJ1bnRpbWUgfHwge30pO1xuXG5leHBvcnRzLlJ1bnRpbWUgPSBSdW50aW1lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3V0LmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cnVudGltZS5qcy5tYXAiXSwibmFtZXMiOlsiUnVudGltZSIsIlJ1bnRpbWUyIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/enums/runtime.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/enums/smtp-encryption.js":
/*!******************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/enums/smtp-encryption.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar SmtpEncryption = /* @__PURE__ */ ((SmtpEncryption2)=>{\n    SmtpEncryption2[\"None\"] = \"none\";\n    SmtpEncryption2[\"Ssl\"] = \"ssl\";\n    SmtpEncryption2[\"Tls\"] = \"tls\";\n    return SmtpEncryption2;\n})(SmtpEncryption || {});\nexports.SmtpEncryption = SmtpEncryption; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=smtp-encryption.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2VudW1zL3NtdHAtZW5jcnlwdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLGlCQUFpQyxhQUFILEdBQUksRUFBQ0M7SUFDckNBLGVBQWUsQ0FBQyxPQUFPLEdBQUc7SUFDMUJBLGVBQWUsQ0FBQyxNQUFNLEdBQUc7SUFDekJBLGVBQWUsQ0FBQyxNQUFNLEdBQUc7SUFDekIsT0FBT0E7QUFDVCxHQUFHRCxrQkFBa0IsQ0FBQztBQUV0QkUsc0JBQXNCLEdBQUdGLGdCQUN6QiwrQkFBK0I7Q0FDL0IsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmlkZW8tZWRpdG9yLWFwcC8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2Rpc3QvZW51bXMvc210cC1lbmNyeXB0aW9uLmpzP2NhODUiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgU210cEVuY3J5cHRpb24gPSAvKiBAX19QVVJFX18gKi8gKChTbXRwRW5jcnlwdGlvbjIpID0+IHtcbiAgU210cEVuY3J5cHRpb24yW1wiTm9uZVwiXSA9IFwibm9uZVwiO1xuICBTbXRwRW5jcnlwdGlvbjJbXCJTc2xcIl0gPSBcInNzbFwiO1xuICBTbXRwRW5jcnlwdGlvbjJbXCJUbHNcIl0gPSBcInRsc1wiO1xuICByZXR1cm4gU210cEVuY3J5cHRpb24yO1xufSkoU210cEVuY3J5cHRpb24gfHwge30pO1xuXG5leHBvcnRzLlNtdHBFbmNyeXB0aW9uID0gU210cEVuY3J5cHRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vdXQuanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zbXRwLWVuY3J5cHRpb24uanMubWFwIl0sIm5hbWVzIjpbIlNtdHBFbmNyeXB0aW9uIiwiU210cEVuY3J5cHRpb24yIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/enums/smtp-encryption.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/id.js":
/*!***********************************************!*\
  !*** ./node_modules/node-appwrite/dist/id.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nclass ID {\n    /**\n   * Generate an hex ID based on timestamp.\n   * Recreated from https://www.php.net/manual/en/function.uniqid.php\n   *\n   * @returns {string}\n   */ static #hexTimestamp() {\n        const now = /* @__PURE__ */ new Date();\n        const sec = Math.floor(now.getTime() / 1e3);\n        const msec = now.getMilliseconds();\n        const hexTimestamp = sec.toString(16) + msec.toString(16).padStart(5, \"0\");\n        return hexTimestamp;\n    }\n    /**\n   * Uses the provided ID as the ID for the resource.\n   *\n   * @param {string} id\n   * @returns {string}\n   */ static custom(id) {\n        return id;\n    }\n    /**\n   * Have Appwrite generate a unique ID for you.\n   * \n   * @param {number} padding. Default is 7.\n   * @returns {string}\n   */ static unique(padding = 7) {\n        const baseId = ID.#hexTimestamp();\n        let randomPadding = \"\";\n        for(let i = 0; i < padding; i++){\n            const randomHexDigit = Math.floor(Math.random() * 16).toString(16);\n            randomPadding += randomHexDigit;\n        }\n        return baseId + randomPadding;\n    }\n}\nexports.ID = ID; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=id.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L2lkLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTUE7SUFDSjs7Ozs7R0FLQyxHQUNELE9BQU8sQ0FBQ0MsWUFBWTtRQUNsQixNQUFNQyxNQUFNLGFBQWEsR0FBRyxJQUFJQztRQUNoQyxNQUFNQyxNQUFNQyxLQUFLQyxLQUFLLENBQUNKLElBQUlLLE9BQU8sS0FBSztRQUN2QyxNQUFNQyxPQUFPTixJQUFJTyxlQUFlO1FBQ2hDLE1BQU1SLGVBQWVHLElBQUlNLFFBQVEsQ0FBQyxNQUFNRixLQUFLRSxRQUFRLENBQUMsSUFBSUMsUUFBUSxDQUFDLEdBQUc7UUFDdEUsT0FBT1Y7SUFDVDtJQUNBOzs7OztHQUtDLEdBQ0QsT0FBT1csT0FBT0MsRUFBRSxFQUFFO1FBQ2hCLE9BQU9BO0lBQ1Q7SUFDQTs7Ozs7R0FLQyxHQUNELE9BQU9DLE9BQU9DLFVBQVUsQ0FBQyxFQUFFO1FBQ3pCLE1BQU1DLFNBQVNoQixHQUFHLENBQUNDLFlBQVk7UUFDL0IsSUFBSWdCLGdCQUFnQjtRQUNwQixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUgsU0FBU0csSUFBSztZQUNoQyxNQUFNQyxpQkFBaUJkLEtBQUtDLEtBQUssQ0FBQ0QsS0FBS2UsTUFBTSxLQUFLLElBQUlWLFFBQVEsQ0FBQztZQUMvRE8saUJBQWlCRTtRQUNuQjtRQUNBLE9BQU9ILFNBQVNDO0lBQ2xCO0FBQ0Y7QUFFQUksVUFBVSxHQUFHckIsSUFDYiwrQkFBK0I7Q0FDL0IsOEJBQThCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmlkZW8tZWRpdG9yLWFwcC8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2Rpc3QvaWQuanM/NjU4NSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmNsYXNzIElEIHtcbiAgLyoqXG4gICAqIEdlbmVyYXRlIGFuIGhleCBJRCBiYXNlZCBvbiB0aW1lc3RhbXAuXG4gICAqIFJlY3JlYXRlZCBmcm9tIGh0dHBzOi8vd3d3LnBocC5uZXQvbWFudWFsL2VuL2Z1bmN0aW9uLnVuaXFpZC5waHBcbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyAjaGV4VGltZXN0YW1wKCkge1xuICAgIGNvbnN0IG5vdyA9IC8qIEBfX1BVUkVfXyAqLyBuZXcgRGF0ZSgpO1xuICAgIGNvbnN0IHNlYyA9IE1hdGguZmxvb3Iobm93LmdldFRpbWUoKSAvIDFlMyk7XG4gICAgY29uc3QgbXNlYyA9IG5vdy5nZXRNaWxsaXNlY29uZHMoKTtcbiAgICBjb25zdCBoZXhUaW1lc3RhbXAgPSBzZWMudG9TdHJpbmcoMTYpICsgbXNlYy50b1N0cmluZygxNikucGFkU3RhcnQoNSwgXCIwXCIpO1xuICAgIHJldHVybiBoZXhUaW1lc3RhbXA7XG4gIH1cbiAgLyoqXG4gICAqIFVzZXMgdGhlIHByb3ZpZGVkIElEIGFzIHRoZSBJRCBmb3IgdGhlIHJlc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWRcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBjdXN0b20oaWQpIHtcbiAgICByZXR1cm4gaWQ7XG4gIH1cbiAgLyoqXG4gICAqIEhhdmUgQXBwd3JpdGUgZ2VuZXJhdGUgYSB1bmlxdWUgSUQgZm9yIHlvdS5cbiAgICogXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwYWRkaW5nLiBEZWZhdWx0IGlzIDcuXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgdW5pcXVlKHBhZGRpbmcgPSA3KSB7XG4gICAgY29uc3QgYmFzZUlkID0gSUQuI2hleFRpbWVzdGFtcCgpO1xuICAgIGxldCByYW5kb21QYWRkaW5nID0gXCJcIjtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhZGRpbmc7IGkrKykge1xuICAgICAgY29uc3QgcmFuZG9tSGV4RGlnaXQgPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAxNikudG9TdHJpbmcoMTYpO1xuICAgICAgcmFuZG9tUGFkZGluZyArPSByYW5kb21IZXhEaWdpdDtcbiAgICB9XG4gICAgcmV0dXJuIGJhc2VJZCArIHJhbmRvbVBhZGRpbmc7XG4gIH1cbn1cblxuZXhwb3J0cy5JRCA9IElEO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3V0LmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aWQuanMubWFwIl0sIm5hbWVzIjpbIklEIiwiaGV4VGltZXN0YW1wIiwibm93IiwiRGF0ZSIsInNlYyIsIk1hdGgiLCJmbG9vciIsImdldFRpbWUiLCJtc2VjIiwiZ2V0TWlsbGlzZWNvbmRzIiwidG9TdHJpbmciLCJwYWRTdGFydCIsImN1c3RvbSIsImlkIiwidW5pcXVlIiwicGFkZGluZyIsImJhc2VJZCIsInJhbmRvbVBhZGRpbmciLCJpIiwicmFuZG9tSGV4RGlnaXQiLCJyYW5kb20iLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/id.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/node-appwrite/dist/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar client = __webpack_require__(/*! ./client */ \"(rsc)/./node_modules/node-appwrite/dist/client.js\");\nvar account = __webpack_require__(/*! ./services/account */ \"(rsc)/./node_modules/node-appwrite/dist/services/account.js\");\nvar avatars = __webpack_require__(/*! ./services/avatars */ \"(rsc)/./node_modules/node-appwrite/dist/services/avatars.js\");\nvar databases = __webpack_require__(/*! ./services/databases */ \"(rsc)/./node_modules/node-appwrite/dist/services/databases.js\");\nvar functions = __webpack_require__(/*! ./services/functions */ \"(rsc)/./node_modules/node-appwrite/dist/services/functions.js\");\nvar graphql = __webpack_require__(/*! ./services/graphql */ \"(rsc)/./node_modules/node-appwrite/dist/services/graphql.js\");\nvar health = __webpack_require__(/*! ./services/health */ \"(rsc)/./node_modules/node-appwrite/dist/services/health.js\");\nvar locale = __webpack_require__(/*! ./services/locale */ \"(rsc)/./node_modules/node-appwrite/dist/services/locale.js\");\nvar messaging = __webpack_require__(/*! ./services/messaging */ \"(rsc)/./node_modules/node-appwrite/dist/services/messaging.js\");\nvar storage = __webpack_require__(/*! ./services/storage */ \"(rsc)/./node_modules/node-appwrite/dist/services/storage.js\");\nvar teams = __webpack_require__(/*! ./services/teams */ \"(rsc)/./node_modules/node-appwrite/dist/services/teams.js\");\nvar users = __webpack_require__(/*! ./services/users */ \"(rsc)/./node_modules/node-appwrite/dist/services/users.js\");\nvar permission = __webpack_require__(/*! ./permission */ \"(rsc)/./node_modules/node-appwrite/dist/permission.js\");\nvar role = __webpack_require__(/*! ./role */ \"(rsc)/./node_modules/node-appwrite/dist/role.js\");\nvar id = __webpack_require__(/*! ./id */ \"(rsc)/./node_modules/node-appwrite/dist/id.js\");\nvar authenticatorType = __webpack_require__(/*! ./enums/authenticator-type */ \"(rsc)/./node_modules/node-appwrite/dist/enums/authenticator-type.js\");\nvar authenticationFactor = __webpack_require__(/*! ./enums/authentication-factor */ \"(rsc)/./node_modules/node-appwrite/dist/enums/authentication-factor.js\");\nvar oAuthProvider = __webpack_require__(/*! ./enums/o-auth-provider */ \"(rsc)/./node_modules/node-appwrite/dist/enums/o-auth-provider.js\");\nvar browser = __webpack_require__(/*! ./enums/browser */ \"(rsc)/./node_modules/node-appwrite/dist/enums/browser.js\");\nvar creditCard = __webpack_require__(/*! ./enums/credit-card */ \"(rsc)/./node_modules/node-appwrite/dist/enums/credit-card.js\");\nvar flag = __webpack_require__(/*! ./enums/flag */ \"(rsc)/./node_modules/node-appwrite/dist/enums/flag.js\");\nvar relationshipType = __webpack_require__(/*! ./enums/relationship-type */ \"(rsc)/./node_modules/node-appwrite/dist/enums/relationship-type.js\");\nvar relationMutate = __webpack_require__(/*! ./enums/relation-mutate */ \"(rsc)/./node_modules/node-appwrite/dist/enums/relation-mutate.js\");\nvar indexType = __webpack_require__(/*! ./enums/index-type */ \"(rsc)/./node_modules/node-appwrite/dist/enums/index-type.js\");\nvar runtime = __webpack_require__(/*! ./enums/runtime */ \"(rsc)/./node_modules/node-appwrite/dist/enums/runtime.js\");\nvar executionMethod = __webpack_require__(/*! ./enums/execution-method */ \"(rsc)/./node_modules/node-appwrite/dist/enums/execution-method.js\");\nvar name = __webpack_require__(/*! ./enums/name */ \"(rsc)/./node_modules/node-appwrite/dist/enums/name.js\");\nvar smtpEncryption = __webpack_require__(/*! ./enums/smtp-encryption */ \"(rsc)/./node_modules/node-appwrite/dist/enums/smtp-encryption.js\");\nvar compression = __webpack_require__(/*! ./enums/compression */ \"(rsc)/./node_modules/node-appwrite/dist/enums/compression.js\");\nvar imageGravity = __webpack_require__(/*! ./enums/image-gravity */ \"(rsc)/./node_modules/node-appwrite/dist/enums/image-gravity.js\");\nvar imageFormat = __webpack_require__(/*! ./enums/image-format */ \"(rsc)/./node_modules/node-appwrite/dist/enums/image-format.js\");\nvar passwordHash = __webpack_require__(/*! ./enums/password-hash */ \"(rsc)/./node_modules/node-appwrite/dist/enums/password-hash.js\");\nvar messagingProviderType = __webpack_require__(/*! ./enums/messaging-provider-type */ \"(rsc)/./node_modules/node-appwrite/dist/enums/messaging-provider-type.js\");\nObject.defineProperty(exports, \"AppwriteException\", ({\n    enumerable: true,\n    get: function() {\n        return client.AppwriteException;\n    }\n}));\nObject.defineProperty(exports, \"Client\", ({\n    enumerable: true,\n    get: function() {\n        return client.Client;\n    }\n}));\nObject.defineProperty(exports, \"Query\", ({\n    enumerable: true,\n    get: function() {\n        return client.Query;\n    }\n}));\nObject.defineProperty(exports, \"Account\", ({\n    enumerable: true,\n    get: function() {\n        return account.Account;\n    }\n}));\nObject.defineProperty(exports, \"Avatars\", ({\n    enumerable: true,\n    get: function() {\n        return avatars.Avatars;\n    }\n}));\nObject.defineProperty(exports, \"Databases\", ({\n    enumerable: true,\n    get: function() {\n        return databases.Databases;\n    }\n}));\nObject.defineProperty(exports, \"Functions\", ({\n    enumerable: true,\n    get: function() {\n        return functions.Functions;\n    }\n}));\nObject.defineProperty(exports, \"Graphql\", ({\n    enumerable: true,\n    get: function() {\n        return graphql.Graphql;\n    }\n}));\nObject.defineProperty(exports, \"Health\", ({\n    enumerable: true,\n    get: function() {\n        return health.Health;\n    }\n}));\nObject.defineProperty(exports, \"Locale\", ({\n    enumerable: true,\n    get: function() {\n        return locale.Locale;\n    }\n}));\nObject.defineProperty(exports, \"Messaging\", ({\n    enumerable: true,\n    get: function() {\n        return messaging.Messaging;\n    }\n}));\nObject.defineProperty(exports, \"Storage\", ({\n    enumerable: true,\n    get: function() {\n        return storage.Storage;\n    }\n}));\nObject.defineProperty(exports, \"Teams\", ({\n    enumerable: true,\n    get: function() {\n        return teams.Teams;\n    }\n}));\nObject.defineProperty(exports, \"Users\", ({\n    enumerable: true,\n    get: function() {\n        return users.Users;\n    }\n}));\nObject.defineProperty(exports, \"Permission\", ({\n    enumerable: true,\n    get: function() {\n        return permission.Permission;\n    }\n}));\nObject.defineProperty(exports, \"Role\", ({\n    enumerable: true,\n    get: function() {\n        return role.Role;\n    }\n}));\nObject.defineProperty(exports, \"ID\", ({\n    enumerable: true,\n    get: function() {\n        return id.ID;\n    }\n}));\nObject.defineProperty(exports, \"AuthenticatorType\", ({\n    enumerable: true,\n    get: function() {\n        return authenticatorType.AuthenticatorType;\n    }\n}));\nObject.defineProperty(exports, \"AuthenticationFactor\", ({\n    enumerable: true,\n    get: function() {\n        return authenticationFactor.AuthenticationFactor;\n    }\n}));\nObject.defineProperty(exports, \"OAuthProvider\", ({\n    enumerable: true,\n    get: function() {\n        return oAuthProvider.OAuthProvider;\n    }\n}));\nObject.defineProperty(exports, \"Browser\", ({\n    enumerable: true,\n    get: function() {\n        return browser.Browser;\n    }\n}));\nObject.defineProperty(exports, \"CreditCard\", ({\n    enumerable: true,\n    get: function() {\n        return creditCard.CreditCard;\n    }\n}));\nObject.defineProperty(exports, \"Flag\", ({\n    enumerable: true,\n    get: function() {\n        return flag.Flag;\n    }\n}));\nObject.defineProperty(exports, \"RelationshipType\", ({\n    enumerable: true,\n    get: function() {\n        return relationshipType.RelationshipType;\n    }\n}));\nObject.defineProperty(exports, \"RelationMutate\", ({\n    enumerable: true,\n    get: function() {\n        return relationMutate.RelationMutate;\n    }\n}));\nObject.defineProperty(exports, \"IndexType\", ({\n    enumerable: true,\n    get: function() {\n        return indexType.IndexType;\n    }\n}));\nObject.defineProperty(exports, \"Runtime\", ({\n    enumerable: true,\n    get: function() {\n        return runtime.Runtime;\n    }\n}));\nObject.defineProperty(exports, \"ExecutionMethod\", ({\n    enumerable: true,\n    get: function() {\n        return executionMethod.ExecutionMethod;\n    }\n}));\nObject.defineProperty(exports, \"Name\", ({\n    enumerable: true,\n    get: function() {\n        return name.Name;\n    }\n}));\nObject.defineProperty(exports, \"SmtpEncryption\", ({\n    enumerable: true,\n    get: function() {\n        return smtpEncryption.SmtpEncryption;\n    }\n}));\nObject.defineProperty(exports, \"Compression\", ({\n    enumerable: true,\n    get: function() {\n        return compression.Compression;\n    }\n}));\nObject.defineProperty(exports, \"ImageGravity\", ({\n    enumerable: true,\n    get: function() {\n        return imageGravity.ImageGravity;\n    }\n}));\nObject.defineProperty(exports, \"ImageFormat\", ({\n    enumerable: true,\n    get: function() {\n        return imageFormat.ImageFormat;\n    }\n}));\nObject.defineProperty(exports, \"PasswordHash\", ({\n    enumerable: true,\n    get: function() {\n        return passwordHash.PasswordHash;\n    }\n}));\nObject.defineProperty(exports, \"MessagingProviderType\", ({\n    enumerable: true,\n    get: function() {\n        return messagingProviderType.MessagingProviderType;\n    }\n})); //# sourceMappingURL=out.js.map\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/permission.js":
/*!*******************************************************!*\
  !*** ./node_modules/node-appwrite/dist/permission.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nclass Permission {\n}\n/**\n * Generate read permission string for the provided role.\n *\n * @param {string} role\n * @returns {string}\n */ Permission.read = (role)=>{\n    return `read(\"${role}\")`;\n};\n/**\n * Generate write permission string for the provided role.\n *\n * This is an alias of update, delete, and possibly create.\n * Don't use write in combination with update, delete, or create.\n *\n * @param {string} role\n * @returns {string}\n */ Permission.write = (role)=>{\n    return `write(\"${role}\")`;\n};\n/**\n * Generate create permission string for the provided role.\n *\n * @param {string} role\n * @returns {string}\n */ Permission.create = (role)=>{\n    return `create(\"${role}\")`;\n};\n/**\n * Generate update permission string for the provided role.\n *\n * @param {string} role\n * @returns {string}\n */ Permission.update = (role)=>{\n    return `update(\"${role}\")`;\n};\n/**\n * Generate delete permission string for the provided role.\n *\n * @param {string} role\n * @returns {string}\n */ Permission.delete = (role)=>{\n    return `delete(\"${role}\")`;\n};\nexports.Permission = Permission; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=permission.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L3Blcm1pc3Npb24uanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQTtBQUNOO0FBQ0E7Ozs7O0NBS0MsR0FDREEsV0FBV0MsSUFBSSxHQUFHLENBQUNDO0lBQ2pCLE9BQU8sQ0FBQyxNQUFNLEVBQUVBLEtBQUssRUFBRSxDQUFDO0FBQzFCO0FBQ0E7Ozs7Ozs7O0NBUUMsR0FDREYsV0FBV0csS0FBSyxHQUFHLENBQUNEO0lBQ2xCLE9BQU8sQ0FBQyxPQUFPLEVBQUVBLEtBQUssRUFBRSxDQUFDO0FBQzNCO0FBQ0E7Ozs7O0NBS0MsR0FDREYsV0FBV0ksTUFBTSxHQUFHLENBQUNGO0lBQ25CLE9BQU8sQ0FBQyxRQUFRLEVBQUVBLEtBQUssRUFBRSxDQUFDO0FBQzVCO0FBQ0E7Ozs7O0NBS0MsR0FDREYsV0FBV0ssTUFBTSxHQUFHLENBQUNIO0lBQ25CLE9BQU8sQ0FBQyxRQUFRLEVBQUVBLEtBQUssRUFBRSxDQUFDO0FBQzVCO0FBQ0E7Ozs7O0NBS0MsR0FDREYsV0FBV00sTUFBTSxHQUFHLENBQUNKO0lBQ25CLE9BQU8sQ0FBQyxRQUFRLEVBQUVBLEtBQUssRUFBRSxDQUFDO0FBQzVCO0FBRUFLLGtCQUFrQixHQUFHUCxZQUNyQiwrQkFBK0I7Q0FDL0Isc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmlkZW8tZWRpdG9yLWFwcC8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2Rpc3QvcGVybWlzc2lvbi5qcz84MDU2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY2xhc3MgUGVybWlzc2lvbiB7XG59XG4vKipcbiAqIEdlbmVyYXRlIHJlYWQgcGVybWlzc2lvbiBzdHJpbmcgZm9yIHRoZSBwcm92aWRlZCByb2xlLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByb2xlXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5QZXJtaXNzaW9uLnJlYWQgPSAocm9sZSkgPT4ge1xuICByZXR1cm4gYHJlYWQoXCIke3JvbGV9XCIpYDtcbn07XG4vKipcbiAqIEdlbmVyYXRlIHdyaXRlIHBlcm1pc3Npb24gc3RyaW5nIGZvciB0aGUgcHJvdmlkZWQgcm9sZS5cbiAqXG4gKiBUaGlzIGlzIGFuIGFsaWFzIG9mIHVwZGF0ZSwgZGVsZXRlLCBhbmQgcG9zc2libHkgY3JlYXRlLlxuICogRG9uJ3QgdXNlIHdyaXRlIGluIGNvbWJpbmF0aW9uIHdpdGggdXBkYXRlLCBkZWxldGUsIG9yIGNyZWF0ZS5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gcm9sZVxuICogQHJldHVybnMge3N0cmluZ31cbiAqL1xuUGVybWlzc2lvbi53cml0ZSA9IChyb2xlKSA9PiB7XG4gIHJldHVybiBgd3JpdGUoXCIke3JvbGV9XCIpYDtcbn07XG4vKipcbiAqIEdlbmVyYXRlIGNyZWF0ZSBwZXJtaXNzaW9uIHN0cmluZyBmb3IgdGhlIHByb3ZpZGVkIHJvbGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJvbGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cblBlcm1pc3Npb24uY3JlYXRlID0gKHJvbGUpID0+IHtcbiAgcmV0dXJuIGBjcmVhdGUoXCIke3JvbGV9XCIpYDtcbn07XG4vKipcbiAqIEdlbmVyYXRlIHVwZGF0ZSBwZXJtaXNzaW9uIHN0cmluZyBmb3IgdGhlIHByb3ZpZGVkIHJvbGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJvbGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cblBlcm1pc3Npb24udXBkYXRlID0gKHJvbGUpID0+IHtcbiAgcmV0dXJuIGB1cGRhdGUoXCIke3JvbGV9XCIpYDtcbn07XG4vKipcbiAqIEdlbmVyYXRlIGRlbGV0ZSBwZXJtaXNzaW9uIHN0cmluZyBmb3IgdGhlIHByb3ZpZGVkIHJvbGUuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHJvbGVcbiAqIEByZXR1cm5zIHtzdHJpbmd9XG4gKi9cblBlcm1pc3Npb24uZGVsZXRlID0gKHJvbGUpID0+IHtcbiAgcmV0dXJuIGBkZWxldGUoXCIke3JvbGV9XCIpYDtcbn07XG5cbmV4cG9ydHMuUGVybWlzc2lvbiA9IFBlcm1pc3Npb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vdXQuanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wZXJtaXNzaW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJQZXJtaXNzaW9uIiwicmVhZCIsInJvbGUiLCJ3cml0ZSIsImNyZWF0ZSIsInVwZGF0ZSIsImRlbGV0ZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/permission.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/query.js":
/*!**************************************************!*\
  !*** ./node_modules/node-appwrite/dist/query.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nconst _Query = class _Query {\n    /**\n   * Constructor for Query class.\n   *\n   * @param {string} method\n   * @param {AttributesTypes} attribute\n   * @param {QueryTypes} values\n   */ constructor(method, attribute, values){\n        this.method = method;\n        this.attribute = attribute;\n        if (values !== void 0) {\n            if (Array.isArray(values)) {\n                this.values = values;\n            } else {\n                this.values = [\n                    values\n                ];\n            }\n        }\n    }\n    /**\n   * Convert the query object to a JSON string.\n   *\n   * @returns {string}\n   */ toString() {\n        return JSON.stringify({\n            method: this.method,\n            attribute: this.attribute,\n            values: this.values\n        });\n    }\n};\n/**\n * Filter resources where attribute is equal to value.\n *\n * @param {string} attribute\n * @param {QueryTypes} value\n * @returns {string}\n */ _Query.equal = (attribute, value)=>new _Query(\"equal\", attribute, value).toString();\n/**\n * Filter resources where attribute is not equal to value.\n *\n * @param {string} attribute\n * @param {QueryTypes} value\n * @returns {string}\n */ _Query.notEqual = (attribute, value)=>new _Query(\"notEqual\", attribute, value).toString();\n/**\n * Filter resources where attribute is less than value.\n *\n * @param {string} attribute\n * @param {QueryTypes} value\n * @returns {string}\n */ _Query.lessThan = (attribute, value)=>new _Query(\"lessThan\", attribute, value).toString();\n/**\n * Filter resources where attribute is less than or equal to value.\n *\n * @param {string} attribute\n * @param {QueryTypes} value\n * @returns {string}\n */ _Query.lessThanEqual = (attribute, value)=>new _Query(\"lessThanEqual\", attribute, value).toString();\n/**\n * Filter resources where attribute is greater than value.\n *\n * @param {string} attribute\n * @param {QueryTypes} value\n * @returns {string}\n */ _Query.greaterThan = (attribute, value)=>new _Query(\"greaterThan\", attribute, value).toString();\n/**\n * Filter resources where attribute is greater than or equal to value.\n *\n * @param {string} attribute\n * @param {QueryTypes} value\n * @returns {string}\n */ _Query.greaterThanEqual = (attribute, value)=>new _Query(\"greaterThanEqual\", attribute, value).toString();\n/**\n * Filter resources where attribute is null.\n *\n * @param {string} attribute\n * @returns {string}\n */ _Query.isNull = (attribute)=>new _Query(\"isNull\", attribute).toString();\n/**\n * Filter resources where attribute is not null.\n *\n * @param {string} attribute\n * @returns {string}\n */ _Query.isNotNull = (attribute)=>new _Query(\"isNotNull\", attribute).toString();\n/**\n * Filter resources where attribute is between start and end (inclusive).\n *\n * @param {string} attribute\n * @param {string | number} start\n * @param {string | number} end\n * @returns {string}\n */ _Query.between = (attribute, start, end)=>new _Query(\"between\", attribute, [\n        start,\n        end\n    ]).toString();\n/**\n * Filter resources where attribute starts with value.\n *\n * @param {string} attribute\n * @param {string} value\n * @returns {string}\n */ _Query.startsWith = (attribute, value)=>new _Query(\"startsWith\", attribute, value).toString();\n/**\n * Filter resources where attribute ends with value.\n *\n * @param {string} attribute\n * @param {string} value\n * @returns {string}\n */ _Query.endsWith = (attribute, value)=>new _Query(\"endsWith\", attribute, value).toString();\n/**\n * Specify which attributes should be returned by the API call.\n *\n * @param {string[]} attributes\n * @returns {string}\n */ _Query.select = (attributes)=>new _Query(\"select\", void 0, attributes).toString();\n/**\n * Filter resources by searching attribute for value.\n * A fulltext index on attribute is required for this query to work.\n *\n * @param {string} attribute\n * @param {string} value\n * @returns {string}\n */ _Query.search = (attribute, value)=>new _Query(\"search\", attribute, value).toString();\n/**\n * Sort results by attribute descending.\n *\n * @param {string} attribute\n * @returns {string}\n */ _Query.orderDesc = (attribute)=>new _Query(\"orderDesc\", attribute).toString();\n/**\n * Sort results by attribute ascending.\n *\n * @param {string} attribute\n * @returns {string}\n */ _Query.orderAsc = (attribute)=>new _Query(\"orderAsc\", attribute).toString();\n/**\n * Return results after documentId.\n *\n * @param {string} documentId\n * @returns {string}\n */ _Query.cursorAfter = (documentId)=>new _Query(\"cursorAfter\", void 0, documentId).toString();\n/**\n * Return results before documentId.\n *\n * @param {string} documentId\n * @returns {string}\n */ _Query.cursorBefore = (documentId)=>new _Query(\"cursorBefore\", void 0, documentId).toString();\n/**\n * Return only limit results.\n *\n * @param {number} limit\n * @returns {string}\n */ _Query.limit = (limit)=>new _Query(\"limit\", void 0, limit).toString();\n/**\n * Filter resources by skipping the first offset results.\n *\n * @param {number} offset\n * @returns {string}\n */ _Query.offset = (offset)=>new _Query(\"offset\", void 0, offset).toString();\n/**\n * Filter resources where attribute contains the specified value.\n *\n * @param {string} attribute\n * @param {string | string[]} value\n * @returns {string}\n */ _Query.contains = (attribute, value)=>new _Query(\"contains\", attribute, value).toString();\n/**\n * Combine multiple queries using logical OR operator.\n *\n * @param {string[]} queries\n * @returns {string}\n */ _Query.or = (queries)=>new _Query(\"or\", void 0, queries.map((query)=>JSON.parse(query))).toString();\n/**\n * Combine multiple queries using logical AND operator.\n *\n * @param {string[]} queries\n * @returns {string}\n */ _Query.and = (queries)=>new _Query(\"and\", void 0, queries.map((query)=>JSON.parse(query))).toString();\nlet Query = _Query;\nexports.Query = Query; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=query.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/query.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/role.js":
/*!*************************************************!*\
  !*** ./node_modules/node-appwrite/dist/role.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nclass Role {\n    /**\n   * Grants access to anyone.\n   * \n   * This includes authenticated and unauthenticated users.\n   * \n   * @returns {string}\n   */ static any() {\n        return \"any\";\n    }\n    /**\n   * Grants access to a specific user by user ID.\n   * \n   * You can optionally pass verified or unverified for\n   * `status` to target specific types of users.\n   *\n   * @param {string} id \n   * @param {string} status \n   * @returns {string}\n   */ static user(id, status = \"\") {\n        if (status === \"\") {\n            return `user:${id}`;\n        }\n        return `user:${id}/${status}`;\n    }\n    /**\n   * Grants access to any authenticated or anonymous user.\n   * \n   * You can optionally pass verified or unverified for\n   * `status` to target specific types of users.\n   * \n   * @param {string} status \n   * @returns {string}\n   */ static users(status = \"\") {\n        if (status === \"\") {\n            return \"users\";\n        }\n        return `users/${status}`;\n    }\n    /**\n   * Grants access to any guest user without a session.\n   * \n   * Authenticated users don't have access to this role.\n   * \n   * @returns {string}\n   */ static guests() {\n        return \"guests\";\n    }\n    /**\n   * Grants access to a team by team ID.\n   * \n   * You can optionally pass a role for `role` to target\n   * team members with the specified role.\n   * \n   * @param {string} id \n   * @param {string} role \n   * @returns {string}\n   */ static team(id, role = \"\") {\n        if (role === \"\") {\n            return `team:${id}`;\n        }\n        return `team:${id}/${role}`;\n    }\n    /**\n   * Grants access to a specific member of a team.\n   * \n   * When the member is removed from the team, they will\n   * no longer have access.\n   * \n   * @param {string} id \n   * @returns {string}\n   */ static member(id) {\n        return `member:${id}`;\n    }\n    /**\n   * Grants access to a user with the specified label.\n   * \n   * @param {string} name \n   * @returns  {string}\n   */ static label(name) {\n        return `label:${name}`;\n    }\n}\nexports.Role = Role; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=role.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L3JvbGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQTtJQUNKOzs7Ozs7R0FNQyxHQUNELE9BQU9DLE1BQU07UUFDWCxPQUFPO0lBQ1Q7SUFDQTs7Ozs7Ozs7O0dBU0MsR0FDRCxPQUFPQyxLQUFLQyxFQUFFLEVBQUVDLFNBQVMsRUFBRSxFQUFFO1FBQzNCLElBQUlBLFdBQVcsSUFBSTtZQUNqQixPQUFPLENBQUMsS0FBSyxFQUFFRCxHQUFHLENBQUM7UUFDckI7UUFDQSxPQUFPLENBQUMsS0FBSyxFQUFFQSxHQUFHLENBQUMsRUFBRUMsT0FBTyxDQUFDO0lBQy9CO0lBQ0E7Ozs7Ozs7O0dBUUMsR0FDRCxPQUFPQyxNQUFNRCxTQUFTLEVBQUUsRUFBRTtRQUN4QixJQUFJQSxXQUFXLElBQUk7WUFDakIsT0FBTztRQUNUO1FBQ0EsT0FBTyxDQUFDLE1BQU0sRUFBRUEsT0FBTyxDQUFDO0lBQzFCO0lBQ0E7Ozs7OztHQU1DLEdBQ0QsT0FBT0UsU0FBUztRQUNkLE9BQU87SUFDVDtJQUNBOzs7Ozs7Ozs7R0FTQyxHQUNELE9BQU9DLEtBQUtKLEVBQUUsRUFBRUssT0FBTyxFQUFFLEVBQUU7UUFDekIsSUFBSUEsU0FBUyxJQUFJO1lBQ2YsT0FBTyxDQUFDLEtBQUssRUFBRUwsR0FBRyxDQUFDO1FBQ3JCO1FBQ0EsT0FBTyxDQUFDLEtBQUssRUFBRUEsR0FBRyxDQUFDLEVBQUVLLEtBQUssQ0FBQztJQUM3QjtJQUNBOzs7Ozs7OztHQVFDLEdBQ0QsT0FBT0MsT0FBT04sRUFBRSxFQUFFO1FBQ2hCLE9BQU8sQ0FBQyxPQUFPLEVBQUVBLEdBQUcsQ0FBQztJQUN2QjtJQUNBOzs7OztHQUtDLEdBQ0QsT0FBT08sTUFBTUMsSUFBSSxFQUFFO1FBQ2pCLE9BQU8sQ0FBQyxNQUFNLEVBQUVBLEtBQUssQ0FBQztJQUN4QjtBQUNGO0FBRUFDLFlBQVksR0FBR1osTUFDZiwrQkFBK0I7Q0FDL0IsZ0NBQWdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmlkZW8tZWRpdG9yLWFwcC8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2Rpc3Qvcm9sZS5qcz9lZGQ4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY2xhc3MgUm9sZSB7XG4gIC8qKlxuICAgKiBHcmFudHMgYWNjZXNzIHRvIGFueW9uZS5cbiAgICogXG4gICAqIFRoaXMgaW5jbHVkZXMgYXV0aGVudGljYXRlZCBhbmQgdW5hdXRoZW50aWNhdGVkIHVzZXJzLlxuICAgKiBcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyBhbnkoKSB7XG4gICAgcmV0dXJuIFwiYW55XCI7XG4gIH1cbiAgLyoqXG4gICAqIEdyYW50cyBhY2Nlc3MgdG8gYSBzcGVjaWZpYyB1c2VyIGJ5IHVzZXIgSUQuXG4gICAqIFxuICAgKiBZb3UgY2FuIG9wdGlvbmFsbHkgcGFzcyB2ZXJpZmllZCBvciB1bnZlcmlmaWVkIGZvclxuICAgKiBgc3RhdHVzYCB0byB0YXJnZXQgc3BlY2lmaWMgdHlwZXMgb2YgdXNlcnMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0YXR1cyBcbiAgICogQHJldHVybnMge3N0cmluZ31cbiAgICovXG4gIHN0YXRpYyB1c2VyKGlkLCBzdGF0dXMgPSBcIlwiKSB7XG4gICAgaWYgKHN0YXR1cyA9PT0gXCJcIikge1xuICAgICAgcmV0dXJuIGB1c2VyOiR7aWR9YDtcbiAgICB9XG4gICAgcmV0dXJuIGB1c2VyOiR7aWR9LyR7c3RhdHVzfWA7XG4gIH1cbiAgLyoqXG4gICAqIEdyYW50cyBhY2Nlc3MgdG8gYW55IGF1dGhlbnRpY2F0ZWQgb3IgYW5vbnltb3VzIHVzZXIuXG4gICAqIFxuICAgKiBZb3UgY2FuIG9wdGlvbmFsbHkgcGFzcyB2ZXJpZmllZCBvciB1bnZlcmlmaWVkIGZvclxuICAgKiBgc3RhdHVzYCB0byB0YXJnZXQgc3BlY2lmaWMgdHlwZXMgb2YgdXNlcnMuXG4gICAqIFxuICAgKiBAcGFyYW0ge3N0cmluZ30gc3RhdHVzIFxuICAgKiBAcmV0dXJucyB7c3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIHVzZXJzKHN0YXR1cyA9IFwiXCIpIHtcbiAgICBpZiAoc3RhdHVzID09PSBcIlwiKSB7XG4gICAgICByZXR1cm4gXCJ1c2Vyc1wiO1xuICAgIH1cbiAgICByZXR1cm4gYHVzZXJzLyR7c3RhdHVzfWA7XG4gIH1cbiAgLyoqXG4gICAqIEdyYW50cyBhY2Nlc3MgdG8gYW55IGd1ZXN0IHVzZXIgd2l0aG91dCBhIHNlc3Npb24uXG4gICAqIFxuICAgKiBBdXRoZW50aWNhdGVkIHVzZXJzIGRvbid0IGhhdmUgYWNjZXNzIHRvIHRoaXMgcm9sZS5cbiAgICogXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgZ3Vlc3RzKCkge1xuICAgIHJldHVybiBcImd1ZXN0c1wiO1xuICB9XG4gIC8qKlxuICAgKiBHcmFudHMgYWNjZXNzIHRvIGEgdGVhbSBieSB0ZWFtIElELlxuICAgKiBcbiAgICogWW91IGNhbiBvcHRpb25hbGx5IHBhc3MgYSByb2xlIGZvciBgcm9sZWAgdG8gdGFyZ2V0XG4gICAqIHRlYW0gbWVtYmVycyB3aXRoIHRoZSBzcGVjaWZpZWQgcm9sZS5cbiAgICogXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJvbGUgXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgdGVhbShpZCwgcm9sZSA9IFwiXCIpIHtcbiAgICBpZiAocm9sZSA9PT0gXCJcIikge1xuICAgICAgcmV0dXJuIGB0ZWFtOiR7aWR9YDtcbiAgICB9XG4gICAgcmV0dXJuIGB0ZWFtOiR7aWR9LyR7cm9sZX1gO1xuICB9XG4gIC8qKlxuICAgKiBHcmFudHMgYWNjZXNzIHRvIGEgc3BlY2lmaWMgbWVtYmVyIG9mIGEgdGVhbS5cbiAgICogXG4gICAqIFdoZW4gdGhlIG1lbWJlciBpcyByZW1vdmVkIGZyb20gdGhlIHRlYW0sIHRoZXkgd2lsbFxuICAgKiBubyBsb25nZXIgaGF2ZSBhY2Nlc3MuXG4gICAqIFxuICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgXG4gICAqIEByZXR1cm5zIHtzdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgbWVtYmVyKGlkKSB7XG4gICAgcmV0dXJuIGBtZW1iZXI6JHtpZH1gO1xuICB9XG4gIC8qKlxuICAgKiBHcmFudHMgYWNjZXNzIHRvIGEgdXNlciB3aXRoIHRoZSBzcGVjaWZpZWQgbGFiZWwuXG4gICAqIFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBcbiAgICogQHJldHVybnMgIHtzdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgbGFiZWwobmFtZSkge1xuICAgIHJldHVybiBgbGFiZWw6JHtuYW1lfWA7XG4gIH1cbn1cblxuZXhwb3J0cy5Sb2xlID0gUm9sZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW91dC5qcy5tYXBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJvbGUuanMubWFwIl0sIm5hbWVzIjpbIlJvbGUiLCJhbnkiLCJ1c2VyIiwiaWQiLCJzdGF0dXMiLCJ1c2VycyIsImd1ZXN0cyIsInRlYW0iLCJyb2xlIiwibWVtYmVyIiwibGFiZWwiLCJuYW1lIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/role.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/services/account.js":
/*!*************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/services/account.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar client = __webpack_require__(/*! ../client */ \"(rsc)/./node_modules/node-appwrite/dist/client.js\");\nclass Account {\n    constructor(client){\n        this.client = client;\n    }\n    /**\n   * Get account\n   *\n   * Get the currently logged in user.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */ async get() {\n        const apiPath = \"/account\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create account\n   *\n   * Use this endpoint to allow a new user to register a new account in your project. After the user registration completes successfully, you can use the [/account/verfication](https://appwrite.io/docs/references/cloud/client-web/account#createVerification) route to start verifying the user email address. To allow the new user to login to their new account, you need to create a new [account session](https://appwrite.io/docs/references/cloud/client-web/account#createEmailSession).\n   *\n   * @param {string} userId\n   * @param {string} email\n   * @param {string} password\n   * @param {string} name\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */ async create(userId, email, password, name) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"password\"');\n        }\n        const apiPath = \"/account\";\n        const payload = {};\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof email !== \"undefined\") {\n            payload[\"email\"] = email;\n        }\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n       * Update email\n       *\n       * Update currently logged in user account email address. After changing user address, the user confirmation status will get reset. A new confirmation email is not sent automatically however you can use the send confirmation email endpoint again to send the confirmation email. For security measures, user password is required to complete this request.\n  This endpoint can also be used to convert an anonymous account to a normal one, by passing an email address and a new password.\n  \n       *\n       * @param {string} email\n       * @param {string} password\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.User<Preferences>>}\n       */ async updateEmail(email, password) {\n        if (typeof email === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"password\"');\n        }\n        const apiPath = \"/account/email\";\n        const payload = {};\n        if (typeof email !== \"undefined\") {\n            payload[\"email\"] = email;\n        }\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * List Identities\n   *\n   * Get the list of identities for the currently logged in user.\n   *\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.IdentityList>}\n   */ async listIdentities(queries) {\n        const apiPath = \"/account/identities\";\n        const payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Delete identity\n   *\n   * Delete an identity by its unique ID.\n   *\n   * @param {string} identityId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async deleteIdentity(identityId) {\n        if (typeof identityId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"identityId\"');\n        }\n        const apiPath = \"/account/identities/{identityId}\".replace(\"{identityId}\", identityId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"delete\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create JWT\n   *\n   * Use this endpoint to create a JSON Web Token. You can use the resulting JWT to authenticate on behalf of the current user when working with the Appwrite server-side API and SDKs. The JWT secret is valid for 15 minutes from its creation and will be invalid if the user will logout in that time frame.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Jwt>}\n   */ async createJWT() {\n        const apiPath = \"/account/jwts\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * List logs\n   *\n   * Get the list of latest security activity logs for the currently logged in user. Each log returns user IP address, location and date and time of log.\n   *\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.LogList>}\n   */ async listLogs(queries) {\n        const apiPath = \"/account/logs\";\n        const payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update MFA\n   *\n   * Enable or disable MFA on an account.\n   *\n   * @param {boolean} mfa\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */ async updateMFA(mfa) {\n        if (typeof mfa === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"mfa\"');\n        }\n        const apiPath = \"/account/mfa\";\n        const payload = {};\n        if (typeof mfa !== \"undefined\") {\n            payload[\"mfa\"] = mfa;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create Authenticator\n   *\n   * Add an authenticator app to be used as an MFA factor. Verify the authenticator using the [verify authenticator](/docs/references/cloud/client-web/account#updateMfaAuthenticator) method.\n   *\n   * @param {AuthenticatorType} type\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.MfaType>}\n   */ async createMfaAuthenticator(type) {\n        if (typeof type === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"type\"');\n        }\n        const apiPath = \"/account/mfa/authenticators/{type}\".replace(\"{type}\", type);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Verify Authenticator\n   *\n   * Verify an authenticator app after adding it using the [add authenticator](/docs/references/cloud/client-web/account#createMfaAuthenticator) method.\n   *\n   * @param {AuthenticatorType} type\n   * @param {string} otp\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */ async updateMfaAuthenticator(type, otp) {\n        if (typeof type === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"type\"');\n        }\n        if (typeof otp === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"otp\"');\n        }\n        const apiPath = \"/account/mfa/authenticators/{type}\".replace(\"{type}\", type);\n        const payload = {};\n        if (typeof otp !== \"undefined\") {\n            payload[\"otp\"] = otp;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"put\", uri, apiHeaders, payload);\n    }\n    /**\n   * Delete Authenticator\n   *\n   * Delete an authenticator for a user by ID.\n   *\n   * @param {AuthenticatorType} type\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async deleteMfaAuthenticator(type) {\n        if (typeof type === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"type\"');\n        }\n        const apiPath = \"/account/mfa/authenticators/{type}\".replace(\"{type}\", type);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"delete\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create MFA Challenge\n   *\n   * Begin the process of MFA verification after sign-in. Finish the flow with [updateMfaChallenge](/docs/references/cloud/client-web/account#updateMfaChallenge) method.\n   *\n   * @param {AuthenticationFactor} factor\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.MfaChallenge>}\n   */ async createMfaChallenge(factor) {\n        if (typeof factor === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"factor\"');\n        }\n        const apiPath = \"/account/mfa/challenge\";\n        const payload = {};\n        if (typeof factor !== \"undefined\") {\n            payload[\"factor\"] = factor;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create MFA Challenge (confirmation)\n   *\n   * Complete the MFA challenge by providing the one-time password. Finish the process of MFA verification by providing the one-time password. To begin the flow, use [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method.\n   *\n   * @param {string} challengeId\n   * @param {string} otp\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async updateMfaChallenge(challengeId, otp) {\n        if (typeof challengeId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"challengeId\"');\n        }\n        if (typeof otp === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"otp\"');\n        }\n        const apiPath = \"/account/mfa/challenge\";\n        const payload = {};\n        if (typeof challengeId !== \"undefined\") {\n            payload[\"challengeId\"] = challengeId;\n        }\n        if (typeof otp !== \"undefined\") {\n            payload[\"otp\"] = otp;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"put\", uri, apiHeaders, payload);\n    }\n    /**\n   * List Factors\n   *\n   * List the factors available on the account to be used as a MFA challange.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.MfaFactors>}\n   */ async listMfaFactors() {\n        const apiPath = \"/account/mfa/factors\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get MFA Recovery Codes\n   *\n   * Get recovery codes that can be used as backup for MFA flow. Before getting codes, they must be generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method. An OTP challenge is required to read recovery codes.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.MfaRecoveryCodes>}\n   */ async getMfaRecoveryCodes() {\n        const apiPath = \"/account/mfa/recovery-codes\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create MFA Recovery Codes\n   *\n   * Generate recovery codes as backup for MFA flow. It&#039;s recommended to generate and show then immediately after user successfully adds their authehticator. Recovery codes can be used as a MFA verification type in [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.MfaRecoveryCodes>}\n   */ async createMfaRecoveryCodes() {\n        const apiPath = \"/account/mfa/recovery-codes\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Regenerate MFA Recovery Codes\n   *\n   * Regenerate recovery codes that can be used as backup for MFA flow. Before regenerating codes, they must be first generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method. An OTP challenge is required to regenreate recovery codes.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.MfaRecoveryCodes>}\n   */ async updateMfaRecoveryCodes() {\n        const apiPath = \"/account/mfa/recovery-codes\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update name\n   *\n   * Update currently logged in user account name.\n   *\n   * @param {string} name\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */ async updateName(name) {\n        if (typeof name === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = \"/account/name\";\n        const payload = {};\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update password\n   *\n   * Update currently logged in user password. For validation, user is required to pass in the new password, and the old password. For users created with OAuth, Team Invites and Magic URL, oldPassword is optional.\n   *\n   * @param {string} password\n   * @param {string} oldPassword\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */ async updatePassword(password, oldPassword) {\n        if (typeof password === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"password\"');\n        }\n        const apiPath = \"/account/password\";\n        const payload = {};\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        if (typeof oldPassword !== \"undefined\") {\n            payload[\"oldPassword\"] = oldPassword;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update phone\n   *\n   * Update the currently logged in user&#039;s phone number. After updating the phone number, the phone verification status will be reset. A confirmation SMS is not sent automatically, however you can use the [POST /account/verification/phone](https://appwrite.io/docs/references/cloud/client-web/account#createPhoneVerification) endpoint to send a confirmation SMS.\n   *\n   * @param {string} phone\n   * @param {string} password\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */ async updatePhone(phone, password) {\n        if (typeof phone === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"phone\"');\n        }\n        if (typeof password === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"password\"');\n        }\n        const apiPath = \"/account/phone\";\n        const payload = {};\n        if (typeof phone !== \"undefined\") {\n            payload[\"phone\"] = phone;\n        }\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get account preferences\n   *\n   * Get the preferences as a key-value object for the currently logged in user.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Preferences>}\n   */ async getPrefs() {\n        const apiPath = \"/account/prefs\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update preferences\n   *\n   * Update currently logged in user account preferences. The object you pass is stored as is, and replaces any previous value. The maximum allowed prefs size is 64kB and throws error if exceeded.\n   *\n   * @param {Partial<Preferences>} prefs\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */ async updatePrefs(prefs) {\n        if (typeof prefs === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"prefs\"');\n        }\n        const apiPath = \"/account/prefs\";\n        const payload = {};\n        if (typeof prefs !== \"undefined\") {\n            payload[\"prefs\"] = prefs;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create password recovery\n   *\n   * Sends the user an email with a temporary secret key for password reset. When the user clicks the confirmation link he is redirected back to your app password reset URL with the secret key and email address values attached to the URL query string. Use the query string params to submit a request to the [PUT /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#updateRecovery) endpoint to complete the process. The verification link sent to the user&#039;s email address is valid for 1 hour.\n   *\n   * @param {string} email\n   * @param {string} url\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Token>}\n   */ async createRecovery(email, url) {\n        if (typeof email === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof url === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"url\"');\n        }\n        const apiPath = \"/account/recovery\";\n        const payload = {};\n        if (typeof email !== \"undefined\") {\n            payload[\"email\"] = email;\n        }\n        if (typeof url !== \"undefined\") {\n            payload[\"url\"] = url;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n       * Create password recovery (confirmation)\n       *\n       * Use this endpoint to complete the user account password reset. Both the **userId** and **secret** arguments will be passed as query parameters to the redirect URL you have provided when sending your request to the [POST /account/recovery](https://appwrite.io/docs/references/cloud/client-web/account#createRecovery) endpoint.\n  \n  Please note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface.\n       *\n       * @param {string} userId\n       * @param {string} secret\n       * @param {string} password\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Token>}\n       */ async updateRecovery(userId, secret, password) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof secret === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"secret\"');\n        }\n        if (typeof password === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"password\"');\n        }\n        const apiPath = \"/account/recovery\";\n        const payload = {};\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof secret !== \"undefined\") {\n            payload[\"secret\"] = secret;\n        }\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"put\", uri, apiHeaders, payload);\n    }\n    /**\n   * List sessions\n   *\n   * Get the list of active sessions across different devices for the currently logged in user.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.SessionList>}\n   */ async listSessions() {\n        const apiPath = \"/account/sessions\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Delete sessions\n   *\n   * Delete all sessions from the user account and remove any sessions cookies from the end client.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async deleteSessions() {\n        const apiPath = \"/account/sessions\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"delete\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create anonymous session\n   *\n   * Use this endpoint to allow a new user to register an anonymous account in your project. This route will also create a new session for the user. To allow the new user to convert an anonymous account to a normal account, you need to update its [email and password](https://appwrite.io/docs/references/cloud/client-web/account#updateEmail) or create an [OAuth2 session](https://appwrite.io/docs/references/cloud/client-web/account#CreateOAuth2Session).\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Session>}\n   */ async createAnonymousSession() {\n        const apiPath = \"/account/sessions/anonymous\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n       * Create email password session\n       *\n       * Allow the user to login into their account by providing a valid email and password combination. This route will create a new session for the user.\n  \n  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).\n       *\n       * @param {string} email\n       * @param {string} password\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Session>}\n       */ async createEmailPasswordSession(email, password) {\n        if (typeof email === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"password\"');\n        }\n        const apiPath = \"/account/sessions/email\";\n        const payload = {};\n        if (typeof email !== \"undefined\") {\n            payload[\"email\"] = email;\n        }\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update magic URL session\n   *\n   * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.\n   *\n   * @param {string} userId\n   * @param {string} secret\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Session>}\n   */ async updateMagicURLSession(userId, secret) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof secret === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"secret\"');\n        }\n        const apiPath = \"/account/sessions/magic-url\";\n        const payload = {};\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof secret !== \"undefined\") {\n            payload[\"secret\"] = secret;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"put\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update phone session\n   *\n   * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.\n   *\n   * @param {string} userId\n   * @param {string} secret\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Session>}\n   */ async updatePhoneSession(userId, secret) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof secret === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"secret\"');\n        }\n        const apiPath = \"/account/sessions/phone\";\n        const payload = {};\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof secret !== \"undefined\") {\n            payload[\"secret\"] = secret;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"put\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create session\n   *\n   * Use this endpoint to create a session from token. Provide the **userId** and **secret** parameters from the successful response of authentication flows initiated by token creation. For example, magic URL and phone login.\n   *\n   * @param {string} userId\n   * @param {string} secret\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Session>}\n   */ async createSession(userId, secret) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof secret === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"secret\"');\n        }\n        const apiPath = \"/account/sessions/token\";\n        const payload = {};\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof secret !== \"undefined\") {\n            payload[\"secret\"] = secret;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get session\n   *\n   * Use this endpoint to get a logged in user&#039;s session using a Session ID. Inputting &#039;current&#039; will return the current session being used.\n   *\n   * @param {string} sessionId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Session>}\n   */ async getSession(sessionId) {\n        if (typeof sessionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n        const apiPath = \"/account/sessions/{sessionId}\".replace(\"{sessionId}\", sessionId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update session\n   *\n   * Use this endpoint to extend a session&#039;s length. Extending a session is useful when session expiry is short. If the session was created using an OAuth provider, this endpoint refreshes the access token from the provider.\n   *\n   * @param {string} sessionId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Session>}\n   */ async updateSession(sessionId) {\n        if (typeof sessionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n        const apiPath = \"/account/sessions/{sessionId}\".replace(\"{sessionId}\", sessionId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Delete session\n   *\n   * Logout the user. Use &#039;current&#039; as the session ID to logout on this device, use a session ID to logout on another device. If you&#039;re looking to logout the user on all devices, use [Delete Sessions](https://appwrite.io/docs/references/cloud/client-web/account#deleteSessions) instead.\n   *\n   * @param {string} sessionId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async deleteSession(sessionId) {\n        if (typeof sessionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n        const apiPath = \"/account/sessions/{sessionId}\".replace(\"{sessionId}\", sessionId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"delete\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update status\n   *\n   * Block the currently logged in user account. Behind the scene, the user record is not deleted but permanently blocked from any access. To completely delete a user, use the Users API instead.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */ async updateStatus() {\n        const apiPath = \"/account/status\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n       * Create email token (OTP)\n       *\n       * Sends the user an email with a secret key for creating a session. If the provided user ID has not be registered, a new user will be created. Use the returned user ID and secret and submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The secret sent to the user&#039;s email is valid for 15 minutes.\n  \n  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).\n       *\n       * @param {string} userId\n       * @param {string} email\n       * @param {boolean} phrase\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Token>}\n       */ async createEmailToken(userId, email, phrase) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"email\"');\n        }\n        const apiPath = \"/account/tokens/email\";\n        const payload = {};\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof email !== \"undefined\") {\n            payload[\"email\"] = email;\n        }\n        if (typeof phrase !== \"undefined\") {\n            payload[\"phrase\"] = phrase;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n       * Create magic URL token\n       *\n       * Sends the user an email with a secret key for creating a session. If the provided user ID has not been registered, a new user will be created. When the user clicks the link in the email, the user is redirected back to the URL you provided with the secret key and userId values attached to the URL query string. Use the query string parameters to submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The link sent to the user&#039;s email address is valid for 1 hour. If you are on a mobile device you can leave the URL parameter empty, so that the login completion will be handled by your Appwrite instance by default.\n  \n  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).\n  \n       *\n       * @param {string} userId\n       * @param {string} email\n       * @param {string} url\n       * @param {boolean} phrase\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Token>}\n       */ async createMagicURLToken(userId, email, url, phrase) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"email\"');\n        }\n        const apiPath = \"/account/tokens/magic-url\";\n        const payload = {};\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof email !== \"undefined\") {\n            payload[\"email\"] = email;\n        }\n        if (typeof url !== \"undefined\") {\n            payload[\"url\"] = url;\n        }\n        if (typeof phrase !== \"undefined\") {\n            payload[\"phrase\"] = phrase;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n       * Create OAuth2 token\n       *\n       * Allow the user to login to their account using the OAuth2 provider of their choice. Each OAuth2 provider should be enabled from the Appwrite console first. Use the success and failure arguments to provide a redirect URL&#039;s back to your app when login is completed. \n  \n  If authentication succeeds, `userId` and `secret` of a token will be appended to the success URL as query parameters. These can be used to create a new session using the [Create session](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint.\n  \n  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).\n       *\n       * @param {OAuthProvider} provider\n       * @param {string} success\n       * @param {string} failure\n       * @param {string[]} scopes\n       * @throws {AppwriteException}\n       * @returns {Promise<string>}\n       */ async createOAuth2Token(provider, success, failure, scopes) {\n        if (typeof provider === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"provider\"');\n        }\n        const apiPath = \"/account/tokens/oauth2/{provider}\".replace(\"{provider}\", provider);\n        const payload = {};\n        if (typeof success !== \"undefined\") {\n            payload[\"success\"] = success;\n        }\n        if (typeof failure !== \"undefined\") {\n            payload[\"failure\"] = failure;\n        }\n        if (typeof scopes !== \"undefined\") {\n            payload[\"scopes\"] = scopes;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.redirect(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n       * Create phone token\n       *\n       * Sends the user an SMS with a secret key for creating a session. If the provided user ID has not be registered, a new user will be created. Use the returned user ID and secret and submit a request to the [POST /v1/account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process. The secret sent to the user&#039;s phone is valid for 15 minutes.\n  \n  A user is limited to 10 active sessions at a time by default. [Learn more about session limits](https://appwrite.io/docs/authentication-security#limits).\n       *\n       * @param {string} userId\n       * @param {string} phone\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Token>}\n       */ async createPhoneToken(userId, phone) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof phone === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"phone\"');\n        }\n        const apiPath = \"/account/tokens/phone\";\n        const payload = {};\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof phone !== \"undefined\") {\n            payload[\"phone\"] = phone;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n       * Create email verification\n       *\n       * Use this endpoint to send a verification message to your user email address to confirm they are the valid owners of that address. Both the **userId** and **secret** arguments will be passed as query parameters to the URL you have provided to be attached to the verification email. The provided URL should redirect the user back to your app and allow you to complete the verification process by verifying both the **userId** and **secret** parameters. Learn more about how to [complete the verification process](https://appwrite.io/docs/references/cloud/client-web/account#updateVerification). The verification link sent to the user&#039;s email address is valid for 7 days.\n  \n  Please note that in order to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md), the only valid redirect URLs are the ones from domains you have set when adding your platforms in the console interface.\n  \n       *\n       * @param {string} url\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Token>}\n       */ async createVerification(url) {\n        if (typeof url === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"url\"');\n        }\n        const apiPath = \"/account/verification\";\n        const payload = {};\n        if (typeof url !== \"undefined\") {\n            payload[\"url\"] = url;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create email verification (confirmation)\n   *\n   * Use this endpoint to complete the user email verification process. Use both the **userId** and **secret** parameters that were attached to your app URL to verify the user email ownership. If confirmed this route will return a 200 status code.\n   *\n   * @param {string} userId\n   * @param {string} secret\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Token>}\n   */ async updateVerification(userId, secret) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof secret === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"secret\"');\n        }\n        const apiPath = \"/account/verification\";\n        const payload = {};\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof secret !== \"undefined\") {\n            payload[\"secret\"] = secret;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"put\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create phone verification\n   *\n   * Use this endpoint to send a verification SMS to the currently logged in user. This endpoint is meant for use after updating a user&#039;s phone number using the [accountUpdatePhone](https://appwrite.io/docs/references/cloud/client-web/account#updatePhone) endpoint. Learn more about how to [complete the verification process](https://appwrite.io/docs/references/cloud/client-web/account#updatePhoneVerification). The verification code sent to the user&#039;s phone number is valid for 15 minutes.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Token>}\n   */ async createPhoneVerification() {\n        const apiPath = \"/account/verification/phone\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update phone verification (confirmation)\n   *\n   * Use this endpoint to complete the user phone verification process. Use the **userId** and **secret** that were sent to your user&#039;s phone number to verify the user email ownership. If confirmed this route will return a 200 status code.\n   *\n   * @param {string} userId\n   * @param {string} secret\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Token>}\n   */ async updatePhoneVerification(userId, secret) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof secret === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"secret\"');\n        }\n        const apiPath = \"/account/verification/phone\";\n        const payload = {};\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof secret !== \"undefined\") {\n            payload[\"secret\"] = secret;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"put\", uri, apiHeaders, payload);\n    }\n}\nexports.Account = Account; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=account.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/services/account.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/services/avatars.js":
/*!*************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/services/avatars.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar client = __webpack_require__(/*! ../client */ \"(rsc)/./node_modules/node-appwrite/dist/client.js\");\nclass Avatars {\n    constructor(client){\n        this.client = client;\n    }\n    /**\n       * Get browser icon\n       *\n       * You can use this endpoint to show different browser icons to your users. The code argument receives the browser code as it appears in your user [GET /account/sessions](https://appwrite.io/docs/references/cloud/client-web/account#getSessions) endpoint. Use width, height and quality arguments to change the output settings.\n  \n  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px.\n       *\n       * @param {Browser} code\n       * @param {number} width\n       * @param {number} height\n       * @param {number} quality\n       * @throws {AppwriteException}\n       * @returns {Promise<ArrayBuffer>}\n       */ async getBrowser(code, width, height, quality) {\n        if (typeof code === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"code\"');\n        }\n        const apiPath = \"/avatars/browsers/{code}\".replace(\"{code}\", code);\n        const payload = {};\n        if (typeof width !== \"undefined\") {\n            payload[\"width\"] = width;\n        }\n        if (typeof height !== \"undefined\") {\n            payload[\"height\"] = height;\n        }\n        if (typeof quality !== \"undefined\") {\n            payload[\"quality\"] = quality;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload, \"arrayBuffer\");\n    }\n    /**\n       * Get credit card icon\n       *\n       * The credit card endpoint will return you the icon of the credit card provider you need. Use width, height and quality arguments to change the output settings.\n  \n  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px.\n  \n       *\n       * @param {CreditCard} code\n       * @param {number} width\n       * @param {number} height\n       * @param {number} quality\n       * @throws {AppwriteException}\n       * @returns {Promise<ArrayBuffer>}\n       */ async getCreditCard(code, width, height, quality) {\n        if (typeof code === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"code\"');\n        }\n        const apiPath = \"/avatars/credit-cards/{code}\".replace(\"{code}\", code);\n        const payload = {};\n        if (typeof width !== \"undefined\") {\n            payload[\"width\"] = width;\n        }\n        if (typeof height !== \"undefined\") {\n            payload[\"height\"] = height;\n        }\n        if (typeof quality !== \"undefined\") {\n            payload[\"quality\"] = quality;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload, \"arrayBuffer\");\n    }\n    /**\n       * Get favicon\n       *\n       * Use this endpoint to fetch the favorite icon (AKA favicon) of any remote website URL.\n  \n  This endpoint does not follow HTTP redirects.\n       *\n       * @param {string} url\n       * @throws {AppwriteException}\n       * @returns {Promise<ArrayBuffer>}\n       */ async getFavicon(url) {\n        if (typeof url === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"url\"');\n        }\n        const apiPath = \"/avatars/favicon\";\n        const payload = {};\n        if (typeof url !== \"undefined\") {\n            payload[\"url\"] = url;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload, \"arrayBuffer\");\n    }\n    /**\n       * Get country flag\n       *\n       * You can use this endpoint to show different country flags icons to your users. The code argument receives the 2 letter country code. Use width, height and quality arguments to change the output settings. Country codes follow the [ISO 3166-1](https://en.wikipedia.org/wiki/ISO_3166-1) standard.\n  \n  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px.\n  \n       *\n       * @param {Flag} code\n       * @param {number} width\n       * @param {number} height\n       * @param {number} quality\n       * @throws {AppwriteException}\n       * @returns {Promise<ArrayBuffer>}\n       */ async getFlag(code, width, height, quality) {\n        if (typeof code === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"code\"');\n        }\n        const apiPath = \"/avatars/flags/{code}\".replace(\"{code}\", code);\n        const payload = {};\n        if (typeof width !== \"undefined\") {\n            payload[\"width\"] = width;\n        }\n        if (typeof height !== \"undefined\") {\n            payload[\"height\"] = height;\n        }\n        if (typeof quality !== \"undefined\") {\n            payload[\"quality\"] = quality;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload, \"arrayBuffer\");\n    }\n    /**\n       * Get image from URL\n       *\n       * Use this endpoint to fetch a remote image URL and crop it to any image size you want. This endpoint is very useful if you need to crop and display remote images in your app or in case you want to make sure a 3rd party image is properly served using a TLS protocol.\n  \n  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 400x400px.\n  \n  This endpoint does not follow HTTP redirects.\n       *\n       * @param {string} url\n       * @param {number} width\n       * @param {number} height\n       * @throws {AppwriteException}\n       * @returns {Promise<ArrayBuffer>}\n       */ async getImage(url, width, height) {\n        if (typeof url === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"url\"');\n        }\n        const apiPath = \"/avatars/image\";\n        const payload = {};\n        if (typeof url !== \"undefined\") {\n            payload[\"url\"] = url;\n        }\n        if (typeof width !== \"undefined\") {\n            payload[\"width\"] = width;\n        }\n        if (typeof height !== \"undefined\") {\n            payload[\"height\"] = height;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload, \"arrayBuffer\");\n    }\n    /**\n       * Get user initials\n       *\n       * Use this endpoint to show your user initials avatar icon on your website or app. By default, this route will try to print your logged-in user name or email initials. You can also overwrite the user name if you pass the &#039;name&#039; parameter. If no name is given and no user is logged, an empty avatar will be returned.\n  \n  You can use the color and background params to change the avatar colors. By default, a random theme will be selected. The random theme will persist for the user&#039;s initials when reloading the same theme will always return for the same initials.\n  \n  When one dimension is specified and the other is 0, the image is scaled with preserved aspect ratio. If both dimensions are 0, the API provides an image at source quality. If dimensions are not specified, the default size of image returned is 100x100px.\n  \n       *\n       * @param {string} name\n       * @param {number} width\n       * @param {number} height\n       * @param {string} background\n       * @throws {AppwriteException}\n       * @returns {Promise<ArrayBuffer>}\n       */ async getInitials(name, width, height, background) {\n        const apiPath = \"/avatars/initials\";\n        const payload = {};\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof width !== \"undefined\") {\n            payload[\"width\"] = width;\n        }\n        if (typeof height !== \"undefined\") {\n            payload[\"height\"] = height;\n        }\n        if (typeof background !== \"undefined\") {\n            payload[\"background\"] = background;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload, \"arrayBuffer\");\n    }\n    /**\n       * Get QR code\n       *\n       * Converts a given plain text to a QR code image. You can use the query parameters to change the size and style of the resulting image.\n  \n       *\n       * @param {string} text\n       * @param {number} size\n       * @param {number} margin\n       * @param {boolean} download\n       * @throws {AppwriteException}\n       * @returns {Promise<ArrayBuffer>}\n       */ async getQR(text, size, margin, download) {\n        if (typeof text === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"text\"');\n        }\n        const apiPath = \"/avatars/qr\";\n        const payload = {};\n        if (typeof text !== \"undefined\") {\n            payload[\"text\"] = text;\n        }\n        if (typeof size !== \"undefined\") {\n            payload[\"size\"] = size;\n        }\n        if (typeof margin !== \"undefined\") {\n            payload[\"margin\"] = margin;\n        }\n        if (typeof download !== \"undefined\") {\n            payload[\"download\"] = download;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload, \"arrayBuffer\");\n    }\n}\nexports.Avatars = Avatars; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=avatars.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L3NlcnZpY2VzL2F2YXRhcnMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUVyQixNQUFNQztJQUNKQyxZQUFZSCxNQUFNLENBQUU7UUFDbEIsSUFBSSxDQUFDQSxNQUFNLEdBQUdBO0lBQ2hCO0lBQ0E7Ozs7Ozs7Ozs7Ozs7T0FhSyxHQUNMLE1BQU1JLFdBQVdDLElBQUksRUFBRUMsS0FBSyxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUM3QyxJQUFJLE9BQU9ILFNBQVMsYUFBYTtZQUMvQixNQUFNLElBQUlMLE9BQU9TLGlCQUFpQixDQUFDO1FBQ3JDO1FBQ0EsTUFBTUMsVUFBVSwyQkFBMkJDLE9BQU8sQ0FBQyxVQUFVTjtRQUM3RCxNQUFNTyxVQUFVLENBQUM7UUFDakIsSUFBSSxPQUFPTixVQUFVLGFBQWE7WUFDaENNLE9BQU8sQ0FBQyxRQUFRLEdBQUdOO1FBQ3JCO1FBQ0EsSUFBSSxPQUFPQyxXQUFXLGFBQWE7WUFDakNLLE9BQU8sQ0FBQyxTQUFTLEdBQUdMO1FBQ3RCO1FBQ0EsSUFBSSxPQUFPQyxZQUFZLGFBQWE7WUFDbENJLE9BQU8sQ0FBQyxVQUFVLEdBQUdKO1FBQ3ZCO1FBQ0EsTUFBTUssTUFBTSxJQUFJQyxJQUFJLElBQUksQ0FBQ2QsTUFBTSxDQUFDZSxNQUFNLENBQUNDLFFBQVEsR0FBR047UUFDbEQsTUFBTU8sYUFBYTtZQUNqQixnQkFBZ0I7UUFDbEI7UUFDQSxPQUFPLE1BQU0sSUFBSSxDQUFDakIsTUFBTSxDQUFDa0IsSUFBSSxDQUMzQixPQUNBTCxLQUNBSSxZQUNBTCxTQUNBO0lBRUo7SUFDQTs7Ozs7Ozs7Ozs7Ozs7T0FjSyxHQUNMLE1BQU1PLGNBQWNkLElBQUksRUFBRUMsS0FBSyxFQUFFQyxNQUFNLEVBQUVDLE9BQU8sRUFBRTtRQUNoRCxJQUFJLE9BQU9ILFNBQVMsYUFBYTtZQUMvQixNQUFNLElBQUlM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QUNoQixNQUFNRSxVQUFVLENBQUM7UUFDakIsSUFBSSxPQUFPZ0IsU0FBUyxhQUFhO1lBQy9CaEIsT0FBTyxDQUFDLE9BQU8sR0FBR2dCO1FBQ3BCO1FBQ0EsSUFBSSxPQUFPQyxTQUFTLGFBQWE7WUFDL0JqQixPQUFPLENBQUMsT0FBTyxHQUFHaUI7UUFDcEI7UUFDQSxJQUFJLE9BQU9DLFdBQVcsYUFBYTtZQUNqQ2xCLE9BQU8sQ0FBQyxTQUFTLEdBQUdrQjtRQUN0QjtRQUNBLElBQUksT0FBT0MsYUFBYSxhQUFhO1lBQ25DbkIsT0FBTyxDQUFDLFdBQVcsR0FBR21CO1FBQ3hCO1FBQ0EsTUFBTWxCLE1BQU0sSUFBSUMsSUFBSSxJQUFJLENBQUNkLE1BQU0sQ0FBQ2UsTUFBTSxDQUFDQyxRQUFRLEdBQUdOO1FBQ2xELE1BQU1PLGFBQWE7WUFDakIsZ0JBQWdCO1FBQ2xCO1FBQ0EsT0FBTyxNQUFNLElBQUksQ0FBQ2pCLE1BQU0sQ0FBQ2tCLElBQUksQ0FDM0IsT0FDQUwsS0FDQUksWUFDQUwsU0FDQTtJQUVKO0FBQ0Y7QUFFQW9CLGVBQWUsR0FBRzlCLFNBQ2xCLCtCQUErQjtDQUMvQixtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly92aWRlby1lZGl0b3ItYXBwLy4vbm9kZV9tb2R1bGVzL25vZGUtYXBwd3JpdGUvZGlzdC9zZXJ2aWNlcy9hdmF0YXJzLmpzPzg2N2EiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY2xpZW50ID0gcmVxdWlyZSgnLi4vY2xpZW50Jyk7XG5cbmNsYXNzIEF2YXRhcnMge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgfVxuICAvKipcbiAgICAgICAqIEdldCBicm93c2VyIGljb25cbiAgICAgICAqXG4gICAgICAgKiBZb3UgY2FuIHVzZSB0aGlzIGVuZHBvaW50IHRvIHNob3cgZGlmZmVyZW50IGJyb3dzZXIgaWNvbnMgdG8geW91ciB1c2Vycy4gVGhlIGNvZGUgYXJndW1lbnQgcmVjZWl2ZXMgdGhlIGJyb3dzZXIgY29kZSBhcyBpdCBhcHBlYXJzIGluIHlvdXIgdXNlciBbR0VUIC9hY2NvdW50L3Nlc3Npb25zXShodHRwczovL2FwcHdyaXRlLmlvL2RvY3MvcmVmZXJlbmNlcy9jbG91ZC9jbGllbnQtd2ViL2FjY291bnQjZ2V0U2Vzc2lvbnMpIGVuZHBvaW50LiBVc2Ugd2lkdGgsIGhlaWdodCBhbmQgcXVhbGl0eSBhcmd1bWVudHMgdG8gY2hhbmdlIHRoZSBvdXRwdXQgc2V0dGluZ3MuXG4gIFxuICBXaGVuIG9uZSBkaW1lbnNpb24gaXMgc3BlY2lmaWVkIGFuZCB0aGUgb3RoZXIgaXMgMCwgdGhlIGltYWdlIGlzIHNjYWxlZCB3aXRoIHByZXNlcnZlZCBhc3BlY3QgcmF0aW8uIElmIGJvdGggZGltZW5zaW9ucyBhcmUgMCwgdGhlIEFQSSBwcm92aWRlcyBhbiBpbWFnZSBhdCBzb3VyY2UgcXVhbGl0eS4gSWYgZGltZW5zaW9ucyBhcmUgbm90IHNwZWNpZmllZCwgdGhlIGRlZmF1bHQgc2l6ZSBvZiBpbWFnZSByZXR1cm5lZCBpcyAxMDB4MTAwcHguXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtCcm93c2VyfSBjb2RlXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBxdWFsaXR5XG4gICAgICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5QnVmZmVyPn1cbiAgICAgICAqL1xuICBhc3luYyBnZXRCcm93c2VyKGNvZGUsIHdpZHRoLCBoZWlnaHQsIHF1YWxpdHkpIHtcbiAgICBpZiAodHlwZW9mIGNvZGUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImNvZGVcIicpO1xuICAgIH1cbiAgICBjb25zdCBhcGlQYXRoID0gXCIvYXZhdGFycy9icm93c2Vycy97Y29kZX1cIi5yZXBsYWNlKFwie2NvZGV9XCIsIGNvZGUpO1xuICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICBpZiAodHlwZW9mIHdpZHRoICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wid2lkdGhcIl0gPSB3aWR0aDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBoZWlnaHQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJoZWlnaHRcIl0gPSBoZWlnaHQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcXVhbGl0eSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcInF1YWxpdHlcIl0gPSBxdWFsaXR5O1xuICAgIH1cbiAgICBjb25zdCB1cmkgPSBuZXcgVVJMKHRoaXMuY2xpZW50LmNvbmZpZy5lbmRwb2ludCArIGFwaVBhdGgpO1xuICAgIGNvbnN0IGFwaUhlYWRlcnMgPSB7XG4gICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuY2xpZW50LmNhbGwoXG4gICAgICBcImdldFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWQsXG4gICAgICBcImFycmF5QnVmZmVyXCJcbiAgICApO1xuICB9XG4gIC8qKlxuICAgICAgICogR2V0IGNyZWRpdCBjYXJkIGljb25cbiAgICAgICAqXG4gICAgICAgKiBUaGUgY3JlZGl0IGNhcmQgZW5kcG9pbnQgd2lsbCByZXR1cm4geW91IHRoZSBpY29uIG9mIHRoZSBjcmVkaXQgY2FyZCBwcm92aWRlciB5b3UgbmVlZC4gVXNlIHdpZHRoLCBoZWlnaHQgYW5kIHF1YWxpdHkgYXJndW1lbnRzIHRvIGNoYW5nZSB0aGUgb3V0cHV0IHNldHRpbmdzLlxuICBcbiAgV2hlbiBvbmUgZGltZW5zaW9uIGlzIHNwZWNpZmllZCBhbmQgdGhlIG90aGVyIGlzIDAsIHRoZSBpbWFnZSBpcyBzY2FsZWQgd2l0aCBwcmVzZXJ2ZWQgYXNwZWN0IHJhdGlvLiBJZiBib3RoIGRpbWVuc2lvbnMgYXJlIDAsIHRoZSBBUEkgcHJvdmlkZXMgYW4gaW1hZ2UgYXQgc291cmNlIHF1YWxpdHkuIElmIGRpbWVuc2lvbnMgYXJlIG5vdCBzcGVjaWZpZWQsIHRoZSBkZWZhdWx0IHNpemUgb2YgaW1hZ2UgcmV0dXJuZWQgaXMgMTAweDEwMHB4LlxuICBcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge0NyZWRpdENhcmR9IGNvZGVcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHF1YWxpdHlcbiAgICAgICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgICAgICogQHJldHVybnMge1Byb21pc2U8QXJyYXlCdWZmZXI+fVxuICAgICAgICovXG4gIGFzeW5jIGdldENyZWRpdENhcmQoY29kZSwgd2lkdGgsIGhlaWdodCwgcXVhbGl0eSkge1xuICAgIGlmICh0eXBlb2YgY29kZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiY29kZVwiJyk7XG4gICAgfVxuICAgIGNvbnN0IGFwaVBhdGggPSBcIi9hdmF0YXJzL2NyZWRpdC1jYXJkcy97Y29kZX1cIi5yZXBsYWNlKFwie2NvZGV9XCIsIGNvZGUpO1xuICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICBpZiAodHlwZW9mIHdpZHRoICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wid2lkdGhcIl0gPSB3aWR0aDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBoZWlnaHQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJoZWlnaHRcIl0gPSBoZWlnaHQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcXVhbGl0eSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcInF1YWxpdHlcIl0gPSBxdWFsaXR5O1xuICAgIH1cbiAgICBjb25zdCB1cmkgPSBuZXcgVVJMKHRoaXMuY2xpZW50LmNvbmZpZy5lbmRwb2ludCArIGFwaVBhdGgpO1xuICAgIGNvbnN0IGFwaUhlYWRlcnMgPSB7XG4gICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuY2xpZW50LmNhbGwoXG4gICAgICBcImdldFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWQsXG4gICAgICBcImFycmF5QnVmZmVyXCJcbiAgICApO1xuICB9XG4gIC8qKlxuICAgICAgICogR2V0IGZhdmljb25cbiAgICAgICAqXG4gICAgICAgKiBVc2UgdGhpcyBlbmRwb2ludCB0byBmZXRjaCB0aGUgZmF2b3JpdGUgaWNvbiAoQUtBIGZhdmljb24pIG9mIGFueSByZW1vdGUgd2Vic2l0ZSBVUkwuXG4gIFxuICBUaGlzIGVuZHBvaW50IGRvZXMgbm90IGZvbGxvdyBIVFRQIHJlZGlyZWN0cy5cbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdXJsXG4gICAgICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5QnVmZmVyPn1cbiAgICAgICAqL1xuICBhc3luYyBnZXRGYXZpY29uKHVybCkge1xuICAgIGlmICh0eXBlb2YgdXJsID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJ1cmxcIicpO1xuICAgIH1cbiAgICBjb25zdCBhcGlQYXRoID0gXCIvYXZhdGFycy9mYXZpY29uXCI7XG4gICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgIGlmICh0eXBlb2YgdXJsICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1widXJsXCJdID0gdXJsO1xuICAgIH1cbiAgICBjb25zdCB1cmkgPSBuZXcgVVJMKHRoaXMuY2xpZW50LmNvbmZpZy5lbmRwb2ludCArIGFwaVBhdGgpO1xuICAgIGNvbnN0IGFwaUhlYWRlcnMgPSB7XG4gICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuY2xpZW50LmNhbGwoXG4gICAgICBcImdldFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWQsXG4gICAgICBcImFycmF5QnVmZmVyXCJcbiAgICApO1xuICB9XG4gIC8qKlxuICAgICAgICogR2V0IGNvdW50cnkgZmxhZ1xuICAgICAgICpcbiAgICAgICAqIFlvdSBjYW4gdXNlIHRoaXMgZW5kcG9pbnQgdG8gc2hvdyBkaWZmZXJlbnQgY291bnRyeSBmbGFncyBpY29ucyB0byB5b3VyIHVzZXJzLiBUaGUgY29kZSBhcmd1bWVudCByZWNlaXZlcyB0aGUgMiBsZXR0ZXIgY291bnRyeSBjb2RlLiBVc2Ugd2lkdGgsIGhlaWdodCBhbmQgcXVhbGl0eSBhcmd1bWVudHMgdG8gY2hhbmdlIHRoZSBvdXRwdXQgc2V0dGluZ3MuIENvdW50cnkgY29kZXMgZm9sbG93IHRoZSBbSVNPIDMxNjYtMV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzMxNjYtMSkgc3RhbmRhcmQuXG4gIFxuICBXaGVuIG9uZSBkaW1lbnNpb24gaXMgc3BlY2lmaWVkIGFuZCB0aGUgb3RoZXIgaXMgMCwgdGhlIGltYWdlIGlzIHNjYWxlZCB3aXRoIHByZXNlcnZlZCBhc3BlY3QgcmF0aW8uIElmIGJvdGggZGltZW5zaW9ucyBhcmUgMCwgdGhlIEFQSSBwcm92aWRlcyBhbiBpbWFnZSBhdCBzb3VyY2UgcXVhbGl0eS4gSWYgZGltZW5zaW9ucyBhcmUgbm90IHNwZWNpZmllZCwgdGhlIGRlZmF1bHQgc2l6ZSBvZiBpbWFnZSByZXR1cm5lZCBpcyAxMDB4MTAwcHguXG4gIFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7RmxhZ30gY29kZVxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gcXVhbGl0eVxuICAgICAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxBcnJheUJ1ZmZlcj59XG4gICAgICAgKi9cbiAgYXN5bmMgZ2V0RmxhZyhjb2RlLCB3aWR0aCwgaGVpZ2h0LCBxdWFsaXR5KSB7XG4gICAgaWYgKHR5cGVvZiBjb2RlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJjb2RlXCInKTtcbiAgICB9XG4gICAgY29uc3QgYXBpUGF0aCA9IFwiL2F2YXRhcnMvZmxhZ3Mve2NvZGV9XCIucmVwbGFjZShcIntjb2RlfVwiLCBjb2RlKTtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgaWYgKHR5cGVvZiB3aWR0aCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcIndpZHRoXCJdID0gd2lkdGg7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaGVpZ2h0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wiaGVpZ2h0XCJdID0gaGVpZ2h0O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHF1YWxpdHkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJxdWFsaXR5XCJdID0gcXVhbGl0eTtcbiAgICB9XG4gICAgY29uc3QgdXJpID0gbmV3IFVSTCh0aGlzLmNsaWVudC5jb25maWcuZW5kcG9pbnQgKyBhcGlQYXRoKTtcbiAgICBjb25zdCBhcGlIZWFkZXJzID0ge1xuICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmNsaWVudC5jYWxsKFxuICAgICAgXCJnZXRcIixcbiAgICAgIHVyaSxcbiAgICAgIGFwaUhlYWRlcnMsXG4gICAgICBwYXlsb2FkLFxuICAgICAgXCJhcnJheUJ1ZmZlclwiXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICAgICAqIEdldCBpbWFnZSBmcm9tIFVSTFxuICAgICAgICpcbiAgICAgICAqIFVzZSB0aGlzIGVuZHBvaW50IHRvIGZldGNoIGEgcmVtb3RlIGltYWdlIFVSTCBhbmQgY3JvcCBpdCB0byBhbnkgaW1hZ2Ugc2l6ZSB5b3Ugd2FudC4gVGhpcyBlbmRwb2ludCBpcyB2ZXJ5IHVzZWZ1bCBpZiB5b3UgbmVlZCB0byBjcm9wIGFuZCBkaXNwbGF5IHJlbW90ZSBpbWFnZXMgaW4geW91ciBhcHAgb3IgaW4gY2FzZSB5b3Ugd2FudCB0byBtYWtlIHN1cmUgYSAzcmQgcGFydHkgaW1hZ2UgaXMgcHJvcGVybHkgc2VydmVkIHVzaW5nIGEgVExTIHByb3RvY29sLlxuICBcbiAgV2hlbiBvbmUgZGltZW5zaW9uIGlzIHNwZWNpZmllZCBhbmQgdGhlIG90aGVyIGlzIDAsIHRoZSBpbWFnZSBpcyBzY2FsZWQgd2l0aCBwcmVzZXJ2ZWQgYXNwZWN0IHJhdGlvLiBJZiBib3RoIGRpbWVuc2lvbnMgYXJlIDAsIHRoZSBBUEkgcHJvdmlkZXMgYW4gaW1hZ2UgYXQgc291cmNlIHF1YWxpdHkuIElmIGRpbWVuc2lvbnMgYXJlIG5vdCBzcGVjaWZpZWQsIHRoZSBkZWZhdWx0IHNpemUgb2YgaW1hZ2UgcmV0dXJuZWQgaXMgNDAweDQwMHB4LlxuICBcbiAgVGhpcyBlbmRwb2ludCBkb2VzIG5vdCBmb2xsb3cgSFRUUCByZWRpcmVjdHMuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHVybFxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHdpZHRoXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gaGVpZ2h0XG4gICAgICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5QnVmZmVyPn1cbiAgICAgICAqL1xuICBhc3luYyBnZXRJbWFnZSh1cmwsIHdpZHRoLCBoZWlnaHQpIHtcbiAgICBpZiAodHlwZW9mIHVybCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwidXJsXCInKTtcbiAgICB9XG4gICAgY29uc3QgYXBpUGF0aCA9IFwiL2F2YXRhcnMvaW1hZ2VcIjtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgaWYgKHR5cGVvZiB1cmwgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJ1cmxcIl0gPSB1cmw7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygd2lkdGggIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJ3aWR0aFwiXSA9IHdpZHRoO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGhlaWdodCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImhlaWdodFwiXSA9IGhlaWdodDtcbiAgICB9XG4gICAgY29uc3QgdXJpID0gbmV3IFVSTCh0aGlzLmNsaWVudC5jb25maWcuZW5kcG9pbnQgKyBhcGlQYXRoKTtcbiAgICBjb25zdCBhcGlIZWFkZXJzID0ge1xuICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmNsaWVudC5jYWxsKFxuICAgICAgXCJnZXRcIixcbiAgICAgIHVyaSxcbiAgICAgIGFwaUhlYWRlcnMsXG4gICAgICBwYXlsb2FkLFxuICAgICAgXCJhcnJheUJ1ZmZlclwiXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICAgICAqIEdldCB1c2VyIGluaXRpYWxzXG4gICAgICAgKlxuICAgICAgICogVXNlIHRoaXMgZW5kcG9pbnQgdG8gc2hvdyB5b3VyIHVzZXIgaW5pdGlhbHMgYXZhdGFyIGljb24gb24geW91ciB3ZWJzaXRlIG9yIGFwcC4gQnkgZGVmYXVsdCwgdGhpcyByb3V0ZSB3aWxsIHRyeSB0byBwcmludCB5b3VyIGxvZ2dlZC1pbiB1c2VyIG5hbWUgb3IgZW1haWwgaW5pdGlhbHMuIFlvdSBjYW4gYWxzbyBvdmVyd3JpdGUgdGhlIHVzZXIgbmFtZSBpZiB5b3UgcGFzcyB0aGUgJiMwMzk7bmFtZSYjMDM5OyBwYXJhbWV0ZXIuIElmIG5vIG5hbWUgaXMgZ2l2ZW4gYW5kIG5vIHVzZXIgaXMgbG9nZ2VkLCBhbiBlbXB0eSBhdmF0YXIgd2lsbCBiZSByZXR1cm5lZC5cbiAgXG4gIFlvdSBjYW4gdXNlIHRoZSBjb2xvciBhbmQgYmFja2dyb3VuZCBwYXJhbXMgdG8gY2hhbmdlIHRoZSBhdmF0YXIgY29sb3JzLiBCeSBkZWZhdWx0LCBhIHJhbmRvbSB0aGVtZSB3aWxsIGJlIHNlbGVjdGVkLiBUaGUgcmFuZG9tIHRoZW1lIHdpbGwgcGVyc2lzdCBmb3IgdGhlIHVzZXImIzAzOTtzIGluaXRpYWxzIHdoZW4gcmVsb2FkaW5nIHRoZSBzYW1lIHRoZW1lIHdpbGwgYWx3YXlzIHJldHVybiBmb3IgdGhlIHNhbWUgaW5pdGlhbHMuXG4gIFxuICBXaGVuIG9uZSBkaW1lbnNpb24gaXMgc3BlY2lmaWVkIGFuZCB0aGUgb3RoZXIgaXMgMCwgdGhlIGltYWdlIGlzIHNjYWxlZCB3aXRoIHByZXNlcnZlZCBhc3BlY3QgcmF0aW8uIElmIGJvdGggZGltZW5zaW9ucyBhcmUgMCwgdGhlIEFQSSBwcm92aWRlcyBhbiBpbWFnZSBhdCBzb3VyY2UgcXVhbGl0eS4gSWYgZGltZW5zaW9ucyBhcmUgbm90IHNwZWNpZmllZCwgdGhlIGRlZmF1bHQgc2l6ZSBvZiBpbWFnZSByZXR1cm5lZCBpcyAxMDB4MTAwcHguXG4gIFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gd2lkdGhcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBoZWlnaHRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBiYWNrZ3JvdW5kXG4gICAgICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5QnVmZmVyPn1cbiAgICAgICAqL1xuICBhc3luYyBnZXRJbml0aWFscyhuYW1lLCB3aWR0aCwgaGVpZ2h0LCBiYWNrZ3JvdW5kKSB7XG4gICAgY29uc3QgYXBpUGF0aCA9IFwiL2F2YXRhcnMvaW5pdGlhbHNcIjtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgaWYgKHR5cGVvZiBuYW1lICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wibmFtZVwiXSA9IG5hbWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygd2lkdGggIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJ3aWR0aFwiXSA9IHdpZHRoO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGhlaWdodCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImhlaWdodFwiXSA9IGhlaWdodDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBiYWNrZ3JvdW5kICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wiYmFja2dyb3VuZFwiXSA9IGJhY2tncm91bmQ7XG4gICAgfVxuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwiZ2V0XCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZCxcbiAgICAgIFwiYXJyYXlCdWZmZXJcIlxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAgICAgKiBHZXQgUVIgY29kZVxuICAgICAgICpcbiAgICAgICAqIENvbnZlcnRzIGEgZ2l2ZW4gcGxhaW4gdGV4dCB0byBhIFFSIGNvZGUgaW1hZ2UuIFlvdSBjYW4gdXNlIHRoZSBxdWVyeSBwYXJhbWV0ZXJzIHRvIGNoYW5nZSB0aGUgc2l6ZSBhbmQgc3R5bGUgb2YgdGhlIHJlc3VsdGluZyBpbWFnZS5cbiAgXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHRleHRcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBzaXplXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gbWFyZ2luXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGRvd25sb2FkXG4gICAgICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICAgICAqIEByZXR1cm5zIHtQcm9taXNlPEFycmF5QnVmZmVyPn1cbiAgICAgICAqL1xuICBhc3luYyBnZXRRUih0ZXh0LCBzaXplLCBtYXJnaW4sIGRvd25sb2FkKSB7XG4gICAgaWYgKHR5cGVvZiB0ZXh0ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJ0ZXh0XCInKTtcbiAgICB9XG4gICAgY29uc3QgYXBpUGF0aCA9IFwiL2F2YXRhcnMvcXJcIjtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgaWYgKHR5cGVvZiB0ZXh0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1widGV4dFwiXSA9IHRleHQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygc2l6ZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcInNpemVcIl0gPSBzaXplO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG1hcmdpbiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcIm1hcmdpblwiXSA9IG1hcmdpbjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkb3dubG9hZCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImRvd25sb2FkXCJdID0gZG93bmxvYWQ7XG4gICAgfVxuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwiZ2V0XCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZCxcbiAgICAgIFwiYXJyYXlCdWZmZXJcIlxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0cy5BdmF0YXJzID0gQXZhdGFycztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW91dC5qcy5tYXBcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWF2YXRhcnMuanMubWFwIl0sIm5hbWVzIjpbImNsaWVudCIsInJlcXVpcmUiLCJBdmF0YXJzIiwiY29uc3RydWN0b3IiLCJnZXRCcm93c2VyIiwiY29kZSIsIndpZHRoIiwiaGVpZ2h0IiwicXVhbGl0eSIsIkFwcHdyaXRlRXhjZXB0aW9uIiwiYXBpUGF0aCIsInJlcGxhY2UiLCJwYXlsb2FkIiwidXJpIiwiVVJMIiwiY29uZmlnIiwiZW5kcG9pbnQiLCJhcGlIZWFkZXJzIiwiY2FsbCIsImdldENyZWRpdENhcmQiLCJnZXRGYXZpY29uIiwidXJsIiwiZ2V0RmxhZyIsImdldEltYWdlIiwiZ2V0SW5pdGlhbHMiLCJuYW1lIiwiYmFja2dyb3VuZCIsImdldFFSIiwidGV4dCIsInNpemUiLCJtYXJnaW4iLCJkb3dubG9hZCIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/services/avatars.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/services/databases.js":
/*!***************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/services/databases.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar client = __webpack_require__(/*! ../client */ \"(rsc)/./node_modules/node-appwrite/dist/client.js\");\nclass Databases {\n    constructor(client){\n        this.client = client;\n    }\n    /**\n   * List databases\n   *\n   * Get a list of all databases from the current Appwrite project. You can use the search parameter to filter your results.\n   *\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.DatabaseList>}\n   */ async list(queries, search) {\n        const apiPath = \"/databases\";\n        const payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        if (typeof search !== \"undefined\") {\n            payload[\"search\"] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n       * Create database\n       *\n       * Create a new Database.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} name\n       * @param {boolean} enabled\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Database>}\n       */ async create(databaseId, name, enabled) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = \"/databases\";\n        const payload = {};\n        if (typeof databaseId !== \"undefined\") {\n            payload[\"databaseId\"] = databaseId;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get database\n   *\n   * Get a database by its unique ID. This endpoint response returns a JSON object with the database metadata.\n   *\n   * @param {string} databaseId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Database>}\n   */ async get(databaseId) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        const apiPath = \"/databases/{databaseId}\".replace(\"{databaseId}\", databaseId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update database\n   *\n   * Update a database by its unique ID.\n   *\n   * @param {string} databaseId\n   * @param {string} name\n   * @param {boolean} enabled\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Database>}\n   */ async update(databaseId, name, enabled) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = \"/databases/{databaseId}\".replace(\"{databaseId}\", databaseId);\n        const payload = {};\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"put\", uri, apiHeaders, payload);\n    }\n    /**\n   * Delete database\n   *\n   * Delete a database by its unique ID. Only API keys with with databases.write scope can delete a database.\n   *\n   * @param {string} databaseId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async delete(databaseId) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        const apiPath = \"/databases/{databaseId}\".replace(\"{databaseId}\", databaseId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"delete\", uri, apiHeaders, payload);\n    }\n    /**\n   * List collections\n   *\n   * Get a list of all collections that belong to the provided databaseId. You can use the search parameter to filter your results.\n   *\n   * @param {string} databaseId\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.CollectionList>}\n   */ async listCollections(databaseId, queries, search) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections\".replace(\"{databaseId}\", databaseId);\n        const payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        if (typeof search !== \"undefined\") {\n            payload[\"search\"] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create collection\n   *\n   * Create a new Collection. Before using this route, you should create a new database resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string} name\n   * @param {string[]} permissions\n   * @param {boolean} documentSecurity\n   * @param {boolean} enabled\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Collection>}\n   */ async createCollection(databaseId, collectionId, name, permissions, documentSecurity, enabled) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections\".replace(\"{databaseId}\", databaseId);\n        const payload = {};\n        if (typeof collectionId !== \"undefined\") {\n            payload[\"collectionId\"] = collectionId;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof permissions !== \"undefined\") {\n            payload[\"permissions\"] = permissions;\n        }\n        if (typeof documentSecurity !== \"undefined\") {\n            payload[\"documentSecurity\"] = documentSecurity;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get collection\n   *\n   * Get a collection by its unique ID. This endpoint response returns a JSON object with the collection metadata.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Collection>}\n   */ async getCollection(databaseId, collectionId) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update collection\n   *\n   * Update a collection by its unique ID.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string} name\n   * @param {string[]} permissions\n   * @param {boolean} documentSecurity\n   * @param {boolean} enabled\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Collection>}\n   */ async updateCollection(databaseId, collectionId, name, permissions, documentSecurity, enabled) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        const payload = {};\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof permissions !== \"undefined\") {\n            payload[\"permissions\"] = permissions;\n        }\n        if (typeof documentSecurity !== \"undefined\") {\n            payload[\"documentSecurity\"] = documentSecurity;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"put\", uri, apiHeaders, payload);\n    }\n    /**\n   * Delete collection\n   *\n   * Delete a collection by its unique ID. Only users with write permissions have access to delete this resource.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async deleteCollection(databaseId, collectionId) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"delete\", uri, apiHeaders, payload);\n    }\n    /**\n   * List attributes\n   *\n   * List attributes in the collection.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.AttributeList>}\n   */ async listAttributes(databaseId, collectionId, queries) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        const payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n       * Create boolean attribute\n       *\n       * Create a boolean attribute.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {boolean} required\n       * @param {boolean} xdefault\n       * @param {boolean} array\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeBoolean>}\n       */ async createBooleanAttribute(databaseId, collectionId, key, required, xdefault, array) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"required\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/boolean\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        const payload = {};\n        if (typeof key !== \"undefined\") {\n            payload[\"key\"] = key;\n        }\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        if (typeof array !== \"undefined\") {\n            payload[\"array\"] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update boolean attribute\n   *\n   * Update a boolean attribute. Changing the `default` value will not update already existing documents.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string} key\n   * @param {boolean} required\n   * @param {boolean} xdefault\n   * @param {string} newKey\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.AttributeBoolean>}\n   */ async updateBooleanAttribute(databaseId, collectionId, key, required, xdefault, newKey) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/boolean/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n        const payload = {};\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        if (typeof newKey !== \"undefined\") {\n            payload[\"newKey\"] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create datetime attribute\n   *\n   * Create a date time attribute according to the ISO 8601 standard.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string} key\n   * @param {boolean} required\n   * @param {string} xdefault\n   * @param {boolean} array\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.AttributeDatetime>}\n   */ async createDatetimeAttribute(databaseId, collectionId, key, required, xdefault, array) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"required\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/datetime\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        const payload = {};\n        if (typeof key !== \"undefined\") {\n            payload[\"key\"] = key;\n        }\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        if (typeof array !== \"undefined\") {\n            payload[\"array\"] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update dateTime attribute\n   *\n   * Update a date time attribute. Changing the `default` value will not update already existing documents.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string} key\n   * @param {boolean} required\n   * @param {string} xdefault\n   * @param {string} newKey\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.AttributeDatetime>}\n   */ async updateDatetimeAttribute(databaseId, collectionId, key, required, xdefault, newKey) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/datetime/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n        const payload = {};\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        if (typeof newKey !== \"undefined\") {\n            payload[\"newKey\"] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n       * Create email attribute\n       *\n       * Create an email attribute.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {boolean} required\n       * @param {string} xdefault\n       * @param {boolean} array\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeEmail>}\n       */ async createEmailAttribute(databaseId, collectionId, key, required, xdefault, array) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"required\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/email\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        const payload = {};\n        if (typeof key !== \"undefined\") {\n            payload[\"key\"] = key;\n        }\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        if (typeof array !== \"undefined\") {\n            payload[\"array\"] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n       * Update email attribute\n       *\n       * Update an email attribute. Changing the `default` value will not update already existing documents.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {boolean} required\n       * @param {string} xdefault\n       * @param {string} newKey\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeEmail>}\n       */ async updateEmailAttribute(databaseId, collectionId, key, required, xdefault, newKey) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/email/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n        const payload = {};\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        if (typeof newKey !== \"undefined\") {\n            payload[\"newKey\"] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n       * Create enum attribute\n       *\n       * Create an enumeration attribute. The `elements` param acts as a white-list of accepted values for this attribute. \n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {string[]} elements\n       * @param {boolean} required\n       * @param {string} xdefault\n       * @param {boolean} array\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeEnum>}\n       */ async createEnumAttribute(databaseId, collectionId, key, elements, required, xdefault, array) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof elements === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"elements\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"required\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/enum\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        const payload = {};\n        if (typeof key !== \"undefined\") {\n            payload[\"key\"] = key;\n        }\n        if (typeof elements !== \"undefined\") {\n            payload[\"elements\"] = elements;\n        }\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        if (typeof array !== \"undefined\") {\n            payload[\"array\"] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n       * Update enum attribute\n       *\n       * Update an enum attribute. Changing the `default` value will not update already existing documents.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {string[]} elements\n       * @param {boolean} required\n       * @param {string} xdefault\n       * @param {string} newKey\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeEnum>}\n       */ async updateEnumAttribute(databaseId, collectionId, key, elements, required, xdefault, newKey) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof elements === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"elements\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/enum/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n        const payload = {};\n        if (typeof elements !== \"undefined\") {\n            payload[\"elements\"] = elements;\n        }\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        if (typeof newKey !== \"undefined\") {\n            payload[\"newKey\"] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n       * Create float attribute\n       *\n       * Create a float attribute. Optionally, minimum and maximum values can be provided.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {boolean} required\n       * @param {number} min\n       * @param {number} max\n       * @param {number} xdefault\n       * @param {boolean} array\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeFloat>}\n       */ async createFloatAttribute(databaseId, collectionId, key, required, min, max, xdefault, array) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"required\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/float\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        const payload = {};\n        if (typeof key !== \"undefined\") {\n            payload[\"key\"] = key;\n        }\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof min !== \"undefined\") {\n            payload[\"min\"] = min;\n        }\n        if (typeof max !== \"undefined\") {\n            payload[\"max\"] = max;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        if (typeof array !== \"undefined\") {\n            payload[\"array\"] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n       * Update float attribute\n       *\n       * Update a float attribute. Changing the `default` value will not update already existing documents.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {boolean} required\n       * @param {number} min\n       * @param {number} max\n       * @param {number} xdefault\n       * @param {string} newKey\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeFloat>}\n       */ async updateFloatAttribute(databaseId, collectionId, key, required, min, max, xdefault, newKey) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof min === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"min\"');\n        }\n        if (typeof max === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"max\"');\n        }\n        if (typeof xdefault === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/float/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n        const payload = {};\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof min !== \"undefined\") {\n            payload[\"min\"] = min;\n        }\n        if (typeof max !== \"undefined\") {\n            payload[\"max\"] = max;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        if (typeof newKey !== \"undefined\") {\n            payload[\"newKey\"] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n       * Create integer attribute\n       *\n       * Create an integer attribute. Optionally, minimum and maximum values can be provided.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {boolean} required\n       * @param {number} min\n       * @param {number} max\n       * @param {number} xdefault\n       * @param {boolean} array\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeInteger>}\n       */ async createIntegerAttribute(databaseId, collectionId, key, required, min, max, xdefault, array) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"required\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/integer\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        const payload = {};\n        if (typeof key !== \"undefined\") {\n            payload[\"key\"] = key;\n        }\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof min !== \"undefined\") {\n            payload[\"min\"] = min;\n        }\n        if (typeof max !== \"undefined\") {\n            payload[\"max\"] = max;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        if (typeof array !== \"undefined\") {\n            payload[\"array\"] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n       * Update integer attribute\n       *\n       * Update an integer attribute. Changing the `default` value will not update already existing documents.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {boolean} required\n       * @param {number} min\n       * @param {number} max\n       * @param {number} xdefault\n       * @param {string} newKey\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeInteger>}\n       */ async updateIntegerAttribute(databaseId, collectionId, key, required, min, max, xdefault, newKey) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof min === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"min\"');\n        }\n        if (typeof max === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"max\"');\n        }\n        if (typeof xdefault === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/integer/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n        const payload = {};\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof min !== \"undefined\") {\n            payload[\"min\"] = min;\n        }\n        if (typeof max !== \"undefined\") {\n            payload[\"max\"] = max;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        if (typeof newKey !== \"undefined\") {\n            payload[\"newKey\"] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n       * Create IP address attribute\n       *\n       * Create IP address attribute.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {boolean} required\n       * @param {string} xdefault\n       * @param {boolean} array\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeIp>}\n       */ async createIpAttribute(databaseId, collectionId, key, required, xdefault, array) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"required\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/ip\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        const payload = {};\n        if (typeof key !== \"undefined\") {\n            payload[\"key\"] = key;\n        }\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        if (typeof array !== \"undefined\") {\n            payload[\"array\"] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n       * Update IP address attribute\n       *\n       * Update an ip attribute. Changing the `default` value will not update already existing documents.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {boolean} required\n       * @param {string} xdefault\n       * @param {string} newKey\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeIp>}\n       */ async updateIpAttribute(databaseId, collectionId, key, required, xdefault, newKey) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/ip/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n        const payload = {};\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        if (typeof newKey !== \"undefined\") {\n            payload[\"newKey\"] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n       * Create relationship attribute\n       *\n       * Create relationship attribute. [Learn more about relationship attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes).\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} relatedCollectionId\n       * @param {RelationshipType} type\n       * @param {boolean} twoWay\n       * @param {string} key\n       * @param {string} twoWayKey\n       * @param {RelationMutate} onDelete\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeRelationship>}\n       */ async createRelationshipAttribute(databaseId, collectionId, relatedCollectionId, type, twoWay, key, twoWayKey, onDelete) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof relatedCollectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"relatedCollectionId\"');\n        }\n        if (typeof type === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"type\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/relationship\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        const payload = {};\n        if (typeof relatedCollectionId !== \"undefined\") {\n            payload[\"relatedCollectionId\"] = relatedCollectionId;\n        }\n        if (typeof type !== \"undefined\") {\n            payload[\"type\"] = type;\n        }\n        if (typeof twoWay !== \"undefined\") {\n            payload[\"twoWay\"] = twoWay;\n        }\n        if (typeof key !== \"undefined\") {\n            payload[\"key\"] = key;\n        }\n        if (typeof twoWayKey !== \"undefined\") {\n            payload[\"twoWayKey\"] = twoWayKey;\n        }\n        if (typeof onDelete !== \"undefined\") {\n            payload[\"onDelete\"] = onDelete;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n       * Create string attribute\n       *\n       * Create a string attribute.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {number} size\n       * @param {boolean} required\n       * @param {string} xdefault\n       * @param {boolean} array\n       * @param {boolean} encrypt\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeString>}\n       */ async createStringAttribute(databaseId, collectionId, key, size, required, xdefault, array, encrypt) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof size === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"size\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"required\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/string\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        const payload = {};\n        if (typeof key !== \"undefined\") {\n            payload[\"key\"] = key;\n        }\n        if (typeof size !== \"undefined\") {\n            payload[\"size\"] = size;\n        }\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        if (typeof array !== \"undefined\") {\n            payload[\"array\"] = array;\n        }\n        if (typeof encrypt !== \"undefined\") {\n            payload[\"encrypt\"] = encrypt;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n       * Update string attribute\n       *\n       * Update a string attribute. Changing the `default` value will not update already existing documents.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {boolean} required\n       * @param {string} xdefault\n       * @param {number} size\n       * @param {string} newKey\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeString>}\n       */ async updateStringAttribute(databaseId, collectionId, key, required, xdefault, size, newKey) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/string/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n        const payload = {};\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        if (typeof size !== \"undefined\") {\n            payload[\"size\"] = size;\n        }\n        if (typeof newKey !== \"undefined\") {\n            payload[\"newKey\"] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n       * Create URL attribute\n       *\n       * Create a URL attribute.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {boolean} required\n       * @param {string} xdefault\n       * @param {boolean} array\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeUrl>}\n       */ async createUrlAttribute(databaseId, collectionId, key, required, xdefault, array) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"required\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/url\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        const payload = {};\n        if (typeof key !== \"undefined\") {\n            payload[\"key\"] = key;\n        }\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        if (typeof array !== \"undefined\") {\n            payload[\"array\"] = array;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n       * Update URL attribute\n       *\n       * Update an url attribute. Changing the `default` value will not update already existing documents.\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {boolean} required\n       * @param {string} xdefault\n       * @param {string} newKey\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeUrl>}\n       */ async updateUrlAttribute(databaseId, collectionId, key, required, xdefault, newKey) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof required === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"required\"');\n        }\n        if (typeof xdefault === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"xdefault\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/url/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n        const payload = {};\n        if (typeof required !== \"undefined\") {\n            payload[\"required\"] = required;\n        }\n        if (typeof xdefault !== \"undefined\") {\n            payload[\"default\"] = xdefault;\n        }\n        if (typeof newKey !== \"undefined\") {\n            payload[\"newKey\"] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get attribute\n   *\n   * Get attribute by ID.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string} key\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async getAttribute(databaseId, collectionId, key) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"key\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Delete attribute\n   *\n   * Deletes an attribute.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string} key\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async deleteAttribute(databaseId, collectionId, key) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"key\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"delete\", uri, apiHeaders, payload);\n    }\n    /**\n       * Update relationship attribute\n       *\n       * Update relationship attribute. [Learn more about relationship attributes](https://appwrite.io/docs/databases-relationships#relationship-attributes).\n  \n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {RelationMutate} onDelete\n       * @param {string} newKey\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.AttributeRelationship>}\n       */ async updateRelationshipAttribute(databaseId, collectionId, key, onDelete, newKey) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"key\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/attributes/{key}/relationship\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n        const payload = {};\n        if (typeof onDelete !== \"undefined\") {\n            payload[\"onDelete\"] = onDelete;\n        }\n        if (typeof newKey !== \"undefined\") {\n            payload[\"newKey\"] = newKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * List documents\n   *\n   * Get a list of all the user&#039;s documents in a given collection. You can use the query params to filter your results.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.DocumentList<Document>>}\n   */ async listDocuments(databaseId, collectionId, queries) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/documents\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        const payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create document\n   *\n   * Create a new Document. Before using this route, you should create a new collection resource using either a [server integration](https://appwrite.io/docs/server/databases#databasesCreateCollection) API or directly from your database console.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string} documentId\n   * @param {Omit<Document, keyof Models.Document>} data\n   * @param {string[]} permissions\n   * @throws {AppwriteException}\n   * @returns {Promise<Document>}\n   */ async createDocument(databaseId, collectionId, documentId, data, permissions) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof documentId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"documentId\"');\n        }\n        if (typeof data === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"data\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/documents\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        const payload = {};\n        if (typeof documentId !== \"undefined\") {\n            payload[\"documentId\"] = documentId;\n        }\n        if (typeof data !== \"undefined\") {\n            payload[\"data\"] = data;\n        }\n        if (typeof permissions !== \"undefined\") {\n            payload[\"permissions\"] = permissions;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get document\n   *\n   * Get a document by its unique ID. This endpoint response returns a JSON object with the document data.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string} documentId\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Document>}\n   */ async getDocument(databaseId, collectionId, documentId, queries) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof documentId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"documentId\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/documents/{documentId}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{documentId}\", documentId);\n        const payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update document\n   *\n   * Update a document by its unique ID. Using the patch method you can pass only specific fields that will get updated.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string} documentId\n   * @param {Partial<Omit<Document, keyof Models.Document>>} data\n   * @param {string[]} permissions\n   * @throws {AppwriteException}\n   * @returns {Promise<Document>}\n   */ async updateDocument(databaseId, collectionId, documentId, data, permissions) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof documentId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"documentId\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/documents/{documentId}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{documentId}\", documentId);\n        const payload = {};\n        if (typeof data !== \"undefined\") {\n            payload[\"data\"] = data;\n        }\n        if (typeof permissions !== \"undefined\") {\n            payload[\"permissions\"] = permissions;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Delete document\n   *\n   * Delete a document by its unique ID.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string} documentId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async deleteDocument(databaseId, collectionId, documentId) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof documentId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"documentId\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/documents/{documentId}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{documentId}\", documentId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"delete\", uri, apiHeaders, payload);\n    }\n    /**\n   * List indexes\n   *\n   * List indexes in the collection.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.IndexList>}\n   */ async listIndexes(databaseId, collectionId, queries) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/indexes\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        const payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n       * Create index\n       *\n       * Creates an index on the attributes listed. Your index should include all the attributes you will query in a single request.\n  Attributes can be `key`, `fulltext`, and `unique`.\n       *\n       * @param {string} databaseId\n       * @param {string} collectionId\n       * @param {string} key\n       * @param {IndexType} type\n       * @param {string[]} attributes\n       * @param {string[]} orders\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Index>}\n       */ async createIndex(databaseId, collectionId, key, type, attributes, orders) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof type === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"type\"');\n        }\n        if (typeof attributes === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"attributes\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/indexes\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId);\n        const payload = {};\n        if (typeof key !== \"undefined\") {\n            payload[\"key\"] = key;\n        }\n        if (typeof type !== \"undefined\") {\n            payload[\"type\"] = type;\n        }\n        if (typeof attributes !== \"undefined\") {\n            payload[\"attributes\"] = attributes;\n        }\n        if (typeof orders !== \"undefined\") {\n            payload[\"orders\"] = orders;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get index\n   *\n   * Get index by ID.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string} key\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Index>}\n   */ async getIndex(databaseId, collectionId, key) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"key\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/indexes/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Delete index\n   *\n   * Delete an index.\n   *\n   * @param {string} databaseId\n   * @param {string} collectionId\n   * @param {string} key\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async deleteIndex(databaseId, collectionId, key) {\n        if (typeof databaseId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"databaseId\"');\n        }\n        if (typeof collectionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"collectionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"key\"');\n        }\n        const apiPath = \"/databases/{databaseId}/collections/{collectionId}/indexes/{key}\".replace(\"{databaseId}\", databaseId).replace(\"{collectionId}\", collectionId).replace(\"{key}\", key);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"delete\", uri, apiHeaders, payload);\n    }\n}\nexports.Databases = Databases; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=databases.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L3NlcnZpY2VzL2RhdGFiYXNlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLFNBQVNDLG1CQUFPQSxDQUFDO0FBRXJCLE1BQU1DO0lBQ0pDLFlBQVlILE1BQU0sQ0FBRTtRQUNsQixJQUFJLENBQUNBLE1BQU0sR0FBR0E7SUFDaEI7SUFDQTs7Ozs7Ozs7O0dBU0MsR0FDRCxNQUFNSSxLQUFLQyxPQUFPLEVBQUVDLE1BQU0sRUFBRTtRQUMxQixNQUFNQyxVQUFVO1FBQ2hCLE1BQU1DLFVBQVUsQ0FBQztRQUNqQixJQUFJLE9BQU9ILFlBQVksYUFBYTtZQUNsQ0csT0FBTyxDQUFDLFVBQVUsR0FBR0g7UUFDdkI7UUFDQSxJQUFJLE9BQU9DLFdBQVcsYUFBYTtZQUNqQ0UsT0FBTyxDQUFDLFNBQVMsR0FBR0Y7UUFDdEI7UUFDQSxNQUFNRyxNQUFNLElBQUlDLElBQUksSUFBSSxDQUFDVixNQUFNLENBQUNXLE1BQU0sQ0FBQ0MsUUFBUSxHQUFHTDtRQUNsRCxNQUFNTSxhQUFhO1lBQ2pCLGdCQUFnQjtRQUNsQjtRQUNBLE9BQU8sTUFBTSxJQUFJLENBQUNiLE1BQU0sQ0FBQ2MsSUFBSSxDQUMzQixPQUNBTCxLQUNBSSxZQUNBTDtJQUVKO0lBQ0E7Ozs7Ozs7Ozs7O09BV0ssR0FDTCxNQUFNTyxPQUFPQyxVQUFVLEVBQUVDLElBQUksRUFBRUMsT0FBTyxFQUFFO1FBQ3RDLElBQUksT0FBT0YsZUFBZSxhQUFhO1lBQ3JDLE1BQU0sSUFBSWhCLE9BQU9tQixpQkFBaUIsQ0FBQztRQUNyQztRQUNBLElBQUksT0FBT0YsU0FBUyxhQUFhO1lBQy9CLE1BQU0sSUFBSWpCLE9BQU9tQixpQkFBaUIsQ0FBQztRQUNyQztRQUNBLE1BQU1aLFVBQVU7UUFDaEIsTUFBTUMsVUFBVSxDQUFDO1FBQ2pCLElBQUksT0FBT1EsZUFBZSxhQUFhO1lBQ3JDUixPQUFPLENBQUMsYUFBYSxHQUFHUTtRQUMxQjtR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cml0ZS9kaXN0L3NlcnZpY2VzL2RhdGFiYXNlcy5qcz9iNmVkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGNsaWVudCA9IHJlcXVpcmUoJy4uL2NsaWVudCcpO1xuXG5jbGFzcyBEYXRhYmFzZXMge1xuICBjb25zdHJ1Y3RvcihjbGllbnQpIHtcbiAgICB0aGlzLmNsaWVudCA9IGNsaWVudDtcbiAgfVxuICAvKipcbiAgICogTGlzdCBkYXRhYmFzZXNcbiAgICpcbiAgICogR2V0IGEgbGlzdCBvZiBhbGwgZGF0YWJhc2VzIGZyb20gdGhlIGN1cnJlbnQgQXBwd3JpdGUgcHJvamVjdC4gWW91IGNhbiB1c2UgdGhlIHNlYXJjaCBwYXJhbWV0ZXIgdG8gZmlsdGVyIHlvdXIgcmVzdWx0cy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gcXVlcmllc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gc2VhcmNoXG4gICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxNb2RlbHMuRGF0YWJhc2VMaXN0Pn1cbiAgICovXG4gIGFzeW5jIGxpc3QocXVlcmllcywgc2VhcmNoKSB7XG4gICAgY29uc3QgYXBpUGF0aCA9IFwiL2RhdGFiYXNlc1wiO1xuICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICBpZiAodHlwZW9mIHF1ZXJpZXMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJxdWVyaWVzXCJdID0gcXVlcmllcztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzZWFyY2ggIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJzZWFyY2hcIl0gPSBzZWFyY2g7XG4gICAgfVxuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwiZ2V0XCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAgICAgKiBDcmVhdGUgZGF0YWJhc2VcbiAgICAgICAqXG4gICAgICAgKiBDcmVhdGUgYSBuZXcgRGF0YWJhc2UuXG4gIFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhYmFzZUlkXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBlbmFibGVkXG4gICAgICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICAgICAqIEByZXR1cm5zIHtQcm9taXNlPE1vZGVscy5EYXRhYmFzZT59XG4gICAgICAgKi9cbiAgYXN5bmMgY3JlYXRlKGRhdGFiYXNlSWQsIG5hbWUsIGVuYWJsZWQpIHtcbiAgICBpZiAodHlwZW9mIGRhdGFiYXNlSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImRhdGFiYXNlSWRcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcIm5hbWVcIicpO1xuICAgIH1cbiAgICBjb25zdCBhcGlQYXRoID0gXCIvZGF0YWJhc2VzXCI7XG4gICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgIGlmICh0eXBlb2YgZGF0YWJhc2VJZCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImRhdGFiYXNlSWRcIl0gPSBkYXRhYmFzZUlkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG5hbWUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJuYW1lXCJdID0gbmFtZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmFibGVkICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wiZW5hYmxlZFwiXSA9IGVuYWJsZWQ7XG4gICAgfVxuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwicG9zdFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgZGF0YWJhc2VcbiAgICpcbiAgICogR2V0IGEgZGF0YWJhc2UgYnkgaXRzIHVuaXF1ZSBJRC4gVGhpcyBlbmRwb2ludCByZXNwb25zZSByZXR1cm5zIGEgSlNPTiBvYmplY3Qgd2l0aCB0aGUgZGF0YWJhc2UgbWV0YWRhdGEuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhYmFzZUlkXG4gICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxNb2RlbHMuRGF0YWJhc2U+fVxuICAgKi9cbiAgYXN5bmMgZ2V0KGRhdGFiYXNlSWQpIHtcbiAgICBpZiAodHlwZW9mIGRhdGFiYXNlSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImRhdGFiYXNlSWRcIicpO1xuICAgIH1cbiAgICBjb25zdCBhcGlQYXRoID0gXCIvZGF0YWJhc2VzL3tkYXRhYmFzZUlkfVwiLnJlcGxhY2UoXCJ7ZGF0YWJhc2VJZH1cIiwgZGF0YWJhc2VJZCk7XG4gICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwiZ2V0XCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSBkYXRhYmFzZVxuICAgKlxuICAgKiBVcGRhdGUgYSBkYXRhYmFzZSBieSBpdHMgdW5pcXVlIElELlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YWJhc2VJZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGVuYWJsZWRcbiAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE1vZGVscy5EYXRhYmFzZT59XG4gICAqL1xuICBhc3luYyB1cGRhdGUoZGF0YWJhc2VJZCwgbmFtZSwgZW5hYmxlZCkge1xuICAgIGlmICh0eXBlb2YgZGF0YWJhc2VJZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiZGF0YWJhc2VJZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwibmFtZVwiJyk7XG4gICAgfVxuICAgIGNvbnN0IGFwaVBhdGggPSBcIi9kYXRhYmFzZXMve2RhdGFiYXNlSWR9XCIucmVwbGFjZShcIntkYXRhYmFzZUlkfVwiLCBkYXRhYmFzZUlkKTtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgaWYgKHR5cGVvZiBuYW1lICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wibmFtZVwiXSA9IG5hbWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5hYmxlZCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImVuYWJsZWRcIl0gPSBlbmFibGVkO1xuICAgIH1cbiAgICBjb25zdCB1cmkgPSBuZXcgVVJMKHRoaXMuY2xpZW50LmNvbmZpZy5lbmRwb2ludCArIGFwaVBhdGgpO1xuICAgIGNvbnN0IGFwaUhlYWRlcnMgPSB7XG4gICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuY2xpZW50LmNhbGwoXG4gICAgICBcInB1dFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgZGF0YWJhc2VcbiAgICpcbiAgICogRGVsZXRlIGEgZGF0YWJhc2UgYnkgaXRzIHVuaXF1ZSBJRC4gT25seSBBUEkga2V5cyB3aXRoIHdpdGggZGF0YWJhc2VzLndyaXRlIHNjb3BlIGNhbiBkZWxldGUgYSBkYXRhYmFzZS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGFiYXNlSWRcbiAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHt9Pn1cbiAgICovXG4gIGFzeW5jIGRlbGV0ZShkYXRhYmFzZUlkKSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhYmFzZUlkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJkYXRhYmFzZUlkXCInKTtcbiAgICB9XG4gICAgY29uc3QgYXBpUGF0aCA9IFwiL2RhdGFiYXNlcy97ZGF0YWJhc2VJZH1cIi5yZXBsYWNlKFwie2RhdGFiYXNlSWR9XCIsIGRhdGFiYXNlSWQpO1xuICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICBjb25zdCB1cmkgPSBuZXcgVVJMKHRoaXMuY2xpZW50LmNvbmZpZy5lbmRwb2ludCArIGFwaVBhdGgpO1xuICAgIGNvbnN0IGFwaUhlYWRlcnMgPSB7XG4gICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuY2xpZW50LmNhbGwoXG4gICAgICBcImRlbGV0ZVwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBMaXN0IGNvbGxlY3Rpb25zXG4gICAqXG4gICAqIEdldCBhIGxpc3Qgb2YgYWxsIGNvbGxlY3Rpb25zIHRoYXQgYmVsb25nIHRvIHRoZSBwcm92aWRlZCBkYXRhYmFzZUlkLiBZb3UgY2FuIHVzZSB0aGUgc2VhcmNoIHBhcmFtZXRlciB0byBmaWx0ZXIgeW91ciByZXN1bHRzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YWJhc2VJZFxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBxdWVyaWVzXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBzZWFyY2hcbiAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE1vZGVscy5Db2xsZWN0aW9uTGlzdD59XG4gICAqL1xuICBhc3luYyBsaXN0Q29sbGVjdGlvbnMoZGF0YWJhc2VJZCwgcXVlcmllcywgc2VhcmNoKSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhYmFzZUlkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJkYXRhYmFzZUlkXCInKTtcbiAgICB9XG4gICAgY29uc3QgYXBpUGF0aCA9IFwiL2RhdGFiYXNlcy97ZGF0YWJhc2VJZH0vY29sbGVjdGlvbnNcIi5yZXBsYWNlKFwie2RhdGFiYXNlSWR9XCIsIGRhdGFiYXNlSWQpO1xuICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICBpZiAodHlwZW9mIHF1ZXJpZXMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJxdWVyaWVzXCJdID0gcXVlcmllcztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzZWFyY2ggIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJzZWFyY2hcIl0gPSBzZWFyY2g7XG4gICAgfVxuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwiZ2V0XCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIENyZWF0ZSBjb2xsZWN0aW9uXG4gICAqXG4gICAqIENyZWF0ZSBhIG5ldyBDb2xsZWN0aW9uLiBCZWZvcmUgdXNpbmcgdGhpcyByb3V0ZSwgeW91IHNob3VsZCBjcmVhdGUgYSBuZXcgZGF0YWJhc2UgcmVzb3VyY2UgdXNpbmcgZWl0aGVyIGEgW3NlcnZlciBpbnRlZ3JhdGlvbl0oaHR0cHM6Ly9hcHB3cml0ZS5pby9kb2NzL3NlcnZlci9kYXRhYmFzZXMjZGF0YWJhc2VzQ3JlYXRlQ29sbGVjdGlvbikgQVBJIG9yIGRpcmVjdGx5IGZyb20geW91ciBkYXRhYmFzZSBjb25zb2xlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YWJhc2VJZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29sbGVjdGlvbklkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IHBlcm1pc3Npb25zXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZG9jdW1lbnRTZWN1cml0eVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGVuYWJsZWRcbiAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE1vZGVscy5Db2xsZWN0aW9uPn1cbiAgICovXG4gIGFzeW5jIGNyZWF0ZUNvbGxlY3Rpb24oZGF0YWJhc2VJZCwgY29sbGVjdGlvbklkLCBuYW1lLCBwZXJtaXNzaW9ucywgZG9jdW1lbnRTZWN1cml0eSwgZW5hYmxlZCkge1xuICAgIGlmICh0eXBlb2YgZGF0YWJhc2VJZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiZGF0YWJhc2VJZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29sbGVjdGlvbklkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJjb2xsZWN0aW9uSWRcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG5hbWUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcIm5hbWVcIicpO1xuICAgIH1cbiAgICBjb25zdCBhcGlQYXRoID0gXCIvZGF0YWJhc2VzL3tkYXRhYmFzZUlkfS9jb2xsZWN0aW9uc1wiLnJlcGxhY2UoXCJ7ZGF0YWJhc2VJZH1cIiwgZGF0YWJhc2VJZCk7XG4gICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgIGlmICh0eXBlb2YgY29sbGVjdGlvbklkICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wiY29sbGVjdGlvbklkXCJdID0gY29sbGVjdGlvbklkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG5hbWUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJuYW1lXCJdID0gbmFtZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwZXJtaXNzaW9ucyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcInBlcm1pc3Npb25zXCJdID0gcGVybWlzc2lvbnM7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZG9jdW1lbnRTZWN1cml0eSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImRvY3VtZW50U2VjdXJpdHlcIl0gPSBkb2N1bWVudFNlY3VyaXR5O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuYWJsZWQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJlbmFibGVkXCJdID0gZW5hYmxlZDtcbiAgICB9XG4gICAgY29uc3QgdXJpID0gbmV3IFVSTCh0aGlzLmNsaWVudC5jb25maWcuZW5kcG9pbnQgKyBhcGlQYXRoKTtcbiAgICBjb25zdCBhcGlIZWFkZXJzID0ge1xuICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmNsaWVudC5jYWxsKFxuICAgICAgXCJwb3N0XCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIEdldCBjb2xsZWN0aW9uXG4gICAqXG4gICAqIEdldCBhIGNvbGxlY3Rpb24gYnkgaXRzIHVuaXF1ZSBJRC4gVGhpcyBlbmRwb2ludCByZXNwb25zZSByZXR1cm5zIGEgSlNPTiBvYmplY3Qgd2l0aCB0aGUgY29sbGVjdGlvbiBtZXRhZGF0YS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGFiYXNlSWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbGxlY3Rpb25JZFxuICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICogQHJldHVybnMge1Byb21pc2U8TW9kZWxzLkNvbGxlY3Rpb24+fVxuICAgKi9cbiAgYXN5bmMgZ2V0Q29sbGVjdGlvbihkYXRhYmFzZUlkLCBjb2xsZWN0aW9uSWQpIHtcbiAgICBpZiAodHlwZW9mIGRhdGFiYXNlSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImRhdGFiYXNlSWRcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbGxlY3Rpb25JZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiY29sbGVjdGlvbklkXCInKTtcbiAgICB9XG4gICAgY29uc3QgYXBpUGF0aCA9IFwiL2RhdGFiYXNlcy97ZGF0YWJhc2VJZH0vY29sbGVjdGlvbnMve2NvbGxlY3Rpb25JZH1cIi5yZXBsYWNlKFwie2RhdGFiYXNlSWR9XCIsIGRhdGFiYXNlSWQpLnJlcGxhY2UoXCJ7Y29sbGVjdGlvbklkfVwiLCBjb2xsZWN0aW9uSWQpO1xuICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICBjb25zdCB1cmkgPSBuZXcgVVJMKHRoaXMuY2xpZW50LmNvbmZpZy5lbmRwb2ludCArIGFwaVBhdGgpO1xuICAgIGNvbnN0IGFwaUhlYWRlcnMgPSB7XG4gICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuY2xpZW50LmNhbGwoXG4gICAgICBcImdldFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBVcGRhdGUgY29sbGVjdGlvblxuICAgKlxuICAgKiBVcGRhdGUgYSBjb2xsZWN0aW9uIGJ5IGl0cyB1bmlxdWUgSUQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhYmFzZUlkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb2xsZWN0aW9uSWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gcGVybWlzc2lvbnNcbiAgICogQHBhcmFtIHtib29sZWFufSBkb2N1bWVudFNlY3VyaXR5XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gZW5hYmxlZFxuICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICogQHJldHVybnMge1Byb21pc2U8TW9kZWxzLkNvbGxlY3Rpb24+fVxuICAgKi9cbiAgYXN5bmMgdXBkYXRlQ29sbGVjdGlvbihkYXRhYmFzZUlkLCBjb2xsZWN0aW9uSWQsIG5hbWUsIHBlcm1pc3Npb25zLCBkb2N1bWVudFNlY3VyaXR5LCBlbmFibGVkKSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhYmFzZUlkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJkYXRhYmFzZUlkXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb2xsZWN0aW9uSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImNvbGxlY3Rpb25JZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbmFtZSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwibmFtZVwiJyk7XG4gICAgfVxuICAgIGNvbnN0IGFwaVBhdGggPSBcIi9kYXRhYmFzZXMve2RhdGFiYXNlSWR9L2NvbGxlY3Rpb25zL3tjb2xsZWN0aW9uSWR9XCIucmVwbGFjZShcIntkYXRhYmFzZUlkfVwiLCBkYXRhYmFzZUlkKS5yZXBsYWNlKFwie2NvbGxlY3Rpb25JZH1cIiwgY29sbGVjdGlvbklkKTtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgaWYgKHR5cGVvZiBuYW1lICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wibmFtZVwiXSA9IG5hbWU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcGVybWlzc2lvbnMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJwZXJtaXNzaW9uc1wiXSA9IHBlcm1pc3Npb25zO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGRvY3VtZW50U2VjdXJpdHkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJkb2N1bWVudFNlY3VyaXR5XCJdID0gZG9jdW1lbnRTZWN1cml0eTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmFibGVkICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wiZW5hYmxlZFwiXSA9IGVuYWJsZWQ7XG4gICAgfVxuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwicHV0XCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZSBjb2xsZWN0aW9uXG4gICAqXG4gICAqIERlbGV0ZSBhIGNvbGxlY3Rpb24gYnkgaXRzIHVuaXF1ZSBJRC4gT25seSB1c2VycyB3aXRoIHdyaXRlIHBlcm1pc3Npb25zIGhhdmUgYWNjZXNzIHRvIGRlbGV0ZSB0aGlzIHJlc291cmNlLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YWJhc2VJZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29sbGVjdGlvbklkXG4gICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx7fT59XG4gICAqL1xuICBhc3luYyBkZWxldGVDb2xsZWN0aW9uKGRhdGFiYXNlSWQsIGNvbGxlY3Rpb25JZCkge1xuICAgIGlmICh0eXBlb2YgZGF0YWJhc2VJZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiZGF0YWJhc2VJZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29sbGVjdGlvbklkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJjb2xsZWN0aW9uSWRcIicpO1xuICAgIH1cbiAgICBjb25zdCBhcGlQYXRoID0gXCIvZGF0YWJhc2VzL3tkYXRhYmFzZUlkfS9jb2xsZWN0aW9ucy97Y29sbGVjdGlvbklkfVwiLnJlcGxhY2UoXCJ7ZGF0YWJhc2VJZH1cIiwgZGF0YWJhc2VJZCkucmVwbGFjZShcIntjb2xsZWN0aW9uSWR9XCIsIGNvbGxlY3Rpb25JZCk7XG4gICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwiZGVsZXRlXCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIExpc3QgYXR0cmlidXRlc1xuICAgKlxuICAgKiBMaXN0IGF0dHJpYnV0ZXMgaW4gdGhlIGNvbGxlY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhYmFzZUlkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb2xsZWN0aW9uSWRcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gcXVlcmllc1xuICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICogQHJldHVybnMge1Byb21pc2U8TW9kZWxzLkF0dHJpYnV0ZUxpc3Q+fVxuICAgKi9cbiAgYXN5bmMgbGlzdEF0dHJpYnV0ZXMoZGF0YWJhc2VJZCwgY29sbGVjdGlvbklkLCBxdWVyaWVzKSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhYmFzZUlkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJkYXRhYmFzZUlkXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb2xsZWN0aW9uSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImNvbGxlY3Rpb25JZFwiJyk7XG4gICAgfVxuICAgIGNvbnN0IGFwaVBhdGggPSBcIi9kYXRhYmFzZXMve2RhdGFiYXNlSWR9L2NvbGxlY3Rpb25zL3tjb2xsZWN0aW9uSWR9L2F0dHJpYnV0ZXNcIi5yZXBsYWNlKFwie2RhdGFiYXNlSWR9XCIsIGRhdGFiYXNlSWQpLnJlcGxhY2UoXCJ7Y29sbGVjdGlvbklkfVwiLCBjb2xsZWN0aW9uSWQpO1xuICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICBpZiAodHlwZW9mIHF1ZXJpZXMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJxdWVyaWVzXCJdID0gcXVlcmllcztcbiAgICB9XG4gICAgY29uc3QgdXJpID0gbmV3IFVSTCh0aGlzLmNsaWVudC5jb25maWcuZW5kcG9pbnQgKyBhcGlQYXRoKTtcbiAgICBjb25zdCBhcGlIZWFkZXJzID0ge1xuICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmNsaWVudC5jYWxsKFxuICAgICAgXCJnZXRcIixcbiAgICAgIHVyaSxcbiAgICAgIGFwaUhlYWRlcnMsXG4gICAgICBwYXlsb2FkXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICAgICAqIENyZWF0ZSBib29sZWFuIGF0dHJpYnV0ZVxuICAgICAgICpcbiAgICAgICAqIENyZWF0ZSBhIGJvb2xlYW4gYXR0cmlidXRlLlxuICBcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YWJhc2VJZFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbGxlY3Rpb25JZFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgICAgICogQHBhcmFtIHtib29sZWFufSByZXF1aXJlZFxuICAgICAgICogQHBhcmFtIHtib29sZWFufSB4ZGVmYXVsdFxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBhcnJheVxuICAgICAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxNb2RlbHMuQXR0cmlidXRlQm9vbGVhbj59XG4gICAgICAgKi9cbiAgYXN5bmMgY3JlYXRlQm9vbGVhbkF0dHJpYnV0ZShkYXRhYmFzZUlkLCBjb2xsZWN0aW9uSWQsIGtleSwgcmVxdWlyZWQsIHhkZWZhdWx0LCBhcnJheSkge1xuICAgIGlmICh0eXBlb2YgZGF0YWJhc2VJZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiZGF0YWJhc2VJZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29sbGVjdGlvbklkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJjb2xsZWN0aW9uSWRcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGtleSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwia2V5XCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXF1aXJlZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwicmVxdWlyZWRcIicpO1xuICAgIH1cbiAgICBjb25zdCBhcGlQYXRoID0gXCIvZGF0YWJhc2VzL3tkYXRhYmFzZUlkfS9jb2xsZWN0aW9ucy97Y29sbGVjdGlvbklkfS9hdHRyaWJ1dGVzL2Jvb2xlYW5cIi5yZXBsYWNlKFwie2RhdGFiYXNlSWR9XCIsIGRhdGFiYXNlSWQpLnJlcGxhY2UoXCJ7Y29sbGVjdGlvbklkfVwiLCBjb2xsZWN0aW9uSWQpO1xuICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICBpZiAodHlwZW9mIGtleSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImtleVwiXSA9IGtleTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXF1aXJlZCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcInJlcXVpcmVkXCJdID0gcmVxdWlyZWQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgeGRlZmF1bHQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJkZWZhdWx0XCJdID0geGRlZmF1bHQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYXJyYXkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJhcnJheVwiXSA9IGFycmF5O1xuICAgIH1cbiAgICBjb25zdCB1cmkgPSBuZXcgVVJMKHRoaXMuY2xpZW50LmNvbmZpZy5lbmRwb2ludCArIGFwaVBhdGgpO1xuICAgIGNvbnN0IGFwaUhlYWRlcnMgPSB7XG4gICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuY2xpZW50LmNhbGwoXG4gICAgICBcInBvc3RcIixcbiAgICAgIHVyaSxcbiAgICAgIGFwaUhlYWRlcnMsXG4gICAgICBwYXlsb2FkXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogVXBkYXRlIGJvb2xlYW4gYXR0cmlidXRlXG4gICAqXG4gICAqIFVwZGF0ZSBhIGJvb2xlYW4gYXR0cmlidXRlLiBDaGFuZ2luZyB0aGUgYGRlZmF1bHRgIHZhbHVlIHdpbGwgbm90IHVwZGF0ZSBhbHJlYWR5IGV4aXN0aW5nIGRvY3VtZW50cy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGFiYXNlSWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbGxlY3Rpb25JZFxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVxdWlyZWRcbiAgICogQHBhcmFtIHtib29sZWFufSB4ZGVmYXVsdFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3S2V5XG4gICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxNb2RlbHMuQXR0cmlidXRlQm9vbGVhbj59XG4gICAqL1xuICBhc3luYyB1cGRhdGVCb29sZWFuQXR0cmlidXRlKGRhdGFiYXNlSWQsIGNvbGxlY3Rpb25JZCwga2V5LCByZXF1aXJlZCwgeGRlZmF1bHQsIG5ld0tleSkge1xuICAgIGlmICh0eXBlb2YgZGF0YWJhc2VJZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiZGF0YWJhc2VJZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29sbGVjdGlvbklkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJjb2xsZWN0aW9uSWRcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGtleSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwia2V5XCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXF1aXJlZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwicmVxdWlyZWRcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHhkZWZhdWx0ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJ4ZGVmYXVsdFwiJyk7XG4gICAgfVxuICAgIGNvbnN0IGFwaVBhdGggPSBcIi9kYXRhYmFzZXMve2RhdGFiYXNlSWR9L2NvbGxlY3Rpb25zL3tjb2xsZWN0aW9uSWR9L2F0dHJpYnV0ZXMvYm9vbGVhbi97a2V5fVwiLnJlcGxhY2UoXCJ7ZGF0YWJhc2VJZH1cIiwgZGF0YWJhc2VJZCkucmVwbGFjZShcIntjb2xsZWN0aW9uSWR9XCIsIGNvbGxlY3Rpb25JZCkucmVwbGFjZShcIntrZXl9XCIsIGtleSk7XG4gICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgIGlmICh0eXBlb2YgcmVxdWlyZWQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJyZXF1aXJlZFwiXSA9IHJlcXVpcmVkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHhkZWZhdWx0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wiZGVmYXVsdFwiXSA9IHhkZWZhdWx0O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG5ld0tleSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcIm5ld0tleVwiXSA9IG5ld0tleTtcbiAgICB9XG4gICAgY29uc3QgdXJpID0gbmV3IFVSTCh0aGlzLmNsaWVudC5jb25maWcuZW5kcG9pbnQgKyBhcGlQYXRoKTtcbiAgICBjb25zdCBhcGlIZWFkZXJzID0ge1xuICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmNsaWVudC5jYWxsKFxuICAgICAgXCJwYXRjaFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgZGF0ZXRpbWUgYXR0cmlidXRlXG4gICAqXG4gICAqIENyZWF0ZSBhIGRhdGUgdGltZSBhdHRyaWJ1dGUgYWNjb3JkaW5nIHRvIHRoZSBJU08gODYwMSBzdGFuZGFyZC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGFiYXNlSWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbGxlY3Rpb25JZFxuICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVxdWlyZWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IHhkZWZhdWx0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gYXJyYXlcbiAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE1vZGVscy5BdHRyaWJ1dGVEYXRldGltZT59XG4gICAqL1xuICBhc3luYyBjcmVhdGVEYXRldGltZUF0dHJpYnV0ZShkYXRhYmFzZUlkLCBjb2xsZWN0aW9uSWQsIGtleSwgcmVxdWlyZWQsIHhkZWZhdWx0LCBhcnJheSkge1xuICAgIGlmICh0eXBlb2YgZGF0YWJhc2VJZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiZGF0YWJhc2VJZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29sbGVjdGlvbklkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJjb2xsZWN0aW9uSWRcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGtleSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwia2V5XCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXF1aXJlZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwicmVxdWlyZWRcIicpO1xuICAgIH1cbiAgICBjb25zdCBhcGlQYXRoID0gXCIvZGF0YWJhc2VzL3tkYXRhYmFzZUlkfS9jb2xsZWN0aW9ucy97Y29sbGVjdGlvbklkfS9hdHRyaWJ1dGVzL2RhdGV0aW1lXCIucmVwbGFjZShcIntkYXRhYmFzZUlkfVwiLCBkYXRhYmFzZUlkKS5yZXBsYWNlKFwie2NvbGxlY3Rpb25JZH1cIiwgY29sbGVjdGlvbklkKTtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgaWYgKHR5cGVvZiBrZXkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJrZXlcIl0gPSBrZXk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVxdWlyZWQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJyZXF1aXJlZFwiXSA9IHJlcXVpcmVkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHhkZWZhdWx0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wiZGVmYXVsdFwiXSA9IHhkZWZhdWx0O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGFycmF5ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wiYXJyYXlcIl0gPSBhcnJheTtcbiAgICB9XG4gICAgY29uc3QgdXJpID0gbmV3IFVSTCh0aGlzLmNsaWVudC5jb25maWcuZW5kcG9pbnQgKyBhcGlQYXRoKTtcbiAgICBjb25zdCBhcGlIZWFkZXJzID0ge1xuICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmNsaWVudC5jYWxsKFxuICAgICAgXCJwb3N0XCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSBkYXRlVGltZSBhdHRyaWJ1dGVcbiAgICpcbiAgICogVXBkYXRlIGEgZGF0ZSB0aW1lIGF0dHJpYnV0ZS4gQ2hhbmdpbmcgdGhlIGBkZWZhdWx0YCB2YWx1ZSB3aWxsIG5vdCB1cGRhdGUgYWxyZWFkeSBleGlzdGluZyBkb2N1bWVudHMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhYmFzZUlkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb2xsZWN0aW9uSWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlcXVpcmVkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB4ZGVmYXVsdFxuICAgKiBAcGFyYW0ge3N0cmluZ30gbmV3S2V5XG4gICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxNb2RlbHMuQXR0cmlidXRlRGF0ZXRpbWU+fVxuICAgKi9cbiAgYXN5bmMgdXBkYXRlRGF0ZXRpbWVBdHRyaWJ1dGUoZGF0YWJhc2VJZCwgY29sbGVjdGlvbklkLCBrZXksIHJlcXVpcmVkLCB4ZGVmYXVsdCwgbmV3S2V5KSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhYmFzZUlkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJkYXRhYmFzZUlkXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb2xsZWN0aW9uSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImNvbGxlY3Rpb25JZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Yga2V5ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJrZXlcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlcXVpcmVkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJyZXF1aXJlZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgeGRlZmF1bHQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcInhkZWZhdWx0XCInKTtcbiAgICB9XG4gICAgY29uc3QgYXBpUGF0aCA9IFwiL2RhdGFiYXNlcy97ZGF0YWJhc2VJZH0vY29sbGVjdGlvbnMve2NvbGxlY3Rpb25JZH0vYXR0cmlidXRlcy9kYXRldGltZS97a2V5fVwiLnJlcGxhY2UoXCJ7ZGF0YWJhc2VJZH1cIiwgZGF0YWJhc2VJZCkucmVwbGFjZShcIntjb2xsZWN0aW9uSWR9XCIsIGNvbGxlY3Rpb25JZCkucmVwbGFjZShcIntrZXl9XCIsIGtleSk7XG4gICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgIGlmICh0eXBlb2YgcmVxdWlyZWQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJyZXF1aXJlZFwiXSA9IHJlcXVpcmVkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHhkZWZhdWx0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wiZGVmYXVsdFwiXSA9IHhkZWZhdWx0O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG5ld0tleSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcIm5ld0tleVwiXSA9IG5ld0tleTtcbiAgICB9XG4gICAgY29uc3QgdXJpID0gbmV3IFVSTCh0aGlzLmNsaWVudC5jb25maWcuZW5kcG9pbnQgKyBhcGlQYXRoKTtcbiAgICBjb25zdCBhcGlIZWFkZXJzID0ge1xuICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmNsaWVudC5jYWxsKFxuICAgICAgXCJwYXRjaFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG4gIC8qKlxuICAgICAgICogQ3JlYXRlIGVtYWlsIGF0dHJpYnV0ZVxuICAgICAgICpcbiAgICAgICAqIENyZWF0ZSBhbiBlbWFpbCBhdHRyaWJ1dGUuXG4gIFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhYmFzZUlkXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29sbGVjdGlvbklkXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlcXVpcmVkXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30geGRlZmF1bHRcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYXJyYXlcbiAgICAgICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgICAgICogQHJldHVybnMge1Byb21pc2U8TW9kZWxzLkF0dHJpYnV0ZUVtYWlsPn1cbiAgICAgICAqL1xuICBhc3luYyBjcmVhdGVFbWFpbEF0dHJpYnV0ZShkYXRhYmFzZUlkLCBjb2xsZWN0aW9uSWQsIGtleSwgcmVxdWlyZWQsIHhkZWZhdWx0LCBhcnJheSkge1xuICAgIGlmICh0eXBlb2YgZGF0YWJhc2VJZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiZGF0YWJhc2VJZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29sbGVjdGlvbklkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJjb2xsZWN0aW9uSWRcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGtleSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwia2V5XCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXF1aXJlZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwicmVxdWlyZWRcIicpO1xuICAgIH1cbiAgICBjb25zdCBhcGlQYXRoID0gXCIvZGF0YWJhc2VzL3tkYXRhYmFzZUlkfS9jb2xsZWN0aW9ucy97Y29sbGVjdGlvbklkfS9hdHRyaWJ1dGVzL2VtYWlsXCIucmVwbGFjZShcIntkYXRhYmFzZUlkfVwiLCBkYXRhYmFzZUlkKS5yZXBsYWNlKFwie2NvbGxlY3Rpb25JZH1cIiwgY29sbGVjdGlvbklkKTtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgaWYgKHR5cGVvZiBrZXkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJrZXlcIl0gPSBrZXk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVxdWlyZWQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJyZXF1aXJlZFwiXSA9IHJlcXVpcmVkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHhkZWZhdWx0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wiZGVmYXVsdFwiXSA9IHhkZWZhdWx0O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGFycmF5ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wiYXJyYXlcIl0gPSBhcnJheTtcbiAgICB9XG4gICAgY29uc3QgdXJpID0gbmV3IFVSTCh0aGlzLmNsaWVudC5jb25maWcuZW5kcG9pbnQgKyBhcGlQYXRoKTtcbiAgICBjb25zdCBhcGlIZWFkZXJzID0ge1xuICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmNsaWVudC5jYWxsKFxuICAgICAgXCJwb3N0XCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAgICAgKiBVcGRhdGUgZW1haWwgYXR0cmlidXRlXG4gICAgICAgKlxuICAgICAgICogVXBkYXRlIGFuIGVtYWlsIGF0dHJpYnV0ZS4gQ2hhbmdpbmcgdGhlIGBkZWZhdWx0YCB2YWx1ZSB3aWxsIG5vdCB1cGRhdGUgYWxyZWFkeSBleGlzdGluZyBkb2N1bWVudHMuXG4gIFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhYmFzZUlkXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29sbGVjdGlvbklkXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlcXVpcmVkXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30geGRlZmF1bHRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdLZXlcbiAgICAgICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgICAgICogQHJldHVybnMge1Byb21pc2U8TW9kZWxzLkF0dHJpYnV0ZUVtYWlsPn1cbiAgICAgICAqL1xuICBhc3luYyB1cGRhdGVFbWFpbEF0dHJpYnV0ZShkYXRhYmFzZUlkLCBjb2xsZWN0aW9uSWQsIGtleSwgcmVxdWlyZWQsIHhkZWZhdWx0LCBuZXdLZXkpIHtcbiAgICBpZiAodHlwZW9mIGRhdGFiYXNlSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImRhdGFiYXNlSWRcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbGxlY3Rpb25JZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiY29sbGVjdGlvbklkXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImtleVwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVxdWlyZWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcInJlcXVpcmVkXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB4ZGVmYXVsdCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwieGRlZmF1bHRcIicpO1xuICAgIH1cbiAgICBjb25zdCBhcGlQYXRoID0gXCIvZGF0YWJhc2VzL3tkYXRhYmFzZUlkfS9jb2xsZWN0aW9ucy97Y29sbGVjdGlvbklkfS9hdHRyaWJ1dGVzL2VtYWlsL3trZXl9XCIucmVwbGFjZShcIntkYXRhYmFzZUlkfVwiLCBkYXRhYmFzZUlkKS5yZXBsYWNlKFwie2NvbGxlY3Rpb25JZH1cIiwgY29sbGVjdGlvbklkKS5yZXBsYWNlKFwie2tleX1cIiwga2V5KTtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgaWYgKHR5cGVvZiByZXF1aXJlZCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcInJlcXVpcmVkXCJdID0gcmVxdWlyZWQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgeGRlZmF1bHQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJkZWZhdWx0XCJdID0geGRlZmF1bHQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbmV3S2V5ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wibmV3S2V5XCJdID0gbmV3S2V5O1xuICAgIH1cbiAgICBjb25zdCB1cmkgPSBuZXcgVVJMKHRoaXMuY2xpZW50LmNvbmZpZy5lbmRwb2ludCArIGFwaVBhdGgpO1xuICAgIGNvbnN0IGFwaUhlYWRlcnMgPSB7XG4gICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuY2xpZW50LmNhbGwoXG4gICAgICBcInBhdGNoXCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAgICAgKiBDcmVhdGUgZW51bSBhdHRyaWJ1dGVcbiAgICAgICAqXG4gICAgICAgKiBDcmVhdGUgYW4gZW51bWVyYXRpb24gYXR0cmlidXRlLiBUaGUgYGVsZW1lbnRzYCBwYXJhbSBhY3RzIGFzIGEgd2hpdGUtbGlzdCBvZiBhY2NlcHRlZCB2YWx1ZXMgZm9yIHRoaXMgYXR0cmlidXRlLiBcbiAgXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGFiYXNlSWRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb2xsZWN0aW9uSWRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nW119IGVsZW1lbnRzXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlcXVpcmVkXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30geGRlZmF1bHRcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYXJyYXlcbiAgICAgICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgICAgICogQHJldHVybnMge1Byb21pc2U8TW9kZWxzLkF0dHJpYnV0ZUVudW0+fVxuICAgICAgICovXG4gIGFzeW5jIGNyZWF0ZUVudW1BdHRyaWJ1dGUoZGF0YWJhc2VJZCwgY29sbGVjdGlvbklkLCBrZXksIGVsZW1lbnRzLCByZXF1aXJlZCwgeGRlZmF1bHQsIGFycmF5KSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhYmFzZUlkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJkYXRhYmFzZUlkXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb2xsZWN0aW9uSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImNvbGxlY3Rpb25JZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Yga2V5ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJrZXlcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGVsZW1lbnRzID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJlbGVtZW50c1wiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVxdWlyZWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcInJlcXVpcmVkXCInKTtcbiAgICB9XG4gICAgY29uc3QgYXBpUGF0aCA9IFwiL2RhdGFiYXNlcy97ZGF0YWJhc2VJZH0vY29sbGVjdGlvbnMve2NvbGxlY3Rpb25JZH0vYXR0cmlidXRlcy9lbnVtXCIucmVwbGFjZShcIntkYXRhYmFzZUlkfVwiLCBkYXRhYmFzZUlkKS5yZXBsYWNlKFwie2NvbGxlY3Rpb25JZH1cIiwgY29sbGVjdGlvbklkKTtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgaWYgKHR5cGVvZiBrZXkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJrZXlcIl0gPSBrZXk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZWxlbWVudHMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJlbGVtZW50c1wiXSA9IGVsZW1lbnRzO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlcXVpcmVkICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wicmVxdWlyZWRcIl0gPSByZXF1aXJlZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB4ZGVmYXVsdCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImRlZmF1bHRcIl0gPSB4ZGVmYXVsdDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBhcnJheSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImFycmF5XCJdID0gYXJyYXk7XG4gICAgfVxuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwicG9zdFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG4gIC8qKlxuICAgICAgICogVXBkYXRlIGVudW0gYXR0cmlidXRlXG4gICAgICAgKlxuICAgICAgICogVXBkYXRlIGFuIGVudW0gYXR0cmlidXRlLiBDaGFuZ2luZyB0aGUgYGRlZmF1bHRgIHZhbHVlIHdpbGwgbm90IHVwZGF0ZSBhbHJlYWR5IGV4aXN0aW5nIGRvY3VtZW50cy5cbiAgXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGFiYXNlSWRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb2xsZWN0aW9uSWRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nW119IGVsZW1lbnRzXG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlcXVpcmVkXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30geGRlZmF1bHRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdLZXlcbiAgICAgICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgICAgICogQHJldHVybnMge1Byb21pc2U8TW9kZWxzLkF0dHJpYnV0ZUVudW0+fVxuICAgICAgICovXG4gIGFzeW5jIHVwZGF0ZUVudW1BdHRyaWJ1dGUoZGF0YWJhc2VJZCwgY29sbGVjdGlvbklkLCBrZXksIGVsZW1lbnRzLCByZXF1aXJlZCwgeGRlZmF1bHQsIG5ld0tleSkge1xuICAgIGlmICh0eXBlb2YgZGF0YWJhc2VJZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiZGF0YWJhc2VJZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29sbGVjdGlvbklkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJjb2xsZWN0aW9uSWRcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGtleSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwia2V5XCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbGVtZW50cyA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiZWxlbWVudHNcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlcXVpcmVkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJyZXF1aXJlZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgeGRlZmF1bHQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcInhkZWZhdWx0XCInKTtcbiAgICB9XG4gICAgY29uc3QgYXBpUGF0aCA9IFwiL2RhdGFiYXNlcy97ZGF0YWJhc2VJZH0vY29sbGVjdGlvbnMve2NvbGxlY3Rpb25JZH0vYXR0cmlidXRlcy9lbnVtL3trZXl9XCIucmVwbGFjZShcIntkYXRhYmFzZUlkfVwiLCBkYXRhYmFzZUlkKS5yZXBsYWNlKFwie2NvbGxlY3Rpb25JZH1cIiwgY29sbGVjdGlvbklkKS5yZXBsYWNlKFwie2tleX1cIiwga2V5KTtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgaWYgKHR5cGVvZiBlbGVtZW50cyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImVsZW1lbnRzXCJdID0gZWxlbWVudHM7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVxdWlyZWQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJyZXF1aXJlZFwiXSA9IHJlcXVpcmVkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHhkZWZhdWx0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wiZGVmYXVsdFwiXSA9IHhkZWZhdWx0O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG5ld0tleSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcIm5ld0tleVwiXSA9IG5ld0tleTtcbiAgICB9XG4gICAgY29uc3QgdXJpID0gbmV3IFVSTCh0aGlzLmNsaWVudC5jb25maWcuZW5kcG9pbnQgKyBhcGlQYXRoKTtcbiAgICBjb25zdCBhcGlIZWFkZXJzID0ge1xuICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmNsaWVudC5jYWxsKFxuICAgICAgXCJwYXRjaFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG4gIC8qKlxuICAgICAgICogQ3JlYXRlIGZsb2F0IGF0dHJpYnV0ZVxuICAgICAgICpcbiAgICAgICAqIENyZWF0ZSBhIGZsb2F0IGF0dHJpYnV0ZS4gT3B0aW9uYWxseSwgbWluaW11bSBhbmQgbWF4aW11bSB2YWx1ZXMgY2FuIGJlIHByb3ZpZGVkLlxuICBcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YWJhc2VJZFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbGxlY3Rpb25JZFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgICAgICogQHBhcmFtIHtib29sZWFufSByZXF1aXJlZFxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG1pblxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG1heFxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHhkZWZhdWx0XG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGFycmF5XG4gICAgICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICAgICAqIEByZXR1cm5zIHtQcm9taXNlPE1vZGVscy5BdHRyaWJ1dGVGbG9hdD59XG4gICAgICAgKi9cbiAgYXN5bmMgY3JlYXRlRmxvYXRBdHRyaWJ1dGUoZGF0YWJhc2VJZCwgY29sbGVjdGlvbklkLCBrZXksIHJlcXVpcmVkLCBtaW4sIG1heCwgeGRlZmF1bHQsIGFycmF5KSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhYmFzZUlkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJkYXRhYmFzZUlkXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb2xsZWN0aW9uSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImNvbGxlY3Rpb25JZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Yga2V5ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJrZXlcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlcXVpcmVkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJyZXF1aXJlZFwiJyk7XG4gICAgfVxuICAgIGNvbnN0IGFwaVBhdGggPSBcIi9kYXRhYmFzZXMve2RhdGFiYXNlSWR9L2NvbGxlY3Rpb25zL3tjb2xsZWN0aW9uSWR9L2F0dHJpYnV0ZXMvZmxvYXRcIi5yZXBsYWNlKFwie2RhdGFiYXNlSWR9XCIsIGRhdGFiYXNlSWQpLnJlcGxhY2UoXCJ7Y29sbGVjdGlvbklkfVwiLCBjb2xsZWN0aW9uSWQpO1xuICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICBpZiAodHlwZW9mIGtleSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImtleVwiXSA9IGtleTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXF1aXJlZCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcInJlcXVpcmVkXCJdID0gcmVxdWlyZWQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbWluICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wibWluXCJdID0gbWluO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG1heCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcIm1heFwiXSA9IG1heDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB4ZGVmYXVsdCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImRlZmF1bHRcIl0gPSB4ZGVmYXVsdDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBhcnJheSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImFycmF5XCJdID0gYXJyYXk7XG4gICAgfVxuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwicG9zdFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG4gIC8qKlxuICAgICAgICogVXBkYXRlIGZsb2F0IGF0dHJpYnV0ZVxuICAgICAgICpcbiAgICAgICAqIFVwZGF0ZSBhIGZsb2F0IGF0dHJpYnV0ZS4gQ2hhbmdpbmcgdGhlIGBkZWZhdWx0YCB2YWx1ZSB3aWxsIG5vdCB1cGRhdGUgYWxyZWFkeSBleGlzdGluZyBkb2N1bWVudHMuXG4gIFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhYmFzZUlkXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29sbGVjdGlvbklkXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlcXVpcmVkXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gbWluXG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gbWF4XG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0geGRlZmF1bHRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdLZXlcbiAgICAgICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgICAgICogQHJldHVybnMge1Byb21pc2U8TW9kZWxzLkF0dHJpYnV0ZUZsb2F0Pn1cbiAgICAgICAqL1xuICBhc3luYyB1cGRhdGVGbG9hdEF0dHJpYnV0ZShkYXRhYmFzZUlkLCBjb2xsZWN0aW9uSWQsIGtleSwgcmVxdWlyZWQsIG1pbiwgbWF4LCB4ZGVmYXVsdCwgbmV3S2V5KSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhYmFzZUlkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJkYXRhYmFzZUlkXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb2xsZWN0aW9uSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImNvbGxlY3Rpb25JZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Yga2V5ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJrZXlcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlcXVpcmVkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJyZXF1aXJlZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbWluID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJtaW5cIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG1heCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwibWF4XCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB4ZGVmYXVsdCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwieGRlZmF1bHRcIicpO1xuICAgIH1cbiAgICBjb25zdCBhcGlQYXRoID0gXCIvZGF0YWJhc2VzL3tkYXRhYmFzZUlkfS9jb2xsZWN0aW9ucy97Y29sbGVjdGlvbklkfS9hdHRyaWJ1dGVzL2Zsb2F0L3trZXl9XCIucmVwbGFjZShcIntkYXRhYmFzZUlkfVwiLCBkYXRhYmFzZUlkKS5yZXBsYWNlKFwie2NvbGxlY3Rpb25JZH1cIiwgY29sbGVjdGlvbklkKS5yZXBsYWNlKFwie2tleX1cIiwga2V5KTtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgaWYgKHR5cGVvZiByZXF1aXJlZCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcInJlcXVpcmVkXCJdID0gcmVxdWlyZWQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbWluICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wibWluXCJdID0gbWluO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG1heCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcIm1heFwiXSA9IG1heDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB4ZGVmYXVsdCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImRlZmF1bHRcIl0gPSB4ZGVmYXVsdDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBuZXdLZXkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJuZXdLZXlcIl0gPSBuZXdLZXk7XG4gICAgfVxuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwicGF0Y2hcIixcbiAgICAgIHVyaSxcbiAgICAgIGFwaUhlYWRlcnMsXG4gICAgICBwYXlsb2FkXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICAgICAqIENyZWF0ZSBpbnRlZ2VyIGF0dHJpYnV0ZVxuICAgICAgICpcbiAgICAgICAqIENyZWF0ZSBhbiBpbnRlZ2VyIGF0dHJpYnV0ZS4gT3B0aW9uYWxseSwgbWluaW11bSBhbmQgbWF4aW11bSB2YWx1ZXMgY2FuIGJlIHByb3ZpZGVkLlxuICBcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YWJhc2VJZFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbGxlY3Rpb25JZFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgICAgICogQHBhcmFtIHtib29sZWFufSByZXF1aXJlZFxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG1pblxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IG1heFxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHhkZWZhdWx0XG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGFycmF5XG4gICAgICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICAgICAqIEByZXR1cm5zIHtQcm9taXNlPE1vZGVscy5BdHRyaWJ1dGVJbnRlZ2VyPn1cbiAgICAgICAqL1xuICBhc3luYyBjcmVhdGVJbnRlZ2VyQXR0cmlidXRlKGRhdGFiYXNlSWQsIGNvbGxlY3Rpb25JZCwga2V5LCByZXF1aXJlZCwgbWluLCBtYXgsIHhkZWZhdWx0LCBhcnJheSkge1xuICAgIGlmICh0eXBlb2YgZGF0YWJhc2VJZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiZGF0YWJhc2VJZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29sbGVjdGlvbklkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJjb2xsZWN0aW9uSWRcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGtleSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwia2V5XCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXF1aXJlZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwicmVxdWlyZWRcIicpO1xuICAgIH1cbiAgICBjb25zdCBhcGlQYXRoID0gXCIvZGF0YWJhc2VzL3tkYXRhYmFzZUlkfS9jb2xsZWN0aW9ucy97Y29sbGVjdGlvbklkfS9hdHRyaWJ1dGVzL2ludGVnZXJcIi5yZXBsYWNlKFwie2RhdGFiYXNlSWR9XCIsIGRhdGFiYXNlSWQpLnJlcGxhY2UoXCJ7Y29sbGVjdGlvbklkfVwiLCBjb2xsZWN0aW9uSWQpO1xuICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICBpZiAodHlwZW9mIGtleSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImtleVwiXSA9IGtleTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXF1aXJlZCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcInJlcXVpcmVkXCJdID0gcmVxdWlyZWQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbWluICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wibWluXCJdID0gbWluO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG1heCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcIm1heFwiXSA9IG1heDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB4ZGVmYXVsdCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImRlZmF1bHRcIl0gPSB4ZGVmYXVsdDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBhcnJheSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImFycmF5XCJdID0gYXJyYXk7XG4gICAgfVxuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwicG9zdFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG4gIC8qKlxuICAgICAgICogVXBkYXRlIGludGVnZXIgYXR0cmlidXRlXG4gICAgICAgKlxuICAgICAgICogVXBkYXRlIGFuIGludGVnZXIgYXR0cmlidXRlLiBDaGFuZ2luZyB0aGUgYGRlZmF1bHRgIHZhbHVlIHdpbGwgbm90IHVwZGF0ZSBhbHJlYWR5IGV4aXN0aW5nIGRvY3VtZW50cy5cbiAgXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGFiYXNlSWRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb2xsZWN0aW9uSWRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVxdWlyZWRcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtaW5cbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBtYXhcbiAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSB4ZGVmYXVsdFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5ld0tleVxuICAgICAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxNb2RlbHMuQXR0cmlidXRlSW50ZWdlcj59XG4gICAgICAgKi9cbiAgYXN5bmMgdXBkYXRlSW50ZWdlckF0dHJpYnV0ZShkYXRhYmFzZUlkLCBjb2xsZWN0aW9uSWQsIGtleSwgcmVxdWlyZWQsIG1pbiwgbWF4LCB4ZGVmYXVsdCwgbmV3S2V5KSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhYmFzZUlkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJkYXRhYmFzZUlkXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb2xsZWN0aW9uSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImNvbGxlY3Rpb25JZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Yga2V5ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJrZXlcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlcXVpcmVkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJyZXF1aXJlZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbWluID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJtaW5cIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG1heCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwibWF4XCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB4ZGVmYXVsdCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwieGRlZmF1bHRcIicpO1xuICAgIH1cbiAgICBjb25zdCBhcGlQYXRoID0gXCIvZGF0YWJhc2VzL3tkYXRhYmFzZUlkfS9jb2xsZWN0aW9ucy97Y29sbGVjdGlvbklkfS9hdHRyaWJ1dGVzL2ludGVnZXIve2tleX1cIi5yZXBsYWNlKFwie2RhdGFiYXNlSWR9XCIsIGRhdGFiYXNlSWQpLnJlcGxhY2UoXCJ7Y29sbGVjdGlvbklkfVwiLCBjb2xsZWN0aW9uSWQpLnJlcGxhY2UoXCJ7a2V5fVwiLCBrZXkpO1xuICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICBpZiAodHlwZW9mIHJlcXVpcmVkICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wicmVxdWlyZWRcIl0gPSByZXF1aXJlZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBtaW4gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJtaW5cIl0gPSBtaW47XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbWF4ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wibWF4XCJdID0gbWF4O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHhkZWZhdWx0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wiZGVmYXVsdFwiXSA9IHhkZWZhdWx0O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG5ld0tleSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcIm5ld0tleVwiXSA9IG5ld0tleTtcbiAgICB9XG4gICAgY29uc3QgdXJpID0gbmV3IFVSTCh0aGlzLmNsaWVudC5jb25maWcuZW5kcG9pbnQgKyBhcGlQYXRoKTtcbiAgICBjb25zdCBhcGlIZWFkZXJzID0ge1xuICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmNsaWVudC5jYWxsKFxuICAgICAgXCJwYXRjaFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG4gIC8qKlxuICAgICAgICogQ3JlYXRlIElQIGFkZHJlc3MgYXR0cmlidXRlXG4gICAgICAgKlxuICAgICAgICogQ3JlYXRlIElQIGFkZHJlc3MgYXR0cmlidXRlLlxuICBcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YWJhc2VJZFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbGxlY3Rpb25JZFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgICAgICogQHBhcmFtIHtib29sZWFufSByZXF1aXJlZFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHhkZWZhdWx0XG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IGFycmF5XG4gICAgICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICAgICAqIEByZXR1cm5zIHtQcm9taXNlPE1vZGVscy5BdHRyaWJ1dGVJcD59XG4gICAgICAgKi9cbiAgYXN5bmMgY3JlYXRlSXBBdHRyaWJ1dGUoZGF0YWJhc2VJZCwgY29sbGVjdGlvbklkLCBrZXksIHJlcXVpcmVkLCB4ZGVmYXVsdCwgYXJyYXkpIHtcbiAgICBpZiAodHlwZW9mIGRhdGFiYXNlSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImRhdGFiYXNlSWRcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbGxlY3Rpb25JZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiY29sbGVjdGlvbklkXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImtleVwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVxdWlyZWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcInJlcXVpcmVkXCInKTtcbiAgICB9XG4gICAgY29uc3QgYXBpUGF0aCA9IFwiL2RhdGFiYXNlcy97ZGF0YWJhc2VJZH0vY29sbGVjdGlvbnMve2NvbGxlY3Rpb25JZH0vYXR0cmlidXRlcy9pcFwiLnJlcGxhY2UoXCJ7ZGF0YWJhc2VJZH1cIiwgZGF0YWJhc2VJZCkucmVwbGFjZShcIntjb2xsZWN0aW9uSWR9XCIsIGNvbGxlY3Rpb25JZCk7XG4gICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgIGlmICh0eXBlb2Yga2V5ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wia2V5XCJdID0ga2V5O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlcXVpcmVkICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wicmVxdWlyZWRcIl0gPSByZXF1aXJlZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB4ZGVmYXVsdCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImRlZmF1bHRcIl0gPSB4ZGVmYXVsdDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBhcnJheSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImFycmF5XCJdID0gYXJyYXk7XG4gICAgfVxuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwicG9zdFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG4gIC8qKlxuICAgICAgICogVXBkYXRlIElQIGFkZHJlc3MgYXR0cmlidXRlXG4gICAgICAgKlxuICAgICAgICogVXBkYXRlIGFuIGlwIGF0dHJpYnV0ZS4gQ2hhbmdpbmcgdGhlIGBkZWZhdWx0YCB2YWx1ZSB3aWxsIG5vdCB1cGRhdGUgYWxyZWFkeSBleGlzdGluZyBkb2N1bWVudHMuXG4gIFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhYmFzZUlkXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29sbGVjdGlvbklkXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlcXVpcmVkXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30geGRlZmF1bHRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdLZXlcbiAgICAgICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgICAgICogQHJldHVybnMge1Byb21pc2U8TW9kZWxzLkF0dHJpYnV0ZUlwPn1cbiAgICAgICAqL1xuICBhc3luYyB1cGRhdGVJcEF0dHJpYnV0ZShkYXRhYmFzZUlkLCBjb2xsZWN0aW9uSWQsIGtleSwgcmVxdWlyZWQsIHhkZWZhdWx0LCBuZXdLZXkpIHtcbiAgICBpZiAodHlwZW9mIGRhdGFiYXNlSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImRhdGFiYXNlSWRcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbGxlY3Rpb25JZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiY29sbGVjdGlvbklkXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImtleVwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVxdWlyZWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcInJlcXVpcmVkXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB4ZGVmYXVsdCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwieGRlZmF1bHRcIicpO1xuICAgIH1cbiAgICBjb25zdCBhcGlQYXRoID0gXCIvZGF0YWJhc2VzL3tkYXRhYmFzZUlkfS9jb2xsZWN0aW9ucy97Y29sbGVjdGlvbklkfS9hdHRyaWJ1dGVzL2lwL3trZXl9XCIucmVwbGFjZShcIntkYXRhYmFzZUlkfVwiLCBkYXRhYmFzZUlkKS5yZXBsYWNlKFwie2NvbGxlY3Rpb25JZH1cIiwgY29sbGVjdGlvbklkKS5yZXBsYWNlKFwie2tleX1cIiwga2V5KTtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgaWYgKHR5cGVvZiByZXF1aXJlZCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcInJlcXVpcmVkXCJdID0gcmVxdWlyZWQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgeGRlZmF1bHQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJkZWZhdWx0XCJdID0geGRlZmF1bHQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbmV3S2V5ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wibmV3S2V5XCJdID0gbmV3S2V5O1xuICAgIH1cbiAgICBjb25zdCB1cmkgPSBuZXcgVVJMKHRoaXMuY2xpZW50LmNvbmZpZy5lbmRwb2ludCArIGFwaVBhdGgpO1xuICAgIGNvbnN0IGFwaUhlYWRlcnMgPSB7XG4gICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuY2xpZW50LmNhbGwoXG4gICAgICBcInBhdGNoXCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAgICAgKiBDcmVhdGUgcmVsYXRpb25zaGlwIGF0dHJpYnV0ZVxuICAgICAgICpcbiAgICAgICAqIENyZWF0ZSByZWxhdGlvbnNoaXAgYXR0cmlidXRlLiBbTGVhcm4gbW9yZSBhYm91dCByZWxhdGlvbnNoaXAgYXR0cmlidXRlc10oaHR0cHM6Ly9hcHB3cml0ZS5pby9kb2NzL2RhdGFiYXNlcy1yZWxhdGlvbnNoaXBzI3JlbGF0aW9uc2hpcC1hdHRyaWJ1dGVzKS5cbiAgXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGFiYXNlSWRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb2xsZWN0aW9uSWRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSByZWxhdGVkQ29sbGVjdGlvbklkXG4gICAgICAgKiBAcGFyYW0ge1JlbGF0aW9uc2hpcFR5cGV9IHR5cGVcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gdHdvV2F5XG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHdvV2F5S2V5XG4gICAgICAgKiBAcGFyYW0ge1JlbGF0aW9uTXV0YXRlfSBvbkRlbGV0ZVxuICAgICAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxNb2RlbHMuQXR0cmlidXRlUmVsYXRpb25zaGlwPn1cbiAgICAgICAqL1xuICBhc3luYyBjcmVhdGVSZWxhdGlvbnNoaXBBdHRyaWJ1dGUoZGF0YWJhc2VJZCwgY29sbGVjdGlvbklkLCByZWxhdGVkQ29sbGVjdGlvbklkLCB0eXBlLCB0d29XYXksIGtleSwgdHdvV2F5S2V5LCBvbkRlbGV0ZSkge1xuICAgIGlmICh0eXBlb2YgZGF0YWJhc2VJZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiZGF0YWJhc2VJZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29sbGVjdGlvbklkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJjb2xsZWN0aW9uSWRcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlbGF0ZWRDb2xsZWN0aW9uSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcInJlbGF0ZWRDb2xsZWN0aW9uSWRcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHR5cGUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcInR5cGVcIicpO1xuICAgIH1cbiAgICBjb25zdCBhcGlQYXRoID0gXCIvZGF0YWJhc2VzL3tkYXRhYmFzZUlkfS9jb2xsZWN0aW9ucy97Y29sbGVjdGlvbklkfS9hdHRyaWJ1dGVzL3JlbGF0aW9uc2hpcFwiLnJlcGxhY2UoXCJ7ZGF0YWJhc2VJZH1cIiwgZGF0YWJhc2VJZCkucmVwbGFjZShcIntjb2xsZWN0aW9uSWR9XCIsIGNvbGxlY3Rpb25JZCk7XG4gICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgIGlmICh0eXBlb2YgcmVsYXRlZENvbGxlY3Rpb25JZCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcInJlbGF0ZWRDb2xsZWN0aW9uSWRcIl0gPSByZWxhdGVkQ29sbGVjdGlvbklkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHR5cGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJ0eXBlXCJdID0gdHlwZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB0d29XYXkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJ0d29XYXlcIl0gPSB0d29XYXk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Yga2V5ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wia2V5XCJdID0ga2V5O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHR3b1dheUtleSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcInR3b1dheUtleVwiXSA9IHR3b1dheUtleTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvbkRlbGV0ZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcIm9uRGVsZXRlXCJdID0gb25EZWxldGU7XG4gICAgfVxuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwicG9zdFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG4gIC8qKlxuICAgICAgICogQ3JlYXRlIHN0cmluZyBhdHRyaWJ1dGVcbiAgICAgICAqXG4gICAgICAgKiBDcmVhdGUgYSBzdHJpbmcgYXR0cmlidXRlLlxuICBcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YWJhc2VJZFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbGxlY3Rpb25JZFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgICAgICogQHBhcmFtIHtudW1iZXJ9IHNpemVcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVxdWlyZWRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB4ZGVmYXVsdFxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBhcnJheVxuICAgICAgICogQHBhcmFtIHtib29sZWFufSBlbmNyeXB0XG4gICAgICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICAgICAqIEByZXR1cm5zIHtQcm9taXNlPE1vZGVscy5BdHRyaWJ1dGVTdHJpbmc+fVxuICAgICAgICovXG4gIGFzeW5jIGNyZWF0ZVN0cmluZ0F0dHJpYnV0ZShkYXRhYmFzZUlkLCBjb2xsZWN0aW9uSWQsIGtleSwgc2l6ZSwgcmVxdWlyZWQsIHhkZWZhdWx0LCBhcnJheSwgZW5jcnlwdCkge1xuICAgIGlmICh0eXBlb2YgZGF0YWJhc2VJZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiZGF0YWJhc2VJZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29sbGVjdGlvbklkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJjb2xsZWN0aW9uSWRcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGtleSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwia2V5XCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzaXplID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJzaXplXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXF1aXJlZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwicmVxdWlyZWRcIicpO1xuICAgIH1cbiAgICBjb25zdCBhcGlQYXRoID0gXCIvZGF0YWJhc2VzL3tkYXRhYmFzZUlkfS9jb2xsZWN0aW9ucy97Y29sbGVjdGlvbklkfS9hdHRyaWJ1dGVzL3N0cmluZ1wiLnJlcGxhY2UoXCJ7ZGF0YWJhc2VJZH1cIiwgZGF0YWJhc2VJZCkucmVwbGFjZShcIntjb2xsZWN0aW9uSWR9XCIsIGNvbGxlY3Rpb25JZCk7XG4gICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgIGlmICh0eXBlb2Yga2V5ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wia2V5XCJdID0ga2V5O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHNpemUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJzaXplXCJdID0gc2l6ZTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiByZXF1aXJlZCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcInJlcXVpcmVkXCJdID0gcmVxdWlyZWQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgeGRlZmF1bHQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJkZWZhdWx0XCJdID0geGRlZmF1bHQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgYXJyYXkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJhcnJheVwiXSA9IGFycmF5O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGVuY3J5cHQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJlbmNyeXB0XCJdID0gZW5jcnlwdDtcbiAgICB9XG4gICAgY29uc3QgdXJpID0gbmV3IFVSTCh0aGlzLmNsaWVudC5jb25maWcuZW5kcG9pbnQgKyBhcGlQYXRoKTtcbiAgICBjb25zdCBhcGlIZWFkZXJzID0ge1xuICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmNsaWVudC5jYWxsKFxuICAgICAgXCJwb3N0XCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAgICAgKiBVcGRhdGUgc3RyaW5nIGF0dHJpYnV0ZVxuICAgICAgICpcbiAgICAgICAqIFVwZGF0ZSBhIHN0cmluZyBhdHRyaWJ1dGUuIENoYW5naW5nIHRoZSBgZGVmYXVsdGAgdmFsdWUgd2lsbCBub3QgdXBkYXRlIGFscmVhZHkgZXhpc3RpbmcgZG9jdW1lbnRzLlxuICBcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YWJhc2VJZFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbGxlY3Rpb25JZFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgICAgICogQHBhcmFtIHtib29sZWFufSByZXF1aXJlZFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IHhkZWZhdWx0XG4gICAgICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZVxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5ld0tleVxuICAgICAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxNb2RlbHMuQXR0cmlidXRlU3RyaW5nPn1cbiAgICAgICAqL1xuICBhc3luYyB1cGRhdGVTdHJpbmdBdHRyaWJ1dGUoZGF0YWJhc2VJZCwgY29sbGVjdGlvbklkLCBrZXksIHJlcXVpcmVkLCB4ZGVmYXVsdCwgc2l6ZSwgbmV3S2V5KSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhYmFzZUlkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJkYXRhYmFzZUlkXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb2xsZWN0aW9uSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImNvbGxlY3Rpb25JZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Yga2V5ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJrZXlcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlcXVpcmVkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJyZXF1aXJlZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgeGRlZmF1bHQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcInhkZWZhdWx0XCInKTtcbiAgICB9XG4gICAgY29uc3QgYXBpUGF0aCA9IFwiL2RhdGFiYXNlcy97ZGF0YWJhc2VJZH0vY29sbGVjdGlvbnMve2NvbGxlY3Rpb25JZH0vYXR0cmlidXRlcy9zdHJpbmcve2tleX1cIi5yZXBsYWNlKFwie2RhdGFiYXNlSWR9XCIsIGRhdGFiYXNlSWQpLnJlcGxhY2UoXCJ7Y29sbGVjdGlvbklkfVwiLCBjb2xsZWN0aW9uSWQpLnJlcGxhY2UoXCJ7a2V5fVwiLCBrZXkpO1xuICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICBpZiAodHlwZW9mIHJlcXVpcmVkICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wicmVxdWlyZWRcIl0gPSByZXF1aXJlZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB4ZGVmYXVsdCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImRlZmF1bHRcIl0gPSB4ZGVmYXVsdDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzaXplICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wic2l6ZVwiXSA9IHNpemU7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbmV3S2V5ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wibmV3S2V5XCJdID0gbmV3S2V5O1xuICAgIH1cbiAgICBjb25zdCB1cmkgPSBuZXcgVVJMKHRoaXMuY2xpZW50LmNvbmZpZy5lbmRwb2ludCArIGFwaVBhdGgpO1xuICAgIGNvbnN0IGFwaUhlYWRlcnMgPSB7XG4gICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuY2xpZW50LmNhbGwoXG4gICAgICBcInBhdGNoXCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAgICAgKiBDcmVhdGUgVVJMIGF0dHJpYnV0ZVxuICAgICAgICpcbiAgICAgICAqIENyZWF0ZSBhIFVSTCBhdHRyaWJ1dGUuXG4gIFxuICAgICAgICpcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhYmFzZUlkXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gY29sbGVjdGlvbklkXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30ga2V5XG4gICAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IHJlcXVpcmVkXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30geGRlZmF1bHRcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gYXJyYXlcbiAgICAgICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgICAgICogQHJldHVybnMge1Byb21pc2U8TW9kZWxzLkF0dHJpYnV0ZVVybD59XG4gICAgICAgKi9cbiAgYXN5bmMgY3JlYXRlVXJsQXR0cmlidXRlKGRhdGFiYXNlSWQsIGNvbGxlY3Rpb25JZCwga2V5LCByZXF1aXJlZCwgeGRlZmF1bHQsIGFycmF5KSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhYmFzZUlkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJkYXRhYmFzZUlkXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb2xsZWN0aW9uSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImNvbGxlY3Rpb25JZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Yga2V5ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJrZXlcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlcXVpcmVkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJyZXF1aXJlZFwiJyk7XG4gICAgfVxuICAgIGNvbnN0IGFwaVBhdGggPSBcIi9kYXRhYmFzZXMve2RhdGFiYXNlSWR9L2NvbGxlY3Rpb25zL3tjb2xsZWN0aW9uSWR9L2F0dHJpYnV0ZXMvdXJsXCIucmVwbGFjZShcIntkYXRhYmFzZUlkfVwiLCBkYXRhYmFzZUlkKS5yZXBsYWNlKFwie2NvbGxlY3Rpb25JZH1cIiwgY29sbGVjdGlvbklkKTtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgaWYgKHR5cGVvZiBrZXkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJrZXlcIl0gPSBrZXk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgcmVxdWlyZWQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJyZXF1aXJlZFwiXSA9IHJlcXVpcmVkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHhkZWZhdWx0ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wiZGVmYXVsdFwiXSA9IHhkZWZhdWx0O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGFycmF5ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wiYXJyYXlcIl0gPSBhcnJheTtcbiAgICB9XG4gICAgY29uc3QgdXJpID0gbmV3IFVSTCh0aGlzLmNsaWVudC5jb25maWcuZW5kcG9pbnQgKyBhcGlQYXRoKTtcbiAgICBjb25zdCBhcGlIZWFkZXJzID0ge1xuICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmNsaWVudC5jYWxsKFxuICAgICAgXCJwb3N0XCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAgICAgKiBVcGRhdGUgVVJMIGF0dHJpYnV0ZVxuICAgICAgICpcbiAgICAgICAqIFVwZGF0ZSBhbiB1cmwgYXR0cmlidXRlLiBDaGFuZ2luZyB0aGUgYGRlZmF1bHRgIHZhbHVlIHdpbGwgbm90IHVwZGF0ZSBhbHJlYWR5IGV4aXN0aW5nIGRvY3VtZW50cy5cbiAgXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGFiYXNlSWRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb2xsZWN0aW9uSWRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcmVxdWlyZWRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSB4ZGVmYXVsdFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IG5ld0tleVxuICAgICAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxNb2RlbHMuQXR0cmlidXRlVXJsPn1cbiAgICAgICAqL1xuICBhc3luYyB1cGRhdGVVcmxBdHRyaWJ1dGUoZGF0YWJhc2VJZCwgY29sbGVjdGlvbklkLCBrZXksIHJlcXVpcmVkLCB4ZGVmYXVsdCwgbmV3S2V5KSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhYmFzZUlkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJkYXRhYmFzZUlkXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb2xsZWN0aW9uSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImNvbGxlY3Rpb25JZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Yga2V5ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJrZXlcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHJlcXVpcmVkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJyZXF1aXJlZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgeGRlZmF1bHQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcInhkZWZhdWx0XCInKTtcbiAgICB9XG4gICAgY29uc3QgYXBpUGF0aCA9IFwiL2RhdGFiYXNlcy97ZGF0YWJhc2VJZH0vY29sbGVjdGlvbnMve2NvbGxlY3Rpb25JZH0vYXR0cmlidXRlcy91cmwve2tleX1cIi5yZXBsYWNlKFwie2RhdGFiYXNlSWR9XCIsIGRhdGFiYXNlSWQpLnJlcGxhY2UoXCJ7Y29sbGVjdGlvbklkfVwiLCBjb2xsZWN0aW9uSWQpLnJlcGxhY2UoXCJ7a2V5fVwiLCBrZXkpO1xuICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICBpZiAodHlwZW9mIHJlcXVpcmVkICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wicmVxdWlyZWRcIl0gPSByZXF1aXJlZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB4ZGVmYXVsdCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImRlZmF1bHRcIl0gPSB4ZGVmYXVsdDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBuZXdLZXkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJuZXdLZXlcIl0gPSBuZXdLZXk7XG4gICAgfVxuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwicGF0Y2hcIixcbiAgICAgIHVyaSxcbiAgICAgIGFwaUhlYWRlcnMsXG4gICAgICBwYXlsb2FkXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogR2V0IGF0dHJpYnV0ZVxuICAgKlxuICAgKiBHZXQgYXR0cmlidXRlIGJ5IElELlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YWJhc2VJZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29sbGVjdGlvbklkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPHt9Pn1cbiAgICovXG4gIGFzeW5jIGdldEF0dHJpYnV0ZShkYXRhYmFzZUlkLCBjb2xsZWN0aW9uSWQsIGtleSkge1xuICAgIGlmICh0eXBlb2YgZGF0YWJhc2VJZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiZGF0YWJhc2VJZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29sbGVjdGlvbklkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJjb2xsZWN0aW9uSWRcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGtleSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwia2V5XCInKTtcbiAgICB9XG4gICAgY29uc3QgYXBpUGF0aCA9IFwiL2RhdGFiYXNlcy97ZGF0YWJhc2VJZH0vY29sbGVjdGlvbnMve2NvbGxlY3Rpb25JZH0vYXR0cmlidXRlcy97a2V5fVwiLnJlcGxhY2UoXCJ7ZGF0YWJhc2VJZH1cIiwgZGF0YWJhc2VJZCkucmVwbGFjZShcIntjb2xsZWN0aW9uSWR9XCIsIGNvbGxlY3Rpb25JZCkucmVwbGFjZShcIntrZXl9XCIsIGtleSk7XG4gICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwiZ2V0XCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZSBhdHRyaWJ1dGVcbiAgICpcbiAgICogRGVsZXRlcyBhbiBhdHRyaWJ1dGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhYmFzZUlkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb2xsZWN0aW9uSWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICogQHJldHVybnMge1Byb21pc2U8e30+fVxuICAgKi9cbiAgYXN5bmMgZGVsZXRlQXR0cmlidXRlKGRhdGFiYXNlSWQsIGNvbGxlY3Rpb25JZCwga2V5KSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhYmFzZUlkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJkYXRhYmFzZUlkXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb2xsZWN0aW9uSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImNvbGxlY3Rpb25JZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Yga2V5ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJrZXlcIicpO1xuICAgIH1cbiAgICBjb25zdCBhcGlQYXRoID0gXCIvZGF0YWJhc2VzL3tkYXRhYmFzZUlkfS9jb2xsZWN0aW9ucy97Y29sbGVjdGlvbklkfS9hdHRyaWJ1dGVzL3trZXl9XCIucmVwbGFjZShcIntkYXRhYmFzZUlkfVwiLCBkYXRhYmFzZUlkKS5yZXBsYWNlKFwie2NvbGxlY3Rpb25JZH1cIiwgY29sbGVjdGlvbklkKS5yZXBsYWNlKFwie2tleX1cIiwga2V5KTtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgY29uc3QgdXJpID0gbmV3IFVSTCh0aGlzLmNsaWVudC5jb25maWcuZW5kcG9pbnQgKyBhcGlQYXRoKTtcbiAgICBjb25zdCBhcGlIZWFkZXJzID0ge1xuICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmNsaWVudC5jYWxsKFxuICAgICAgXCJkZWxldGVcIixcbiAgICAgIHVyaSxcbiAgICAgIGFwaUhlYWRlcnMsXG4gICAgICBwYXlsb2FkXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICAgICAqIFVwZGF0ZSByZWxhdGlvbnNoaXAgYXR0cmlidXRlXG4gICAgICAgKlxuICAgICAgICogVXBkYXRlIHJlbGF0aW9uc2hpcCBhdHRyaWJ1dGUuIFtMZWFybiBtb3JlIGFib3V0IHJlbGF0aW9uc2hpcCBhdHRyaWJ1dGVzXShodHRwczovL2FwcHdyaXRlLmlvL2RvY3MvZGF0YWJhc2VzLXJlbGF0aW9uc2hpcHMjcmVsYXRpb25zaGlwLWF0dHJpYnV0ZXMpLlxuICBcbiAgICAgICAqXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YWJhc2VJZFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGNvbGxlY3Rpb25JZFxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgICAgICogQHBhcmFtIHtSZWxhdGlvbk11dGF0ZX0gb25EZWxldGVcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuZXdLZXlcbiAgICAgICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgICAgICogQHJldHVybnMge1Byb21pc2U8TW9kZWxzLkF0dHJpYnV0ZVJlbGF0aW9uc2hpcD59XG4gICAgICAgKi9cbiAgYXN5bmMgdXBkYXRlUmVsYXRpb25zaGlwQXR0cmlidXRlKGRhdGFiYXNlSWQsIGNvbGxlY3Rpb25JZCwga2V5LCBvbkRlbGV0ZSwgbmV3S2V5KSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhYmFzZUlkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJkYXRhYmFzZUlkXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb2xsZWN0aW9uSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImNvbGxlY3Rpb25JZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Yga2V5ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJrZXlcIicpO1xuICAgIH1cbiAgICBjb25zdCBhcGlQYXRoID0gXCIvZGF0YWJhc2VzL3tkYXRhYmFzZUlkfS9jb2xsZWN0aW9ucy97Y29sbGVjdGlvbklkfS9hdHRyaWJ1dGVzL3trZXl9L3JlbGF0aW9uc2hpcFwiLnJlcGxhY2UoXCJ7ZGF0YWJhc2VJZH1cIiwgZGF0YWJhc2VJZCkucmVwbGFjZShcIntjb2xsZWN0aW9uSWR9XCIsIGNvbGxlY3Rpb25JZCkucmVwbGFjZShcIntrZXl9XCIsIGtleSk7XG4gICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgIGlmICh0eXBlb2Ygb25EZWxldGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJvbkRlbGV0ZVwiXSA9IG9uRGVsZXRlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG5ld0tleSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcIm5ld0tleVwiXSA9IG5ld0tleTtcbiAgICB9XG4gICAgY29uc3QgdXJpID0gbmV3IFVSTCh0aGlzLmNsaWVudC5jb25maWcuZW5kcG9pbnQgKyBhcGlQYXRoKTtcbiAgICBjb25zdCBhcGlIZWFkZXJzID0ge1xuICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmNsaWVudC5jYWxsKFxuICAgICAgXCJwYXRjaFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBMaXN0IGRvY3VtZW50c1xuICAgKlxuICAgKiBHZXQgYSBsaXN0IG9mIGFsbCB0aGUgdXNlciYjMDM5O3MgZG9jdW1lbnRzIGluIGEgZ2l2ZW4gY29sbGVjdGlvbi4gWW91IGNhbiB1c2UgdGhlIHF1ZXJ5IHBhcmFtcyB0byBmaWx0ZXIgeW91ciByZXN1bHRzLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YWJhc2VJZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29sbGVjdGlvbklkXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IHF1ZXJpZXNcbiAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE1vZGVscy5Eb2N1bWVudExpc3Q8RG9jdW1lbnQ+Pn1cbiAgICovXG4gIGFzeW5jIGxpc3REb2N1bWVudHMoZGF0YWJhc2VJZCwgY29sbGVjdGlvbklkLCBxdWVyaWVzKSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhYmFzZUlkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJkYXRhYmFzZUlkXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb2xsZWN0aW9uSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImNvbGxlY3Rpb25JZFwiJyk7XG4gICAgfVxuICAgIGNvbnN0IGFwaVBhdGggPSBcIi9kYXRhYmFzZXMve2RhdGFiYXNlSWR9L2NvbGxlY3Rpb25zL3tjb2xsZWN0aW9uSWR9L2RvY3VtZW50c1wiLnJlcGxhY2UoXCJ7ZGF0YWJhc2VJZH1cIiwgZGF0YWJhc2VJZCkucmVwbGFjZShcIntjb2xsZWN0aW9uSWR9XCIsIGNvbGxlY3Rpb25JZCk7XG4gICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgIGlmICh0eXBlb2YgcXVlcmllcyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcInF1ZXJpZXNcIl0gPSBxdWVyaWVzO1xuICAgIH1cbiAgICBjb25zdCB1cmkgPSBuZXcgVVJMKHRoaXMuY2xpZW50LmNvbmZpZy5lbmRwb2ludCArIGFwaVBhdGgpO1xuICAgIGNvbnN0IGFwaUhlYWRlcnMgPSB7XG4gICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuY2xpZW50LmNhbGwoXG4gICAgICBcImdldFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGUgZG9jdW1lbnRcbiAgICpcbiAgICogQ3JlYXRlIGEgbmV3IERvY3VtZW50LiBCZWZvcmUgdXNpbmcgdGhpcyByb3V0ZSwgeW91IHNob3VsZCBjcmVhdGUgYSBuZXcgY29sbGVjdGlvbiByZXNvdXJjZSB1c2luZyBlaXRoZXIgYSBbc2VydmVyIGludGVncmF0aW9uXShodHRwczovL2FwcHdyaXRlLmlvL2RvY3Mvc2VydmVyL2RhdGFiYXNlcyNkYXRhYmFzZXNDcmVhdGVDb2xsZWN0aW9uKSBBUEkgb3IgZGlyZWN0bHkgZnJvbSB5b3VyIGRhdGFiYXNlIGNvbnNvbGUuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhYmFzZUlkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb2xsZWN0aW9uSWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRvY3VtZW50SWRcbiAgICogQHBhcmFtIHtPbWl0PERvY3VtZW50LCBrZXlvZiBNb2RlbHMuRG9jdW1lbnQ+fSBkYXRhXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IHBlcm1pc3Npb25zXG4gICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxEb2N1bWVudD59XG4gICAqL1xuICBhc3luYyBjcmVhdGVEb2N1bWVudChkYXRhYmFzZUlkLCBjb2xsZWN0aW9uSWQsIGRvY3VtZW50SWQsIGRhdGEsIHBlcm1pc3Npb25zKSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhYmFzZUlkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJkYXRhYmFzZUlkXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb2xsZWN0aW9uSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImNvbGxlY3Rpb25JZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZG9jdW1lbnRJZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiZG9jdW1lbnRJZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiZGF0YVwiJyk7XG4gICAgfVxuICAgIGNvbnN0IGFwaVBhdGggPSBcIi9kYXRhYmFzZXMve2RhdGFiYXNlSWR9L2NvbGxlY3Rpb25zL3tjb2xsZWN0aW9uSWR9L2RvY3VtZW50c1wiLnJlcGxhY2UoXCJ7ZGF0YWJhc2VJZH1cIiwgZGF0YWJhc2VJZCkucmVwbGFjZShcIntjb2xsZWN0aW9uSWR9XCIsIGNvbGxlY3Rpb25JZCk7XG4gICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgIGlmICh0eXBlb2YgZG9jdW1lbnRJZCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImRvY3VtZW50SWRcIl0gPSBkb2N1bWVudElkO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGRhdGEgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJkYXRhXCJdID0gZGF0YTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBwZXJtaXNzaW9ucyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcInBlcm1pc3Npb25zXCJdID0gcGVybWlzc2lvbnM7XG4gICAgfVxuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwicG9zdFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgZG9jdW1lbnRcbiAgICpcbiAgICogR2V0IGEgZG9jdW1lbnQgYnkgaXRzIHVuaXF1ZSBJRC4gVGhpcyBlbmRwb2ludCByZXNwb25zZSByZXR1cm5zIGEgSlNPTiBvYmplY3Qgd2l0aCB0aGUgZG9jdW1lbnQgZGF0YS5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGFiYXNlSWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbGxlY3Rpb25JZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZG9jdW1lbnRJZFxuICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBxdWVyaWVzXG4gICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxEb2N1bWVudD59XG4gICAqL1xuICBhc3luYyBnZXREb2N1bWVudChkYXRhYmFzZUlkLCBjb2xsZWN0aW9uSWQsIGRvY3VtZW50SWQsIHF1ZXJpZXMpIHtcbiAgICBpZiAodHlwZW9mIGRhdGFiYXNlSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImRhdGFiYXNlSWRcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbGxlY3Rpb25JZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiY29sbGVjdGlvbklkXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudElkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJkb2N1bWVudElkXCInKTtcbiAgICB9XG4gICAgY29uc3QgYXBpUGF0aCA9IFwiL2RhdGFiYXNlcy97ZGF0YWJhc2VJZH0vY29sbGVjdGlvbnMve2NvbGxlY3Rpb25JZH0vZG9jdW1lbnRzL3tkb2N1bWVudElkfVwiLnJlcGxhY2UoXCJ7ZGF0YWJhc2VJZH1cIiwgZGF0YWJhc2VJZCkucmVwbGFjZShcIntjb2xsZWN0aW9uSWR9XCIsIGNvbGxlY3Rpb25JZCkucmVwbGFjZShcIntkb2N1bWVudElkfVwiLCBkb2N1bWVudElkKTtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgaWYgKHR5cGVvZiBxdWVyaWVzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wicXVlcmllc1wiXSA9IHF1ZXJpZXM7XG4gICAgfVxuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwiZ2V0XCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIFVwZGF0ZSBkb2N1bWVudFxuICAgKlxuICAgKiBVcGRhdGUgYSBkb2N1bWVudCBieSBpdHMgdW5pcXVlIElELiBVc2luZyB0aGUgcGF0Y2ggbWV0aG9kIHlvdSBjYW4gcGFzcyBvbmx5IHNwZWNpZmljIGZpZWxkcyB0aGF0IHdpbGwgZ2V0IHVwZGF0ZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhYmFzZUlkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb2xsZWN0aW9uSWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRvY3VtZW50SWRcbiAgICogQHBhcmFtIHtQYXJ0aWFsPE9taXQ8RG9jdW1lbnQsIGtleW9mIE1vZGVscy5Eb2N1bWVudD4+fSBkYXRhXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IHBlcm1pc3Npb25zXG4gICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxEb2N1bWVudD59XG4gICAqL1xuICBhc3luYyB1cGRhdGVEb2N1bWVudChkYXRhYmFzZUlkLCBjb2xsZWN0aW9uSWQsIGRvY3VtZW50SWQsIGRhdGEsIHBlcm1pc3Npb25zKSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhYmFzZUlkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJkYXRhYmFzZUlkXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb2xsZWN0aW9uSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImNvbGxlY3Rpb25JZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZG9jdW1lbnRJZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiZG9jdW1lbnRJZFwiJyk7XG4gICAgfVxuICAgIGNvbnN0IGFwaVBhdGggPSBcIi9kYXRhYmFzZXMve2RhdGFiYXNlSWR9L2NvbGxlY3Rpb25zL3tjb2xsZWN0aW9uSWR9L2RvY3VtZW50cy97ZG9jdW1lbnRJZH1cIi5yZXBsYWNlKFwie2RhdGFiYXNlSWR9XCIsIGRhdGFiYXNlSWQpLnJlcGxhY2UoXCJ7Y29sbGVjdGlvbklkfVwiLCBjb2xsZWN0aW9uSWQpLnJlcGxhY2UoXCJ7ZG9jdW1lbnRJZH1cIiwgZG9jdW1lbnRJZCk7XG4gICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgIGlmICh0eXBlb2YgZGF0YSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcImRhdGFcIl0gPSBkYXRhO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHBlcm1pc3Npb25zICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBwYXlsb2FkW1wicGVybWlzc2lvbnNcIl0gPSBwZXJtaXNzaW9ucztcbiAgICB9XG4gICAgY29uc3QgdXJpID0gbmV3IFVSTCh0aGlzLmNsaWVudC5jb25maWcuZW5kcG9pbnQgKyBhcGlQYXRoKTtcbiAgICBjb25zdCBhcGlIZWFkZXJzID0ge1xuICAgICAgXCJjb250ZW50LXR5cGVcIjogXCJhcHBsaWNhdGlvbi9qc29uXCJcbiAgICB9O1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmNsaWVudC5jYWxsKFxuICAgICAgXCJwYXRjaFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBEZWxldGUgZG9jdW1lbnRcbiAgICpcbiAgICogRGVsZXRlIGEgZG9jdW1lbnQgYnkgaXRzIHVuaXF1ZSBJRC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGFiYXNlSWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGNvbGxlY3Rpb25JZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gZG9jdW1lbnRJZFxuICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICogQHJldHVybnMge1Byb21pc2U8e30+fVxuICAgKi9cbiAgYXN5bmMgZGVsZXRlRG9jdW1lbnQoZGF0YWJhc2VJZCwgY29sbGVjdGlvbklkLCBkb2N1bWVudElkKSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhYmFzZUlkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJkYXRhYmFzZUlkXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb2xsZWN0aW9uSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImNvbGxlY3Rpb25JZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZG9jdW1lbnRJZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiZG9jdW1lbnRJZFwiJyk7XG4gICAgfVxuICAgIGNvbnN0IGFwaVBhdGggPSBcIi9kYXRhYmFzZXMve2RhdGFiYXNlSWR9L2NvbGxlY3Rpb25zL3tjb2xsZWN0aW9uSWR9L2RvY3VtZW50cy97ZG9jdW1lbnRJZH1cIi5yZXBsYWNlKFwie2RhdGFiYXNlSWR9XCIsIGRhdGFiYXNlSWQpLnJlcGxhY2UoXCJ7Y29sbGVjdGlvbklkfVwiLCBjb2xsZWN0aW9uSWQpLnJlcGxhY2UoXCJ7ZG9jdW1lbnRJZH1cIiwgZG9jdW1lbnRJZCk7XG4gICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwiZGVsZXRlXCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIExpc3QgaW5kZXhlc1xuICAgKlxuICAgKiBMaXN0IGluZGV4ZXMgaW4gdGhlIGNvbGxlY3Rpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhYmFzZUlkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb2xsZWN0aW9uSWRcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gcXVlcmllc1xuICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICogQHJldHVybnMge1Byb21pc2U8TW9kZWxzLkluZGV4TGlzdD59XG4gICAqL1xuICBhc3luYyBsaXN0SW5kZXhlcyhkYXRhYmFzZUlkLCBjb2xsZWN0aW9uSWQsIHF1ZXJpZXMpIHtcbiAgICBpZiAodHlwZW9mIGRhdGFiYXNlSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImRhdGFiYXNlSWRcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbGxlY3Rpb25JZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiY29sbGVjdGlvbklkXCInKTtcbiAgICB9XG4gICAgY29uc3QgYXBpUGF0aCA9IFwiL2RhdGFiYXNlcy97ZGF0YWJhc2VJZH0vY29sbGVjdGlvbnMve2NvbGxlY3Rpb25JZH0vaW5kZXhlc1wiLnJlcGxhY2UoXCJ7ZGF0YWJhc2VJZH1cIiwgZGF0YWJhc2VJZCkucmVwbGFjZShcIntjb2xsZWN0aW9uSWR9XCIsIGNvbGxlY3Rpb25JZCk7XG4gICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgIGlmICh0eXBlb2YgcXVlcmllcyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcInF1ZXJpZXNcIl0gPSBxdWVyaWVzO1xuICAgIH1cbiAgICBjb25zdCB1cmkgPSBuZXcgVVJMKHRoaXMuY2xpZW50LmNvbmZpZy5lbmRwb2ludCArIGFwaVBhdGgpO1xuICAgIGNvbnN0IGFwaUhlYWRlcnMgPSB7XG4gICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuY2xpZW50LmNhbGwoXG4gICAgICBcImdldFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG4gIC8qKlxuICAgICAgICogQ3JlYXRlIGluZGV4XG4gICAgICAgKlxuICAgICAgICogQ3JlYXRlcyBhbiBpbmRleCBvbiB0aGUgYXR0cmlidXRlcyBsaXN0ZWQuIFlvdXIgaW5kZXggc2hvdWxkIGluY2x1ZGUgYWxsIHRoZSBhdHRyaWJ1dGVzIHlvdSB3aWxsIHF1ZXJ5IGluIGEgc2luZ2xlIHJlcXVlc3QuXG4gIEF0dHJpYnV0ZXMgY2FuIGJlIGBrZXlgLCBgZnVsbHRleHRgLCBhbmQgYHVuaXF1ZWAuXG4gICAgICAgKlxuICAgICAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGFiYXNlSWRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBjb2xsZWN0aW9uSWRcbiAgICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICAgICAqIEBwYXJhbSB7SW5kZXhUeXBlfSB0eXBlXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBhdHRyaWJ1dGVzXG4gICAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSBvcmRlcnNcbiAgICAgICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgICAgICogQHJldHVybnMge1Byb21pc2U8TW9kZWxzLkluZGV4Pn1cbiAgICAgICAqL1xuICBhc3luYyBjcmVhdGVJbmRleChkYXRhYmFzZUlkLCBjb2xsZWN0aW9uSWQsIGtleSwgdHlwZSwgYXR0cmlidXRlcywgb3JkZXJzKSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhYmFzZUlkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJkYXRhYmFzZUlkXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBjb2xsZWN0aW9uSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImNvbGxlY3Rpb25JZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2Yga2V5ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJrZXlcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHR5cGUgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcInR5cGVcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImF0dHJpYnV0ZXNcIicpO1xuICAgIH1cbiAgICBjb25zdCBhcGlQYXRoID0gXCIvZGF0YWJhc2VzL3tkYXRhYmFzZUlkfS9jb2xsZWN0aW9ucy97Y29sbGVjdGlvbklkfS9pbmRleGVzXCIucmVwbGFjZShcIntkYXRhYmFzZUlkfVwiLCBkYXRhYmFzZUlkKS5yZXBsYWNlKFwie2NvbGxlY3Rpb25JZH1cIiwgY29sbGVjdGlvbklkKTtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgaWYgKHR5cGVvZiBrZXkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJrZXlcIl0gPSBrZXk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgdHlwZSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcInR5cGVcIl0gPSB0eXBlO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGF0dHJpYnV0ZXMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJhdHRyaWJ1dGVzXCJdID0gYXR0cmlidXRlcztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcmRlcnMgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJvcmRlcnNcIl0gPSBvcmRlcnM7XG4gICAgfVxuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwicG9zdFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG4gIC8qKlxuICAgKiBHZXQgaW5kZXhcbiAgICpcbiAgICogR2V0IGluZGV4IGJ5IElELlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gZGF0YWJhc2VJZFxuICAgKiBAcGFyYW0ge3N0cmluZ30gY29sbGVjdGlvbklkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAgICogQHRocm93cyB7QXBwd3JpdGVFeGNlcHRpb259XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPE1vZGVscy5JbmRleD59XG4gICAqL1xuICBhc3luYyBnZXRJbmRleChkYXRhYmFzZUlkLCBjb2xsZWN0aW9uSWQsIGtleSkge1xuICAgIGlmICh0eXBlb2YgZGF0YWJhc2VJZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiZGF0YWJhc2VJZFwiJyk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgY29sbGVjdGlvbklkID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJjb2xsZWN0aW9uSWRcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGtleSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwia2V5XCInKTtcbiAgICB9XG4gICAgY29uc3QgYXBpUGF0aCA9IFwiL2RhdGFiYXNlcy97ZGF0YWJhc2VJZH0vY29sbGVjdGlvbnMve2NvbGxlY3Rpb25JZH0vaW5kZXhlcy97a2V5fVwiLnJlcGxhY2UoXCJ7ZGF0YWJhc2VJZH1cIiwgZGF0YWJhc2VJZCkucmVwbGFjZShcIntjb2xsZWN0aW9uSWR9XCIsIGNvbGxlY3Rpb25JZCkucmVwbGFjZShcIntrZXl9XCIsIGtleSk7XG4gICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHtcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwiZ2V0XCIsXG4gICAgICB1cmksXG4gICAgICBhcGlIZWFkZXJzLFxuICAgICAgcGF5bG9hZFxuICAgICk7XG4gIH1cbiAgLyoqXG4gICAqIERlbGV0ZSBpbmRleFxuICAgKlxuICAgKiBEZWxldGUgYW4gaW5kZXguXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhYmFzZUlkXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBjb2xsZWN0aW9uSWRcbiAgICogQHBhcmFtIHtzdHJpbmd9IGtleVxuICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICogQHJldHVybnMge1Byb21pc2U8e30+fVxuICAgKi9cbiAgYXN5bmMgZGVsZXRlSW5kZXgoZGF0YWJhc2VJZCwgY29sbGVjdGlvbklkLCBrZXkpIHtcbiAgICBpZiAodHlwZW9mIGRhdGFiYXNlSWQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImRhdGFiYXNlSWRcIicpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIGNvbGxlY3Rpb25JZCA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgdGhyb3cgbmV3IGNsaWVudC5BcHB3cml0ZUV4Y2VwdGlvbignTWlzc2luZyByZXF1aXJlZCBwYXJhbWV0ZXI6IFwiY29sbGVjdGlvbklkXCInKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcImtleVwiJyk7XG4gICAgfVxuICAgIGNvbnN0IGFwaVBhdGggPSBcIi9kYXRhYmFzZXMve2RhdGFiYXNlSWR9L2NvbGxlY3Rpb25zL3tjb2xsZWN0aW9uSWR9L2luZGV4ZXMve2tleX1cIi5yZXBsYWNlKFwie2RhdGFiYXNlSWR9XCIsIGRhdGFiYXNlSWQpLnJlcGxhY2UoXCJ7Y29sbGVjdGlvbklkfVwiLCBjb2xsZWN0aW9uSWQpLnJlcGxhY2UoXCJ7a2V5fVwiLCBrZXkpO1xuICAgIGNvbnN0IHBheWxvYWQgPSB7fTtcbiAgICBjb25zdCB1cmkgPSBuZXcgVVJMKHRoaXMuY2xpZW50LmNvbmZpZy5lbmRwb2ludCArIGFwaVBhdGgpO1xuICAgIGNvbnN0IGFwaUhlYWRlcnMgPSB7XG4gICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuY2xpZW50LmNhbGwoXG4gICAgICBcImRlbGV0ZVwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydHMuRGF0YWJhc2VzID0gRGF0YWJhc2VzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3V0LmpzLm1hcFxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YWJhc2VzLmpzLm1hcCJdLCJuYW1lcyI6WyJjbGllbnQiLCJyZXF1aXJlIiwiRGF0YWJhc2VzIiwiY29uc3RydWN0b3IiLCJsaXN0IiwicXVlcmllcyIsInNlYXJjaCIsImFwaVBhdGgiLCJwYXlsb2FkIiwidXJpIiwiVVJMIiwiY29uZmlnIiwiZW5kcG9pbnQiLCJhcGlIZWFkZXJzIiwiY2FsbCIsImNyZWF0ZSIsImRhdGFiYXNlSWQiLCJuYW1lIiwiZW5hYmxlZCIsIkFwcHdyaXRlRXhjZXB0aW9uIiwiZ2V0IiwicmVwbGFjZSIsInVwZGF0ZSIsImRlbGV0ZSIsImxpc3RDb2xsZWN0aW9ucyIsImNyZWF0ZUNvbGxlY3Rpb24iLCJjb2xsZWN0aW9uSWQiLCJwZXJtaXNzaW9ucyIsImRvY3VtZW50U2VjdXJpdHkiLCJnZXRDb2xsZWN0aW9uIiwidXBkYXRlQ29sbGVjdGlvbiIsImRlbGV0ZUNvbGxlY3Rpb24iLCJsaXN0QXR0cmlidXRlcyIsImNyZWF0ZUJvb2xlYW5BdHRyaWJ1dGUiLCJrZXkiLCJyZXF1aXJlZCIsInhkZWZhdWx0IiwiYXJyYXkiLCJ1cGRhdGVCb29sZWFuQXR0cmlidXRlIiwibmV3S2V5IiwiY3JlYXRlRGF0ZXRpbWVBdHRyaWJ1dGUiLCJ1cGRhdGVEYXRldGltZUF0dHJpYnV0ZSIsImNyZWF0ZUVtYWlsQXR0cmlidXRlIiwidXBkYXRlRW1haWxBdHRyaWJ1dGUiLCJjcmVhdGVFbnVtQXR0cmlidXRlIiwiZWxlbWVudHMiLCJ1cGRhdGVFbnVtQXR0cmlidXRlIiwiY3JlYXRlRmxvYXRBdHRyaWJ1dGUiLCJtaW4iLCJtYXgiLCJ1cGRhdGVGbG9hdEF0dHJpYnV0ZSIsImNyZWF0ZUludGVnZXJBdHRyaWJ1dGUiLCJ1cGRhdGVJbnRlZ2VyQXR0cmlidXRlIiwiY3JlYXRlSXBBdHRyaWJ1dGUiLCJ1cGRhdGVJcEF0dHJpYnV0ZSIsImNyZWF0ZVJlbGF0aW9uc2hpcEF0dHJpYnV0ZSIsInJlbGF0ZWRDb2xsZWN0aW9uSWQiLCJ0eXBlIiwidHdvV2F5IiwidHdvV2F5S2V5Iiwib25EZWxldGUiLCJjcmVhdGVTdHJpbmdBdHRyaWJ1dGUiLCJzaXplIiwiZW5jcnlwdCIsInVwZGF0ZVN0cmluZ0F0dHJpYnV0ZSIsImNyZWF0ZVVybEF0dHJpYnV0ZSIsInVwZGF0ZVVybEF0dHJpYnV0ZSIsImdldEF0dHJpYnV0ZSIsImRlbGV0ZUF0dHJpYnV0ZSIsInVwZGF0ZVJlbGF0aW9uc2hpcEF0dHJpYnV0ZSIsImxpc3REb2N1bWVudHMiLCJjcmVhdGVEb2N1bWVudCIsImRvY3VtZW50SWQiLCJkYXRhIiwiZ2V0RG9jdW1lbnQiLCJ1cGRhdGVEb2N1bWVudCIsImRlbGV0ZURvY3VtZW50IiwibGlzdEluZGV4ZXMiLCJjcmVhdGVJbmRleCIsImF0dHJpYnV0ZXMiLCJvcmRlcnMiLCJnZXRJbmRleCIsImRlbGV0ZUluZGV4IiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/services/databases.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/services/functions.js":
/*!***************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/services/functions.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar client = __webpack_require__(/*! ../client */ \"(rsc)/./node_modules/node-appwrite/dist/client.js\");\nclass Functions {\n    constructor(client){\n        this.client = client;\n    }\n    /**\n   * List functions\n   *\n   * Get a list of all the project&#039;s functions. You can use the query params to filter your results.\n   *\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.FunctionList>}\n   */ async list(queries, search) {\n        const apiPath = \"/functions\";\n        const payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        if (typeof search !== \"undefined\") {\n            payload[\"search\"] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create function\n   *\n   * Create a new function. You can pass a list of [permissions](https://appwrite.io/docs/permissions) to allow different project users or team with access to execute the function using the client API.\n   *\n   * @param {string} functionId\n   * @param {string} name\n   * @param {Runtime} runtime\n   * @param {string[]} execute\n   * @param {string[]} events\n   * @param {string} schedule\n   * @param {number} timeout\n   * @param {boolean} enabled\n   * @param {boolean} logging\n   * @param {string} entrypoint\n   * @param {string} commands\n   * @param {string[]} scopes\n   * @param {string} installationId\n   * @param {string} providerRepositoryId\n   * @param {string} providerBranch\n   * @param {boolean} providerSilentMode\n   * @param {string} providerRootDirectory\n   * @param {string} templateRepository\n   * @param {string} templateOwner\n   * @param {string} templateRootDirectory\n   * @param {string} templateVersion\n   * @param {string} specification\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Function>}\n   */ async create(functionId, name, runtime, execute, events, schedule, timeout, enabled, logging, entrypoint, commands, scopes, installationId, providerRepositoryId, providerBranch, providerSilentMode, providerRootDirectory, templateRepository, templateOwner, templateRootDirectory, templateVersion, specification) {\n        if (typeof functionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"name\"');\n        }\n        if (typeof runtime === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"runtime\"');\n        }\n        const apiPath = \"/functions\";\n        const payload = {};\n        if (typeof functionId !== \"undefined\") {\n            payload[\"functionId\"] = functionId;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof runtime !== \"undefined\") {\n            payload[\"runtime\"] = runtime;\n        }\n        if (typeof execute !== \"undefined\") {\n            payload[\"execute\"] = execute;\n        }\n        if (typeof events !== \"undefined\") {\n            payload[\"events\"] = events;\n        }\n        if (typeof schedule !== \"undefined\") {\n            payload[\"schedule\"] = schedule;\n        }\n        if (typeof timeout !== \"undefined\") {\n            payload[\"timeout\"] = timeout;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        if (typeof logging !== \"undefined\") {\n            payload[\"logging\"] = logging;\n        }\n        if (typeof entrypoint !== \"undefined\") {\n            payload[\"entrypoint\"] = entrypoint;\n        }\n        if (typeof commands !== \"undefined\") {\n            payload[\"commands\"] = commands;\n        }\n        if (typeof scopes !== \"undefined\") {\n            payload[\"scopes\"] = scopes;\n        }\n        if (typeof installationId !== \"undefined\") {\n            payload[\"installationId\"] = installationId;\n        }\n        if (typeof providerRepositoryId !== \"undefined\") {\n            payload[\"providerRepositoryId\"] = providerRepositoryId;\n        }\n        if (typeof providerBranch !== \"undefined\") {\n            payload[\"providerBranch\"] = providerBranch;\n        }\n        if (typeof providerSilentMode !== \"undefined\") {\n            payload[\"providerSilentMode\"] = providerSilentMode;\n        }\n        if (typeof providerRootDirectory !== \"undefined\") {\n            payload[\"providerRootDirectory\"] = providerRootDirectory;\n        }\n        if (typeof templateRepository !== \"undefined\") {\n            payload[\"templateRepository\"] = templateRepository;\n        }\n        if (typeof templateOwner !== \"undefined\") {\n            payload[\"templateOwner\"] = templateOwner;\n        }\n        if (typeof templateRootDirectory !== \"undefined\") {\n            payload[\"templateRootDirectory\"] = templateRootDirectory;\n        }\n        if (typeof templateVersion !== \"undefined\") {\n            payload[\"templateVersion\"] = templateVersion;\n        }\n        if (typeof specification !== \"undefined\") {\n            payload[\"specification\"] = specification;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * List runtimes\n   *\n   * Get a list of all runtimes that are currently active on your instance.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.RuntimeList>}\n   */ async listRuntimes() {\n        const apiPath = \"/functions/runtimes\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n       * List available function runtime specifications\n       *\n       * List allowed function specifications for this instance.\n  \n       *\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.SpecificationList>}\n       */ async listSpecifications() {\n        const apiPath = \"/functions/specifications\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get function\n   *\n   * Get a function by its unique ID.\n   *\n   * @param {string} functionId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Function>}\n   */ async get(functionId) {\n        if (typeof functionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        const apiPath = \"/functions/{functionId}\".replace(\"{functionId}\", functionId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update function\n   *\n   * Update function by its unique ID.\n   *\n   * @param {string} functionId\n   * @param {string} name\n   * @param {Runtime} runtime\n   * @param {string[]} execute\n   * @param {string[]} events\n   * @param {string} schedule\n   * @param {number} timeout\n   * @param {boolean} enabled\n   * @param {boolean} logging\n   * @param {string} entrypoint\n   * @param {string} commands\n   * @param {string[]} scopes\n   * @param {string} installationId\n   * @param {string} providerRepositoryId\n   * @param {string} providerBranch\n   * @param {boolean} providerSilentMode\n   * @param {string} providerRootDirectory\n   * @param {string} specification\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Function>}\n   */ async update(functionId, name, runtime, execute, events, schedule, timeout, enabled, logging, entrypoint, commands, scopes, installationId, providerRepositoryId, providerBranch, providerSilentMode, providerRootDirectory, specification) {\n        if (typeof functionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = \"/functions/{functionId}\".replace(\"{functionId}\", functionId);\n        const payload = {};\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof runtime !== \"undefined\") {\n            payload[\"runtime\"] = runtime;\n        }\n        if (typeof execute !== \"undefined\") {\n            payload[\"execute\"] = execute;\n        }\n        if (typeof events !== \"undefined\") {\n            payload[\"events\"] = events;\n        }\n        if (typeof schedule !== \"undefined\") {\n            payload[\"schedule\"] = schedule;\n        }\n        if (typeof timeout !== \"undefined\") {\n            payload[\"timeout\"] = timeout;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        if (typeof logging !== \"undefined\") {\n            payload[\"logging\"] = logging;\n        }\n        if (typeof entrypoint !== \"undefined\") {\n            payload[\"entrypoint\"] = entrypoint;\n        }\n        if (typeof commands !== \"undefined\") {\n            payload[\"commands\"] = commands;\n        }\n        if (typeof scopes !== \"undefined\") {\n            payload[\"scopes\"] = scopes;\n        }\n        if (typeof installationId !== \"undefined\") {\n            payload[\"installationId\"] = installationId;\n        }\n        if (typeof providerRepositoryId !== \"undefined\") {\n            payload[\"providerRepositoryId\"] = providerRepositoryId;\n        }\n        if (typeof providerBranch !== \"undefined\") {\n            payload[\"providerBranch\"] = providerBranch;\n        }\n        if (typeof providerSilentMode !== \"undefined\") {\n            payload[\"providerSilentMode\"] = providerSilentMode;\n        }\n        if (typeof providerRootDirectory !== \"undefined\") {\n            payload[\"providerRootDirectory\"] = providerRootDirectory;\n        }\n        if (typeof specification !== \"undefined\") {\n            payload[\"specification\"] = specification;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"put\", uri, apiHeaders, payload);\n    }\n    /**\n   * Delete function\n   *\n   * Delete a function by its unique ID.\n   *\n   * @param {string} functionId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async delete(functionId) {\n        if (typeof functionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        const apiPath = \"/functions/{functionId}\".replace(\"{functionId}\", functionId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"delete\", uri, apiHeaders, payload);\n    }\n    /**\n   * List deployments\n   *\n   * Get a list of all the project&#039;s code deployments. You can use the query params to filter your results.\n   *\n   * @param {string} functionId\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.DeploymentList>}\n   */ async listDeployments(functionId, queries, search) {\n        if (typeof functionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        const apiPath = \"/functions/{functionId}/deployments\".replace(\"{functionId}\", functionId);\n        const payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        if (typeof search !== \"undefined\") {\n            payload[\"search\"] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n       * Create deployment\n       *\n       * Create a new function code deployment. Use this endpoint to upload a new version of your code function. To execute your newly uploaded code, you&#039;ll need to update the function&#039;s deployment to use your new deployment UID.\n  \n  This endpoint accepts a tar.gz file compressed with your code. Make sure to include any dependencies your code has within the compressed file. You can learn more about code packaging in the [Appwrite Cloud Functions tutorial](https://appwrite.io/docs/functions).\n  \n  Use the &quot;command&quot; param to set the entrypoint used to execute your code.\n       *\n       * @param {string} functionId\n       * @param {File} code\n       * @param {boolean} activate\n       * @param {string} entrypoint\n       * @param {string} commands\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Deployment>}\n       */ async createDeployment(functionId, code, activate, entrypoint, commands, onProgress = (progress)=>{}) {\n        if (typeof functionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof code === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"code\"');\n        }\n        if (typeof activate === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"activate\"');\n        }\n        const apiPath = \"/functions/{functionId}/deployments\".replace(\"{functionId}\", functionId);\n        const payload = {};\n        if (typeof entrypoint !== \"undefined\") {\n            payload[\"entrypoint\"] = entrypoint;\n        }\n        if (typeof commands !== \"undefined\") {\n            payload[\"commands\"] = commands;\n        }\n        if (typeof code !== \"undefined\") {\n            payload[\"code\"] = code;\n        }\n        if (typeof activate !== \"undefined\") {\n            payload[\"activate\"] = activate;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"multipart/form-data\"\n        };\n        return await this.client.chunkedUpload(\"post\", uri, apiHeaders, payload, onProgress);\n    }\n    /**\n   * Get deployment\n   *\n   * Get a code deployment by its unique ID.\n   *\n   * @param {string} functionId\n   * @param {string} deploymentId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Deployment>}\n   */ async getDeployment(functionId, deploymentId) {\n        if (typeof functionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof deploymentId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n        const apiPath = \"/functions/{functionId}/deployments/{deploymentId}\".replace(\"{functionId}\", functionId).replace(\"{deploymentId}\", deploymentId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update deployment\n   *\n   * Update the function code deployment ID using the unique function ID. Use this endpoint to switch the code deployment that should be executed by the execution endpoint.\n   *\n   * @param {string} functionId\n   * @param {string} deploymentId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Function>}\n   */ async updateDeployment(functionId, deploymentId) {\n        if (typeof functionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof deploymentId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n        const apiPath = \"/functions/{functionId}/deployments/{deploymentId}\".replace(\"{functionId}\", functionId).replace(\"{deploymentId}\", deploymentId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Delete deployment\n   *\n   * Delete a code deployment by its unique ID.\n   *\n   * @param {string} functionId\n   * @param {string} deploymentId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async deleteDeployment(functionId, deploymentId) {\n        if (typeof functionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof deploymentId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n        const apiPath = \"/functions/{functionId}/deployments/{deploymentId}\".replace(\"{functionId}\", functionId).replace(\"{deploymentId}\", deploymentId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"delete\", uri, apiHeaders, payload);\n    }\n    /**\n   * Rebuild deployment\n   *\n   *\n   * @param {string} functionId\n   * @param {string} deploymentId\n   * @param {string} buildId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async createBuild(functionId, deploymentId, buildId) {\n        if (typeof functionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof deploymentId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n        const apiPath = \"/functions/{functionId}/deployments/{deploymentId}/build\".replace(\"{functionId}\", functionId).replace(\"{deploymentId}\", deploymentId);\n        const payload = {};\n        if (typeof buildId !== \"undefined\") {\n            payload[\"buildId\"] = buildId;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Cancel deployment\n   *\n   *\n   * @param {string} functionId\n   * @param {string} deploymentId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Build>}\n   */ async updateDeploymentBuild(functionId, deploymentId) {\n        if (typeof functionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof deploymentId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n        const apiPath = \"/functions/{functionId}/deployments/{deploymentId}/build\".replace(\"{functionId}\", functionId).replace(\"{deploymentId}\", deploymentId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Download deployment\n   *\n   * Get a Deployment&#039;s contents by its unique ID. This endpoint supports range requests for partial or streaming file download.\n   *\n   * @param {string} functionId\n   * @param {string} deploymentId\n   * @throws {AppwriteException}\n   * @returns {Promise<ArrayBuffer>}\n   */ async getDeploymentDownload(functionId, deploymentId) {\n        if (typeof functionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof deploymentId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"deploymentId\"');\n        }\n        const apiPath = \"/functions/{functionId}/deployments/{deploymentId}/download\".replace(\"{functionId}\", functionId).replace(\"{deploymentId}\", deploymentId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload, \"arrayBuffer\");\n    }\n    /**\n   * List executions\n   *\n   * Get a list of all the current user function execution logs. You can use the query params to filter your results.\n   *\n   * @param {string} functionId\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.ExecutionList>}\n   */ async listExecutions(functionId, queries, search) {\n        if (typeof functionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        const apiPath = \"/functions/{functionId}/executions\".replace(\"{functionId}\", functionId);\n        const payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        if (typeof search !== \"undefined\") {\n            payload[\"search\"] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create execution\n   *\n   * Trigger a function execution. The returned object will return you the current execution status. You can ping the `Get Execution` endpoint to get updates on the current execution status. Once this endpoint is called, your function execution process will start asynchronously.\n   *\n   * @param {string} functionId\n   * @param {string} body\n   * @param {boolean} async\n   * @param {string} xpath\n   * @param {ExecutionMethod} method\n   * @param {object} headers\n   * @param {string} scheduledAt\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Execution>}\n   */ async createExecution(functionId, body, async, xpath, method, headers, scheduledAt) {\n        if (typeof functionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        const apiPath = \"/functions/{functionId}/executions\".replace(\"{functionId}\", functionId);\n        const payload = {};\n        if (typeof body !== \"undefined\") {\n            payload[\"body\"] = body;\n        }\n        if (typeof async !== \"undefined\") {\n            payload[\"async\"] = async;\n        }\n        if (typeof xpath !== \"undefined\") {\n            payload[\"path\"] = xpath;\n        }\n        if (typeof method !== \"undefined\") {\n            payload[\"method\"] = method;\n        }\n        if (typeof headers !== \"undefined\") {\n            payload[\"headers\"] = headers;\n        }\n        if (typeof scheduledAt !== \"undefined\") {\n            payload[\"scheduledAt\"] = scheduledAt;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get execution\n   *\n   * Get a function execution log by its unique ID.\n   *\n   * @param {string} functionId\n   * @param {string} executionId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Execution>}\n   */ async getExecution(functionId, executionId) {\n        if (typeof functionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof executionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"executionId\"');\n        }\n        const apiPath = \"/functions/{functionId}/executions/{executionId}\".replace(\"{functionId}\", functionId).replace(\"{executionId}\", executionId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n       * Delete execution\n       *\n       * Delete a function execution by its unique ID.\n  \n       *\n       * @param {string} functionId\n       * @param {string} executionId\n       * @throws {AppwriteException}\n       * @returns {Promise<{}>}\n       */ async deleteExecution(functionId, executionId) {\n        if (typeof functionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof executionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"executionId\"');\n        }\n        const apiPath = \"/functions/{functionId}/executions/{executionId}\".replace(\"{functionId}\", functionId).replace(\"{executionId}\", executionId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"delete\", uri, apiHeaders, payload);\n    }\n    /**\n   * List variables\n   *\n   * Get a list of all variables of a specific function.\n   *\n   * @param {string} functionId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.VariableList>}\n   */ async listVariables(functionId) {\n        if (typeof functionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        const apiPath = \"/functions/{functionId}/variables\".replace(\"{functionId}\", functionId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create variable\n   *\n   * Create a new function environment variable. These variables can be accessed in the function at runtime as environment variables.\n   *\n   * @param {string} functionId\n   * @param {string} key\n   * @param {string} value\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Variable>}\n   */ async createVariable(functionId, key, value) {\n        if (typeof functionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"key\"');\n        }\n        if (typeof value === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"value\"');\n        }\n        const apiPath = \"/functions/{functionId}/variables\".replace(\"{functionId}\", functionId);\n        const payload = {};\n        if (typeof key !== \"undefined\") {\n            payload[\"key\"] = key;\n        }\n        if (typeof value !== \"undefined\") {\n            payload[\"value\"] = value;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get variable\n   *\n   * Get a variable by its unique ID.\n   *\n   * @param {string} functionId\n   * @param {string} variableId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Variable>}\n   */ async getVariable(functionId, variableId) {\n        if (typeof functionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof variableId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"variableId\"');\n        }\n        const apiPath = \"/functions/{functionId}/variables/{variableId}\".replace(\"{functionId}\", functionId).replace(\"{variableId}\", variableId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update variable\n   *\n   * Update variable by its unique ID.\n   *\n   * @param {string} functionId\n   * @param {string} variableId\n   * @param {string} key\n   * @param {string} value\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Variable>}\n   */ async updateVariable(functionId, variableId, key, value) {\n        if (typeof functionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof variableId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"variableId\"');\n        }\n        if (typeof key === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"key\"');\n        }\n        const apiPath = \"/functions/{functionId}/variables/{variableId}\".replace(\"{functionId}\", functionId).replace(\"{variableId}\", variableId);\n        const payload = {};\n        if (typeof key !== \"undefined\") {\n            payload[\"key\"] = key;\n        }\n        if (typeof value !== \"undefined\") {\n            payload[\"value\"] = value;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"put\", uri, apiHeaders, payload);\n    }\n    /**\n   * Delete variable\n   *\n   * Delete a variable by its unique ID.\n   *\n   * @param {string} functionId\n   * @param {string} variableId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async deleteVariable(functionId, variableId) {\n        if (typeof functionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"functionId\"');\n        }\n        if (typeof variableId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"variableId\"');\n        }\n        const apiPath = \"/functions/{functionId}/variables/{variableId}\".replace(\"{functionId}\", functionId).replace(\"{variableId}\", variableId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"delete\", uri, apiHeaders, payload);\n    }\n}\nexports.Functions = Functions; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=functions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/services/functions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/services/graphql.js":
/*!*************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/services/graphql.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar client = __webpack_require__(/*! ../client */ \"(rsc)/./node_modules/node-appwrite/dist/client.js\");\nclass Graphql {\n    constructor(client){\n        this.client = client;\n    }\n    /**\n   * GraphQL endpoint\n   *\n   * Execute a GraphQL mutation.\n   *\n   * @param {object} query\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async query(query) {\n        if (typeof query === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"query\"');\n        }\n        const apiPath = \"/graphql\";\n        const payload = {};\n        if (typeof query !== \"undefined\") {\n            payload[\"query\"] = query;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"x-sdk-graphql\": \"true\",\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * GraphQL endpoint\n   *\n   * Execute a GraphQL mutation.\n   *\n   * @param {object} query\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async mutation(query) {\n        if (typeof query === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"query\"');\n        }\n        const apiPath = \"/graphql/mutation\";\n        const payload = {};\n        if (typeof query !== \"undefined\") {\n            payload[\"query\"] = query;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"x-sdk-graphql\": \"true\",\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n}\nexports.Graphql = Graphql; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=graphql.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbm9kZS1hcHB3cml0ZS9kaXN0L3NlcnZpY2VzL2dyYXBocWwuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUVyQixNQUFNQztJQUNKQyxZQUFZSCxNQUFNLENBQUU7UUFDbEIsSUFBSSxDQUFDQSxNQUFNLEdBQUdBO0lBQ2hCO0lBQ0E7Ozs7Ozs7O0dBUUMsR0FDRCxNQUFNSSxNQUFNQSxLQUFLLEVBQUU7UUFDakIsSUFBSSxPQUFPQSxVQUFVLGFBQWE7WUFDaEMsTUFBTSxJQUFJSixPQUFPSyxpQkFBaUIsQ0FBQztRQUNyQztRQUNBLE1BQU1DLFVBQVU7UUFDaEIsTUFBTUMsVUFBVSxDQUFDO1FBQ2pCLElBQUksT0FBT0gsVUFBVSxhQUFhO1lBQ2hDRyxPQUFPLENBQUMsUUFBUSxHQUFHSDtRQUNyQjtRQUNBLE1BQU1JLE1BQU0sSUFBSUMsSUFBSSxJQUFJLENBQUNULE1BQU0sQ0FBQ1UsTUFBTSxDQUFDQyxRQUFRLEdBQUdMO1FBQ2xELE1BQU1NLGFBQWE7WUFDakIsaUJBQWlCO1lBQ2pCLGdCQUFnQjtRQUNsQjtRQUNBLE9BQU8sTUFBTSxJQUFJLENBQUNaLE1BQU0sQ0FBQ2EsSUFBSSxDQUMzQixRQUNBTCxLQUNBSSxZQUNBTDtJQUVKO0lBQ0E7Ozs7Ozs7O0dBUUMsR0FDRCxNQUFNTyxTQUFTVixLQUFLLEVBQUU7UUFDcEIsSUFBSSxPQUFPQSxVQUFVLGFBQWE7WUFDaEMsTUFBTSxJQUFJSixPQUFPSyxpQkFBaUIsQ0FBQztRQUNyQztRQUNBLE1BQU1DLFVBQVU7UUFDaEIsTUFBTUMsVUFBVSxDQUFDO1FBQ2pCLElBQUksT0FBT0gsVUFBVSxhQUFhO1lBQ2hDRyxPQUFPLENBQUMsUUFBUSxHQUFHSDtRQUNyQjtRQUNBLE1BQU1JLE1BQU0sSUFBSUMsSUFBSSxJQUFJLENBQUNULE1BQU0sQ0FBQ1UsTUFBTSxDQUFDQyxRQUFRLEdBQUdMO1FBQ2xELE1BQU1NLGFBQWE7WUFDakIsaUJBQWlCO1lBQ2pCLGdCQUFnQjtRQUNsQjtRQUNBLE9BQU8sTUFBTSxJQUFJLENBQUNaLE1BQU0sQ0FBQ2EsSUFBSSxDQUMzQixRQUNBTCxLQUNBSSxZQUNBTDtJQUVKO0FBQ0Y7QUFFQVEsZUFBZSxHQUFHYixTQUNsQiwrQkFBK0I7Q0FDL0IsbUNBQW1DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vdmlkZW8tZWRpdG9yLWFwcC8uL25vZGVfbW9kdWxlcy9ub2RlLWFwcHdyaXRlL2Rpc3Qvc2VydmljZXMvZ3JhcGhxbC5qcz80YzliIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIGNsaWVudCA9IHJlcXVpcmUoJy4uL2NsaWVudCcpO1xuXG5jbGFzcyBHcmFwaHFsIHtcbiAgY29uc3RydWN0b3IoY2xpZW50KSB7XG4gICAgdGhpcy5jbGllbnQgPSBjbGllbnQ7XG4gIH1cbiAgLyoqXG4gICAqIEdyYXBoUUwgZW5kcG9pbnRcbiAgICpcbiAgICogRXhlY3V0ZSBhIEdyYXBoUUwgbXV0YXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBxdWVyeVxuICAgKiBAdGhyb3dzIHtBcHB3cml0ZUV4Y2VwdGlvbn1cbiAgICogQHJldHVybnMge1Byb21pc2U8e30+fVxuICAgKi9cbiAgYXN5bmMgcXVlcnkocXVlcnkpIHtcbiAgICBpZiAodHlwZW9mIHF1ZXJ5ID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aHJvdyBuZXcgY2xpZW50LkFwcHdyaXRlRXhjZXB0aW9uKCdNaXNzaW5nIHJlcXVpcmVkIHBhcmFtZXRlcjogXCJxdWVyeVwiJyk7XG4gICAgfVxuICAgIGNvbnN0IGFwaVBhdGggPSBcIi9ncmFwaHFsXCI7XG4gICAgY29uc3QgcGF5bG9hZCA9IHt9O1xuICAgIGlmICh0eXBlb2YgcXVlcnkgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHBheWxvYWRbXCJxdWVyeVwiXSA9IHF1ZXJ5O1xuICAgIH1cbiAgICBjb25zdCB1cmkgPSBuZXcgVVJMKHRoaXMuY2xpZW50LmNvbmZpZy5lbmRwb2ludCArIGFwaVBhdGgpO1xuICAgIGNvbnN0IGFwaUhlYWRlcnMgPSB7XG4gICAgICBcIngtc2RrLWdyYXBocWxcIjogXCJ0cnVlXCIsXG4gICAgICBcImNvbnRlbnQtdHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIlxuICAgIH07XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuY2xpZW50LmNhbGwoXG4gICAgICBcInBvc3RcIixcbiAgICAgIHVyaSxcbiAgICAgIGFwaUhlYWRlcnMsXG4gICAgICBwYXlsb2FkXG4gICAgKTtcbiAgfVxuICAvKipcbiAgICogR3JhcGhRTCBlbmRwb2ludFxuICAgKlxuICAgKiBFeGVjdXRlIGEgR3JhcGhRTCBtdXRhdGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtvYmplY3R9IHF1ZXJ5XG4gICAqIEB0aHJvd3Mge0FwcHdyaXRlRXhjZXB0aW9ufVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTx7fT59XG4gICAqL1xuICBhc3luYyBtdXRhdGlvbihxdWVyeSkge1xuICAgIGlmICh0eXBlb2YgcXVlcnkgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRocm93IG5ldyBjbGllbnQuQXBwd3JpdGVFeGNlcHRpb24oJ01pc3NpbmcgcmVxdWlyZWQgcGFyYW1ldGVyOiBcInF1ZXJ5XCInKTtcbiAgICB9XG4gICAgY29uc3QgYXBpUGF0aCA9IFwiL2dyYXBocWwvbXV0YXRpb25cIjtcbiAgICBjb25zdCBwYXlsb2FkID0ge307XG4gICAgaWYgKHR5cGVvZiBxdWVyeSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgcGF5bG9hZFtcInF1ZXJ5XCJdID0gcXVlcnk7XG4gICAgfVxuICAgIGNvbnN0IHVyaSA9IG5ldyBVUkwodGhpcy5jbGllbnQuY29uZmlnLmVuZHBvaW50ICsgYXBpUGF0aCk7XG4gICAgY29uc3QgYXBpSGVhZGVycyA9IHtcbiAgICAgIFwieC1zZGstZ3JhcGhxbFwiOiBcInRydWVcIixcbiAgICAgIFwiY29udGVudC10eXBlXCI6IFwiYXBwbGljYXRpb24vanNvblwiXG4gICAgfTtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5jbGllbnQuY2FsbChcbiAgICAgIFwicG9zdFwiLFxuICAgICAgdXJpLFxuICAgICAgYXBpSGVhZGVycyxcbiAgICAgIHBheWxvYWRcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydHMuR3JhcGhxbCA9IEdyYXBocWw7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vdXQuanMubWFwXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ncmFwaHFsLmpzLm1hcCJdLCJuYW1lcyI6WyJjbGllbnQiLCJyZXF1aXJlIiwiR3JhcGhxbCIsImNvbnN0cnVjdG9yIiwicXVlcnkiLCJBcHB3cml0ZUV4Y2VwdGlvbiIsImFwaVBhdGgiLCJwYXlsb2FkIiwidXJpIiwiVVJMIiwiY29uZmlnIiwiZW5kcG9pbnQiLCJhcGlIZWFkZXJzIiwiY2FsbCIsIm11dGF0aW9uIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/services/graphql.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/services/health.js":
/*!************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/services/health.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar client = __webpack_require__(/*! ../client */ \"(rsc)/./node_modules/node-appwrite/dist/client.js\");\nclass Health {\n    constructor(client){\n        this.client = client;\n    }\n    /**\n   * Get HTTP\n   *\n   * Check the Appwrite HTTP server is up and responsive.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthStatus>}\n   */ async get() {\n        const apiPath = \"/health\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get antivirus\n   *\n   * Check the Appwrite Antivirus server is up and connection is successful.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthAntivirus>}\n   */ async getAntivirus() {\n        const apiPath = \"/health/anti-virus\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get cache\n   *\n   * Check the Appwrite in-memory cache servers are up and connection is successful.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthStatus>}\n   */ async getCache() {\n        const apiPath = \"/health/cache\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get the SSL certificate for a domain\n   *\n   * Get the SSL certificate for a domain\n   *\n   * @param {string} domain\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthCertificate>}\n   */ async getCertificate(domain) {\n        const apiPath = \"/health/certificate\";\n        const payload = {};\n        if (typeof domain !== \"undefined\") {\n            payload[\"domain\"] = domain;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get DB\n   *\n   * Check the Appwrite database servers are up and connection is successful.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthStatus>}\n   */ async getDB() {\n        const apiPath = \"/health/db\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get pubsub\n   *\n   * Check the Appwrite pub-sub servers are up and connection is successful.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthStatus>}\n   */ async getPubSub() {\n        const apiPath = \"/health/pubsub\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get queue\n   *\n   * Check the Appwrite queue messaging servers are up and connection is successful.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthStatus>}\n   */ async getQueue() {\n        const apiPath = \"/health/queue\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get builds queue\n   *\n   * Get the number of builds that are waiting to be processed in the Appwrite internal queue server.\n   *\n   * @param {number} threshold\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthQueue>}\n   */ async getQueueBuilds(threshold) {\n        const apiPath = \"/health/queue/builds\";\n        const payload = {};\n        if (typeof threshold !== \"undefined\") {\n            payload[\"threshold\"] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get certificates queue\n   *\n   * Get the number of certificates that are waiting to be issued against [Letsencrypt](https://letsencrypt.org/) in the Appwrite internal queue server.\n   *\n   * @param {number} threshold\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthQueue>}\n   */ async getQueueCertificates(threshold) {\n        const apiPath = \"/health/queue/certificates\";\n        const payload = {};\n        if (typeof threshold !== \"undefined\") {\n            payload[\"threshold\"] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get databases queue\n   *\n   * Get the number of database changes that are waiting to be processed in the Appwrite internal queue server.\n   *\n   * @param {string} name\n   * @param {number} threshold\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthQueue>}\n   */ async getQueueDatabases(name, threshold) {\n        const apiPath = \"/health/queue/databases\";\n        const payload = {};\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof threshold !== \"undefined\") {\n            payload[\"threshold\"] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get deletes queue\n   *\n   * Get the number of background destructive changes that are waiting to be processed in the Appwrite internal queue server.\n   *\n   * @param {number} threshold\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthQueue>}\n   */ async getQueueDeletes(threshold) {\n        const apiPath = \"/health/queue/deletes\";\n        const payload = {};\n        if (typeof threshold !== \"undefined\") {\n            payload[\"threshold\"] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n       * Get number of failed queue jobs\n       *\n       * Returns the amount of failed jobs in a given queue.\n  \n       *\n       * @param {Name} name\n       * @param {number} threshold\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.HealthQueue>}\n       */ async getFailedJobs(name, threshold) {\n        if (typeof name === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = \"/health/queue/failed/{name}\".replace(\"{name}\", name);\n        const payload = {};\n        if (typeof threshold !== \"undefined\") {\n            payload[\"threshold\"] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get functions queue\n   *\n   * Get the number of function executions that are waiting to be processed in the Appwrite internal queue server.\n   *\n   * @param {number} threshold\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthQueue>}\n   */ async getQueueFunctions(threshold) {\n        const apiPath = \"/health/queue/functions\";\n        const payload = {};\n        if (typeof threshold !== \"undefined\") {\n            payload[\"threshold\"] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get logs queue\n   *\n   * Get the number of logs that are waiting to be processed in the Appwrite internal queue server.\n   *\n   * @param {number} threshold\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthQueue>}\n   */ async getQueueLogs(threshold) {\n        const apiPath = \"/health/queue/logs\";\n        const payload = {};\n        if (typeof threshold !== \"undefined\") {\n            payload[\"threshold\"] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get mails queue\n   *\n   * Get the number of mails that are waiting to be processed in the Appwrite internal queue server.\n   *\n   * @param {number} threshold\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthQueue>}\n   */ async getQueueMails(threshold) {\n        const apiPath = \"/health/queue/mails\";\n        const payload = {};\n        if (typeof threshold !== \"undefined\") {\n            payload[\"threshold\"] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get messaging queue\n   *\n   * Get the number of messages that are waiting to be processed in the Appwrite internal queue server.\n   *\n   * @param {number} threshold\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthQueue>}\n   */ async getQueueMessaging(threshold) {\n        const apiPath = \"/health/queue/messaging\";\n        const payload = {};\n        if (typeof threshold !== \"undefined\") {\n            payload[\"threshold\"] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get migrations queue\n   *\n   * Get the number of migrations that are waiting to be processed in the Appwrite internal queue server.\n   *\n   * @param {number} threshold\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthQueue>}\n   */ async getQueueMigrations(threshold) {\n        const apiPath = \"/health/queue/migrations\";\n        const payload = {};\n        if (typeof threshold !== \"undefined\") {\n            payload[\"threshold\"] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get usage queue\n   *\n   * Get the number of metrics that are waiting to be processed in the Appwrite internal queue server.\n   *\n   * @param {number} threshold\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthQueue>}\n   */ async getQueueUsage(threshold) {\n        const apiPath = \"/health/queue/usage\";\n        const payload = {};\n        if (typeof threshold !== \"undefined\") {\n            payload[\"threshold\"] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get usage dump queue\n   *\n   * Get the number of projects containing metrics that are waiting to be processed in the Appwrite internal queue server.\n   *\n   * @param {number} threshold\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthQueue>}\n   */ async getQueueUsageDump(threshold) {\n        const apiPath = \"/health/queue/usage-dump\";\n        const payload = {};\n        if (typeof threshold !== \"undefined\") {\n            payload[\"threshold\"] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get webhooks queue\n   *\n   * Get the number of webhooks that are waiting to be processed in the Appwrite internal queue server.\n   *\n   * @param {number} threshold\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthQueue>}\n   */ async getQueueWebhooks(threshold) {\n        const apiPath = \"/health/queue/webhooks\";\n        const payload = {};\n        if (typeof threshold !== \"undefined\") {\n            payload[\"threshold\"] = threshold;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get storage\n   *\n   * Check the Appwrite storage device is up and connection is successful.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthStatus>}\n   */ async getStorage() {\n        const apiPath = \"/health/storage\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get local storage\n   *\n   * Check the Appwrite local storage device is up and connection is successful.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthStatus>}\n   */ async getStorageLocal() {\n        const apiPath = \"/health/storage/local\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get time\n   *\n   * Check the Appwrite server time is synced with Google remote NTP server. We use this technology to smoothly handle leap seconds with no disruptive events. The [Network Time Protocol](https://en.wikipedia.org/wiki/Network_Time_Protocol) (NTP) is used by hundreds of millions of computers and devices to synchronize their clocks over the Internet. If your computer sets its own clock, it likely uses NTP.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.HealthTime>}\n   */ async getTime() {\n        const apiPath = \"/health/time\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n}\nexports.Health = Health; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=health.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/services/health.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/services/locale.js":
/*!************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/services/locale.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nclass Locale {\n    constructor(client){\n        this.client = client;\n    }\n    /**\n       * Get user locale\n       *\n       * Get the current user location based on IP. Returns an object with user country code, country name, continent name, continent code, ip address and suggested currency. You can use the locale header to get the data in a supported language.\n  \n  ([IP Geolocation by DB-IP](https://db-ip.com))\n       *\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Locale>}\n       */ async get() {\n        const apiPath = \"/locale\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * List Locale Codes\n   *\n   * List of all locale codes in [ISO 639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes).\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.LocaleCodeList>}\n   */ async listCodes() {\n        const apiPath = \"/locale/codes\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * List continents\n   *\n   * List of all continents. You can use the locale header to get the data in a supported language.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.ContinentList>}\n   */ async listContinents() {\n        const apiPath = \"/locale/continents\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * List countries\n   *\n   * List of all countries. You can use the locale header to get the data in a supported language.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.CountryList>}\n   */ async listCountries() {\n        const apiPath = \"/locale/countries\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * List EU countries\n   *\n   * List of all countries that are currently members of the EU. You can use the locale header to get the data in a supported language.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.CountryList>}\n   */ async listCountriesEU() {\n        const apiPath = \"/locale/countries/eu\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * List countries phone codes\n   *\n   * List of all countries phone codes. You can use the locale header to get the data in a supported language.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.PhoneList>}\n   */ async listCountriesPhones() {\n        const apiPath = \"/locale/countries/phones\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * List currencies\n   *\n   * List of all currencies, including currency symbol, name, plural, and decimal digits for all major and minor currencies. You can use the locale header to get the data in a supported language.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.CurrencyList>}\n   */ async listCurrencies() {\n        const apiPath = \"/locale/currencies\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * List languages\n   *\n   * List of all languages classified by ISO 639-1 including 2-letter code, name in English, and name in the respective language.\n   *\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.LanguageList>}\n   */ async listLanguages() {\n        const apiPath = \"/locale/languages\";\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n}\nexports.Locale = Locale; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=locale.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/services/locale.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/services/messaging.js":
/*!***************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/services/messaging.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar client = __webpack_require__(/*! ../client */ \"(rsc)/./node_modules/node-appwrite/dist/client.js\");\nclass Messaging {\n    constructor(client){\n        this.client = client;\n    }\n    /**\n   * List messages\n   *\n   * Get a list of all messages from the current Appwrite project.\n   *\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.MessageList>}\n   */ async listMessages(queries, search) {\n        const apiPath = \"/messaging/messages\";\n        const payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        if (typeof search !== \"undefined\") {\n            payload[\"search\"] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create email\n   *\n   * Create a new email message.\n   *\n   * @param {string} messageId\n   * @param {string} subject\n   * @param {string} content\n   * @param {string[]} topics\n   * @param {string[]} users\n   * @param {string[]} targets\n   * @param {string[]} cc\n   * @param {string[]} bcc\n   * @param {string[]} attachments\n   * @param {boolean} draft\n   * @param {boolean} html\n   * @param {string} scheduledAt\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Message>}\n   */ async createEmail(messageId, subject, content, topics, users, targets, cc, bcc, attachments, draft, html, scheduledAt) {\n        if (typeof messageId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"messageId\"');\n        }\n        if (typeof subject === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"subject\"');\n        }\n        if (typeof content === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"content\"');\n        }\n        const apiPath = \"/messaging/messages/email\";\n        const payload = {};\n        if (typeof messageId !== \"undefined\") {\n            payload[\"messageId\"] = messageId;\n        }\n        if (typeof subject !== \"undefined\") {\n            payload[\"subject\"] = subject;\n        }\n        if (typeof content !== \"undefined\") {\n            payload[\"content\"] = content;\n        }\n        if (typeof topics !== \"undefined\") {\n            payload[\"topics\"] = topics;\n        }\n        if (typeof users !== \"undefined\") {\n            payload[\"users\"] = users;\n        }\n        if (typeof targets !== \"undefined\") {\n            payload[\"targets\"] = targets;\n        }\n        if (typeof cc !== \"undefined\") {\n            payload[\"cc\"] = cc;\n        }\n        if (typeof bcc !== \"undefined\") {\n            payload[\"bcc\"] = bcc;\n        }\n        if (typeof attachments !== \"undefined\") {\n            payload[\"attachments\"] = attachments;\n        }\n        if (typeof draft !== \"undefined\") {\n            payload[\"draft\"] = draft;\n        }\n        if (typeof html !== \"undefined\") {\n            payload[\"html\"] = html;\n        }\n        if (typeof scheduledAt !== \"undefined\") {\n            payload[\"scheduledAt\"] = scheduledAt;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n       * Update email\n       *\n       * Update an email message by its unique ID.\n  \n       *\n       * @param {string} messageId\n       * @param {string[]} topics\n       * @param {string[]} users\n       * @param {string[]} targets\n       * @param {string} subject\n       * @param {string} content\n       * @param {boolean} draft\n       * @param {boolean} html\n       * @param {string[]} cc\n       * @param {string[]} bcc\n       * @param {string} scheduledAt\n       * @param {string[]} attachments\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Message>}\n       */ async updateEmail(messageId, topics, users, targets, subject, content, draft, html, cc, bcc, scheduledAt, attachments) {\n        if (typeof messageId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"messageId\"');\n        }\n        const apiPath = \"/messaging/messages/email/{messageId}\".replace(\"{messageId}\", messageId);\n        const payload = {};\n        if (typeof topics !== \"undefined\") {\n            payload[\"topics\"] = topics;\n        }\n        if (typeof users !== \"undefined\") {\n            payload[\"users\"] = users;\n        }\n        if (typeof targets !== \"undefined\") {\n            payload[\"targets\"] = targets;\n        }\n        if (typeof subject !== \"undefined\") {\n            payload[\"subject\"] = subject;\n        }\n        if (typeof content !== \"undefined\") {\n            payload[\"content\"] = content;\n        }\n        if (typeof draft !== \"undefined\") {\n            payload[\"draft\"] = draft;\n        }\n        if (typeof html !== \"undefined\") {\n            payload[\"html\"] = html;\n        }\n        if (typeof cc !== \"undefined\") {\n            payload[\"cc\"] = cc;\n        }\n        if (typeof bcc !== \"undefined\") {\n            payload[\"bcc\"] = bcc;\n        }\n        if (typeof scheduledAt !== \"undefined\") {\n            payload[\"scheduledAt\"] = scheduledAt;\n        }\n        if (typeof attachments !== \"undefined\") {\n            payload[\"attachments\"] = attachments;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create push notification\n   *\n   * Create a new push notification.\n   *\n   * @param {string} messageId\n   * @param {string} title\n   * @param {string} body\n   * @param {string[]} topics\n   * @param {string[]} users\n   * @param {string[]} targets\n   * @param {object} data\n   * @param {string} action\n   * @param {string} image\n   * @param {string} icon\n   * @param {string} sound\n   * @param {string} color\n   * @param {string} tag\n   * @param {string} badge\n   * @param {boolean} draft\n   * @param {string} scheduledAt\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Message>}\n   */ async createPush(messageId, title, body, topics, users, targets, data, action, image, icon, sound, color, tag, badge, draft, scheduledAt) {\n        if (typeof messageId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"messageId\"');\n        }\n        if (typeof title === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"title\"');\n        }\n        if (typeof body === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"body\"');\n        }\n        const apiPath = \"/messaging/messages/push\";\n        const payload = {};\n        if (typeof messageId !== \"undefined\") {\n            payload[\"messageId\"] = messageId;\n        }\n        if (typeof title !== \"undefined\") {\n            payload[\"title\"] = title;\n        }\n        if (typeof body !== \"undefined\") {\n            payload[\"body\"] = body;\n        }\n        if (typeof topics !== \"undefined\") {\n            payload[\"topics\"] = topics;\n        }\n        if (typeof users !== \"undefined\") {\n            payload[\"users\"] = users;\n        }\n        if (typeof targets !== \"undefined\") {\n            payload[\"targets\"] = targets;\n        }\n        if (typeof data !== \"undefined\") {\n            payload[\"data\"] = data;\n        }\n        if (typeof action !== \"undefined\") {\n            payload[\"action\"] = action;\n        }\n        if (typeof image !== \"undefined\") {\n            payload[\"image\"] = image;\n        }\n        if (typeof icon !== \"undefined\") {\n            payload[\"icon\"] = icon;\n        }\n        if (typeof sound !== \"undefined\") {\n            payload[\"sound\"] = sound;\n        }\n        if (typeof color !== \"undefined\") {\n            payload[\"color\"] = color;\n        }\n        if (typeof tag !== \"undefined\") {\n            payload[\"tag\"] = tag;\n        }\n        if (typeof badge !== \"undefined\") {\n            payload[\"badge\"] = badge;\n        }\n        if (typeof draft !== \"undefined\") {\n            payload[\"draft\"] = draft;\n        }\n        if (typeof scheduledAt !== \"undefined\") {\n            payload[\"scheduledAt\"] = scheduledAt;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n       * Update push notification\n       *\n       * Update a push notification by its unique ID.\n  \n       *\n       * @param {string} messageId\n       * @param {string[]} topics\n       * @param {string[]} users\n       * @param {string[]} targets\n       * @param {string} title\n       * @param {string} body\n       * @param {object} data\n       * @param {string} action\n       * @param {string} image\n       * @param {string} icon\n       * @param {string} sound\n       * @param {string} color\n       * @param {string} tag\n       * @param {number} badge\n       * @param {boolean} draft\n       * @param {string} scheduledAt\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Message>}\n       */ async updatePush(messageId, topics, users, targets, title, body, data, action, image, icon, sound, color, tag, badge, draft, scheduledAt) {\n        if (typeof messageId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"messageId\"');\n        }\n        const apiPath = \"/messaging/messages/push/{messageId}\".replace(\"{messageId}\", messageId);\n        const payload = {};\n        if (typeof topics !== \"undefined\") {\n            payload[\"topics\"] = topics;\n        }\n        if (typeof users !== \"undefined\") {\n            payload[\"users\"] = users;\n        }\n        if (typeof targets !== \"undefined\") {\n            payload[\"targets\"] = targets;\n        }\n        if (typeof title !== \"undefined\") {\n            payload[\"title\"] = title;\n        }\n        if (typeof body !== \"undefined\") {\n            payload[\"body\"] = body;\n        }\n        if (typeof data !== \"undefined\") {\n            payload[\"data\"] = data;\n        }\n        if (typeof action !== \"undefined\") {\n            payload[\"action\"] = action;\n        }\n        if (typeof image !== \"undefined\") {\n            payload[\"image\"] = image;\n        }\n        if (typeof icon !== \"undefined\") {\n            payload[\"icon\"] = icon;\n        }\n        if (typeof sound !== \"undefined\") {\n            payload[\"sound\"] = sound;\n        }\n        if (typeof color !== \"undefined\") {\n            payload[\"color\"] = color;\n        }\n        if (typeof tag !== \"undefined\") {\n            payload[\"tag\"] = tag;\n        }\n        if (typeof badge !== \"undefined\") {\n            payload[\"badge\"] = badge;\n        }\n        if (typeof draft !== \"undefined\") {\n            payload[\"draft\"] = draft;\n        }\n        if (typeof scheduledAt !== \"undefined\") {\n            payload[\"scheduledAt\"] = scheduledAt;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create SMS\n   *\n   * Create a new SMS message.\n   *\n   * @param {string} messageId\n   * @param {string} content\n   * @param {string[]} topics\n   * @param {string[]} users\n   * @param {string[]} targets\n   * @param {boolean} draft\n   * @param {string} scheduledAt\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Message>}\n   */ async createSms(messageId, content, topics, users, targets, draft, scheduledAt) {\n        if (typeof messageId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"messageId\"');\n        }\n        if (typeof content === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"content\"');\n        }\n        const apiPath = \"/messaging/messages/sms\";\n        const payload = {};\n        if (typeof messageId !== \"undefined\") {\n            payload[\"messageId\"] = messageId;\n        }\n        if (typeof content !== \"undefined\") {\n            payload[\"content\"] = content;\n        }\n        if (typeof topics !== \"undefined\") {\n            payload[\"topics\"] = topics;\n        }\n        if (typeof users !== \"undefined\") {\n            payload[\"users\"] = users;\n        }\n        if (typeof targets !== \"undefined\") {\n            payload[\"targets\"] = targets;\n        }\n        if (typeof draft !== \"undefined\") {\n            payload[\"draft\"] = draft;\n        }\n        if (typeof scheduledAt !== \"undefined\") {\n            payload[\"scheduledAt\"] = scheduledAt;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n       * Update SMS\n       *\n       * Update an email message by its unique ID.\n  \n       *\n       * @param {string} messageId\n       * @param {string[]} topics\n       * @param {string[]} users\n       * @param {string[]} targets\n       * @param {string} content\n       * @param {boolean} draft\n       * @param {string} scheduledAt\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Message>}\n       */ async updateSms(messageId, topics, users, targets, content, draft, scheduledAt) {\n        if (typeof messageId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"messageId\"');\n        }\n        const apiPath = \"/messaging/messages/sms/{messageId}\".replace(\"{messageId}\", messageId);\n        const payload = {};\n        if (typeof topics !== \"undefined\") {\n            payload[\"topics\"] = topics;\n        }\n        if (typeof users !== \"undefined\") {\n            payload[\"users\"] = users;\n        }\n        if (typeof targets !== \"undefined\") {\n            payload[\"targets\"] = targets;\n        }\n        if (typeof content !== \"undefined\") {\n            payload[\"content\"] = content;\n        }\n        if (typeof draft !== \"undefined\") {\n            payload[\"draft\"] = draft;\n        }\n        if (typeof scheduledAt !== \"undefined\") {\n            payload[\"scheduledAt\"] = scheduledAt;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n       * Get message\n       *\n       * Get a message by its unique ID.\n  \n       *\n       * @param {string} messageId\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Message>}\n       */ async getMessage(messageId) {\n        if (typeof messageId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"messageId\"');\n        }\n        const apiPath = \"/messaging/messages/{messageId}\".replace(\"{messageId}\", messageId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Delete message\n   *\n   * Delete a message. If the message is not a draft or scheduled, but has been sent, this will not recall the message.\n   *\n   * @param {string} messageId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async delete(messageId) {\n        if (typeof messageId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"messageId\"');\n        }\n        const apiPath = \"/messaging/messages/{messageId}\".replace(\"{messageId}\", messageId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"delete\", uri, apiHeaders, payload);\n    }\n    /**\n   * List message logs\n   *\n   * Get the message activity logs listed by its unique ID.\n   *\n   * @param {string} messageId\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.LogList>}\n   */ async listMessageLogs(messageId, queries) {\n        if (typeof messageId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"messageId\"');\n        }\n        const apiPath = \"/messaging/messages/{messageId}/logs\".replace(\"{messageId}\", messageId);\n        const payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * List message targets\n   *\n   * Get a list of the targets associated with a message.\n   *\n   * @param {string} messageId\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.TargetList>}\n   */ async listTargets(messageId, queries) {\n        if (typeof messageId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"messageId\"');\n        }\n        const apiPath = \"/messaging/messages/{messageId}/targets\".replace(\"{messageId}\", messageId);\n        const payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * List providers\n   *\n   * Get a list of all providers from the current Appwrite project.\n   *\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.ProviderList>}\n   */ async listProviders(queries, search) {\n        const apiPath = \"/messaging/providers\";\n        const payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        if (typeof search !== \"undefined\") {\n            payload[\"search\"] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create APNS provider\n   *\n   * Create a new Apple Push Notification service provider.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {string} authKey\n   * @param {string} authKeyId\n   * @param {string} teamId\n   * @param {string} bundleId\n   * @param {boolean} sandbox\n   * @param {boolean} enabled\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */ async createApnsProvider(providerId, name, authKey, authKeyId, teamId, bundleId, sandbox, enabled) {\n        if (typeof providerId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = \"/messaging/providers/apns\";\n        const payload = {};\n        if (typeof providerId !== \"undefined\") {\n            payload[\"providerId\"] = providerId;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof authKey !== \"undefined\") {\n            payload[\"authKey\"] = authKey;\n        }\n        if (typeof authKeyId !== \"undefined\") {\n            payload[\"authKeyId\"] = authKeyId;\n        }\n        if (typeof teamId !== \"undefined\") {\n            payload[\"teamId\"] = teamId;\n        }\n        if (typeof bundleId !== \"undefined\") {\n            payload[\"bundleId\"] = bundleId;\n        }\n        if (typeof sandbox !== \"undefined\") {\n            payload[\"sandbox\"] = sandbox;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update APNS provider\n   *\n   * Update a Apple Push Notification service provider by its unique ID.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {boolean} enabled\n   * @param {string} authKey\n   * @param {string} authKeyId\n   * @param {string} teamId\n   * @param {string} bundleId\n   * @param {boolean} sandbox\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */ async updateApnsProvider(providerId, name, enabled, authKey, authKeyId, teamId, bundleId, sandbox) {\n        if (typeof providerId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        const apiPath = \"/messaging/providers/apns/{providerId}\".replace(\"{providerId}\", providerId);\n        const payload = {};\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        if (typeof authKey !== \"undefined\") {\n            payload[\"authKey\"] = authKey;\n        }\n        if (typeof authKeyId !== \"undefined\") {\n            payload[\"authKeyId\"] = authKeyId;\n        }\n        if (typeof teamId !== \"undefined\") {\n            payload[\"teamId\"] = teamId;\n        }\n        if (typeof bundleId !== \"undefined\") {\n            payload[\"bundleId\"] = bundleId;\n        }\n        if (typeof sandbox !== \"undefined\") {\n            payload[\"sandbox\"] = sandbox;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create FCM provider\n   *\n   * Create a new Firebase Cloud Messaging provider.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {object} serviceAccountJSON\n   * @param {boolean} enabled\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */ async createFcmProvider(providerId, name, serviceAccountJSON, enabled) {\n        if (typeof providerId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = \"/messaging/providers/fcm\";\n        const payload = {};\n        if (typeof providerId !== \"undefined\") {\n            payload[\"providerId\"] = providerId;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof serviceAccountJSON !== \"undefined\") {\n            payload[\"serviceAccountJSON\"] = serviceAccountJSON;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update FCM provider\n   *\n   * Update a Firebase Cloud Messaging provider by its unique ID.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {boolean} enabled\n   * @param {object} serviceAccountJSON\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */ async updateFcmProvider(providerId, name, enabled, serviceAccountJSON) {\n        if (typeof providerId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        const apiPath = \"/messaging/providers/fcm/{providerId}\".replace(\"{providerId}\", providerId);\n        const payload = {};\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        if (typeof serviceAccountJSON !== \"undefined\") {\n            payload[\"serviceAccountJSON\"] = serviceAccountJSON;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create Mailgun provider\n   *\n   * Create a new Mailgun provider.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {string} apiKey\n   * @param {string} domain\n   * @param {boolean} isEuRegion\n   * @param {string} fromName\n   * @param {string} fromEmail\n   * @param {string} replyToName\n   * @param {string} replyToEmail\n   * @param {boolean} enabled\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */ async createMailgunProvider(providerId, name, apiKey, domain, isEuRegion, fromName, fromEmail, replyToName, replyToEmail, enabled) {\n        if (typeof providerId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = \"/messaging/providers/mailgun\";\n        const payload = {};\n        if (typeof providerId !== \"undefined\") {\n            payload[\"providerId\"] = providerId;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof apiKey !== \"undefined\") {\n            payload[\"apiKey\"] = apiKey;\n        }\n        if (typeof domain !== \"undefined\") {\n            payload[\"domain\"] = domain;\n        }\n        if (typeof isEuRegion !== \"undefined\") {\n            payload[\"isEuRegion\"] = isEuRegion;\n        }\n        if (typeof fromName !== \"undefined\") {\n            payload[\"fromName\"] = fromName;\n        }\n        if (typeof fromEmail !== \"undefined\") {\n            payload[\"fromEmail\"] = fromEmail;\n        }\n        if (typeof replyToName !== \"undefined\") {\n            payload[\"replyToName\"] = replyToName;\n        }\n        if (typeof replyToEmail !== \"undefined\") {\n            payload[\"replyToEmail\"] = replyToEmail;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update Mailgun provider\n   *\n   * Update a Mailgun provider by its unique ID.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {string} apiKey\n   * @param {string} domain\n   * @param {boolean} isEuRegion\n   * @param {boolean} enabled\n   * @param {string} fromName\n   * @param {string} fromEmail\n   * @param {string} replyToName\n   * @param {string} replyToEmail\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */ async updateMailgunProvider(providerId, name, apiKey, domain, isEuRegion, enabled, fromName, fromEmail, replyToName, replyToEmail) {\n        if (typeof providerId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        const apiPath = \"/messaging/providers/mailgun/{providerId}\".replace(\"{providerId}\", providerId);\n        const payload = {};\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof apiKey !== \"undefined\") {\n            payload[\"apiKey\"] = apiKey;\n        }\n        if (typeof domain !== \"undefined\") {\n            payload[\"domain\"] = domain;\n        }\n        if (typeof isEuRegion !== \"undefined\") {\n            payload[\"isEuRegion\"] = isEuRegion;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        if (typeof fromName !== \"undefined\") {\n            payload[\"fromName\"] = fromName;\n        }\n        if (typeof fromEmail !== \"undefined\") {\n            payload[\"fromEmail\"] = fromEmail;\n        }\n        if (typeof replyToName !== \"undefined\") {\n            payload[\"replyToName\"] = replyToName;\n        }\n        if (typeof replyToEmail !== \"undefined\") {\n            payload[\"replyToEmail\"] = replyToEmail;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create Msg91 provider\n   *\n   * Create a new MSG91 provider.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {string} templateId\n   * @param {string} senderId\n   * @param {string} authKey\n   * @param {boolean} enabled\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */ async createMsg91Provider(providerId, name, templateId, senderId, authKey, enabled) {\n        if (typeof providerId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = \"/messaging/providers/msg91\";\n        const payload = {};\n        if (typeof providerId !== \"undefined\") {\n            payload[\"providerId\"] = providerId;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof templateId !== \"undefined\") {\n            payload[\"templateId\"] = templateId;\n        }\n        if (typeof senderId !== \"undefined\") {\n            payload[\"senderId\"] = senderId;\n        }\n        if (typeof authKey !== \"undefined\") {\n            payload[\"authKey\"] = authKey;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update Msg91 provider\n   *\n   * Update a MSG91 provider by its unique ID.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {boolean} enabled\n   * @param {string} templateId\n   * @param {string} senderId\n   * @param {string} authKey\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */ async updateMsg91Provider(providerId, name, enabled, templateId, senderId, authKey) {\n        if (typeof providerId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        const apiPath = \"/messaging/providers/msg91/{providerId}\".replace(\"{providerId}\", providerId);\n        const payload = {};\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        if (typeof templateId !== \"undefined\") {\n            payload[\"templateId\"] = templateId;\n        }\n        if (typeof senderId !== \"undefined\") {\n            payload[\"senderId\"] = senderId;\n        }\n        if (typeof authKey !== \"undefined\") {\n            payload[\"authKey\"] = authKey;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create Sendgrid provider\n   *\n   * Create a new Sendgrid provider.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {string} apiKey\n   * @param {string} fromName\n   * @param {string} fromEmail\n   * @param {string} replyToName\n   * @param {string} replyToEmail\n   * @param {boolean} enabled\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */ async createSendgridProvider(providerId, name, apiKey, fromName, fromEmail, replyToName, replyToEmail, enabled) {\n        if (typeof providerId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = \"/messaging/providers/sendgrid\";\n        const payload = {};\n        if (typeof providerId !== \"undefined\") {\n            payload[\"providerId\"] = providerId;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof apiKey !== \"undefined\") {\n            payload[\"apiKey\"] = apiKey;\n        }\n        if (typeof fromName !== \"undefined\") {\n            payload[\"fromName\"] = fromName;\n        }\n        if (typeof fromEmail !== \"undefined\") {\n            payload[\"fromEmail\"] = fromEmail;\n        }\n        if (typeof replyToName !== \"undefined\") {\n            payload[\"replyToName\"] = replyToName;\n        }\n        if (typeof replyToEmail !== \"undefined\") {\n            payload[\"replyToEmail\"] = replyToEmail;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update Sendgrid provider\n   *\n   * Update a Sendgrid provider by its unique ID.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {boolean} enabled\n   * @param {string} apiKey\n   * @param {string} fromName\n   * @param {string} fromEmail\n   * @param {string} replyToName\n   * @param {string} replyToEmail\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */ async updateSendgridProvider(providerId, name, enabled, apiKey, fromName, fromEmail, replyToName, replyToEmail) {\n        if (typeof providerId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        const apiPath = \"/messaging/providers/sendgrid/{providerId}\".replace(\"{providerId}\", providerId);\n        const payload = {};\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        if (typeof apiKey !== \"undefined\") {\n            payload[\"apiKey\"] = apiKey;\n        }\n        if (typeof fromName !== \"undefined\") {\n            payload[\"fromName\"] = fromName;\n        }\n        if (typeof fromEmail !== \"undefined\") {\n            payload[\"fromEmail\"] = fromEmail;\n        }\n        if (typeof replyToName !== \"undefined\") {\n            payload[\"replyToName\"] = replyToName;\n        }\n        if (typeof replyToEmail !== \"undefined\") {\n            payload[\"replyToEmail\"] = replyToEmail;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create SMTP provider\n   *\n   * Create a new SMTP provider.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {string} host\n   * @param {number} port\n   * @param {string} username\n   * @param {string} password\n   * @param {SmtpEncryption} encryption\n   * @param {boolean} autoTLS\n   * @param {string} mailer\n   * @param {string} fromName\n   * @param {string} fromEmail\n   * @param {string} replyToName\n   * @param {string} replyToEmail\n   * @param {boolean} enabled\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */ async createSmtpProvider(providerId, name, host, port, username, password, encryption, autoTLS, mailer, fromName, fromEmail, replyToName, replyToEmail, enabled) {\n        if (typeof providerId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"name\"');\n        }\n        if (typeof host === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"host\"');\n        }\n        const apiPath = \"/messaging/providers/smtp\";\n        const payload = {};\n        if (typeof providerId !== \"undefined\") {\n            payload[\"providerId\"] = providerId;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof host !== \"undefined\") {\n            payload[\"host\"] = host;\n        }\n        if (typeof port !== \"undefined\") {\n            payload[\"port\"] = port;\n        }\n        if (typeof username !== \"undefined\") {\n            payload[\"username\"] = username;\n        }\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        if (typeof encryption !== \"undefined\") {\n            payload[\"encryption\"] = encryption;\n        }\n        if (typeof autoTLS !== \"undefined\") {\n            payload[\"autoTLS\"] = autoTLS;\n        }\n        if (typeof mailer !== \"undefined\") {\n            payload[\"mailer\"] = mailer;\n        }\n        if (typeof fromName !== \"undefined\") {\n            payload[\"fromName\"] = fromName;\n        }\n        if (typeof fromEmail !== \"undefined\") {\n            payload[\"fromEmail\"] = fromEmail;\n        }\n        if (typeof replyToName !== \"undefined\") {\n            payload[\"replyToName\"] = replyToName;\n        }\n        if (typeof replyToEmail !== \"undefined\") {\n            payload[\"replyToEmail\"] = replyToEmail;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update SMTP provider\n   *\n   * Update a SMTP provider by its unique ID.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {string} host\n   * @param {number} port\n   * @param {string} username\n   * @param {string} password\n   * @param {SmtpEncryption} encryption\n   * @param {boolean} autoTLS\n   * @param {string} mailer\n   * @param {string} fromName\n   * @param {string} fromEmail\n   * @param {string} replyToName\n   * @param {string} replyToEmail\n   * @param {boolean} enabled\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */ async updateSmtpProvider(providerId, name, host, port, username, password, encryption, autoTLS, mailer, fromName, fromEmail, replyToName, replyToEmail, enabled) {\n        if (typeof providerId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        const apiPath = \"/messaging/providers/smtp/{providerId}\".replace(\"{providerId}\", providerId);\n        const payload = {};\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof host !== \"undefined\") {\n            payload[\"host\"] = host;\n        }\n        if (typeof port !== \"undefined\") {\n            payload[\"port\"] = port;\n        }\n        if (typeof username !== \"undefined\") {\n            payload[\"username\"] = username;\n        }\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        if (typeof encryption !== \"undefined\") {\n            payload[\"encryption\"] = encryption;\n        }\n        if (typeof autoTLS !== \"undefined\") {\n            payload[\"autoTLS\"] = autoTLS;\n        }\n        if (typeof mailer !== \"undefined\") {\n            payload[\"mailer\"] = mailer;\n        }\n        if (typeof fromName !== \"undefined\") {\n            payload[\"fromName\"] = fromName;\n        }\n        if (typeof fromEmail !== \"undefined\") {\n            payload[\"fromEmail\"] = fromEmail;\n        }\n        if (typeof replyToName !== \"undefined\") {\n            payload[\"replyToName\"] = replyToName;\n        }\n        if (typeof replyToEmail !== \"undefined\") {\n            payload[\"replyToEmail\"] = replyToEmail;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create Telesign provider\n   *\n   * Create a new Telesign provider.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {string} from\n   * @param {string} customerId\n   * @param {string} apiKey\n   * @param {boolean} enabled\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */ async createTelesignProvider(providerId, name, from, customerId, apiKey, enabled) {\n        if (typeof providerId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = \"/messaging/providers/telesign\";\n        const payload = {};\n        if (typeof providerId !== \"undefined\") {\n            payload[\"providerId\"] = providerId;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof from !== \"undefined\") {\n            payload[\"from\"] = from;\n        }\n        if (typeof customerId !== \"undefined\") {\n            payload[\"customerId\"] = customerId;\n        }\n        if (typeof apiKey !== \"undefined\") {\n            payload[\"apiKey\"] = apiKey;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update Telesign provider\n   *\n   * Update a Telesign provider by its unique ID.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {boolean} enabled\n   * @param {string} customerId\n   * @param {string} apiKey\n   * @param {string} from\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */ async updateTelesignProvider(providerId, name, enabled, customerId, apiKey, from) {\n        if (typeof providerId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        const apiPath = \"/messaging/providers/telesign/{providerId}\".replace(\"{providerId}\", providerId);\n        const payload = {};\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        if (typeof customerId !== \"undefined\") {\n            payload[\"customerId\"] = customerId;\n        }\n        if (typeof apiKey !== \"undefined\") {\n            payload[\"apiKey\"] = apiKey;\n        }\n        if (typeof from !== \"undefined\") {\n            payload[\"from\"] = from;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create Textmagic provider\n   *\n   * Create a new Textmagic provider.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {string} from\n   * @param {string} username\n   * @param {string} apiKey\n   * @param {boolean} enabled\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */ async createTextmagicProvider(providerId, name, from, username, apiKey, enabled) {\n        if (typeof providerId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = \"/messaging/providers/textmagic\";\n        const payload = {};\n        if (typeof providerId !== \"undefined\") {\n            payload[\"providerId\"] = providerId;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof from !== \"undefined\") {\n            payload[\"from\"] = from;\n        }\n        if (typeof username !== \"undefined\") {\n            payload[\"username\"] = username;\n        }\n        if (typeof apiKey !== \"undefined\") {\n            payload[\"apiKey\"] = apiKey;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update Textmagic provider\n   *\n   * Update a Textmagic provider by its unique ID.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {boolean} enabled\n   * @param {string} username\n   * @param {string} apiKey\n   * @param {string} from\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */ async updateTextmagicProvider(providerId, name, enabled, username, apiKey, from) {\n        if (typeof providerId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        const apiPath = \"/messaging/providers/textmagic/{providerId}\".replace(\"{providerId}\", providerId);\n        const payload = {};\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        if (typeof username !== \"undefined\") {\n            payload[\"username\"] = username;\n        }\n        if (typeof apiKey !== \"undefined\") {\n            payload[\"apiKey\"] = apiKey;\n        }\n        if (typeof from !== \"undefined\") {\n            payload[\"from\"] = from;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create Twilio provider\n   *\n   * Create a new Twilio provider.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {string} from\n   * @param {string} accountSid\n   * @param {string} authToken\n   * @param {boolean} enabled\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */ async createTwilioProvider(providerId, name, from, accountSid, authToken, enabled) {\n        if (typeof providerId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = \"/messaging/providers/twilio\";\n        const payload = {};\n        if (typeof providerId !== \"undefined\") {\n            payload[\"providerId\"] = providerId;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof from !== \"undefined\") {\n            payload[\"from\"] = from;\n        }\n        if (typeof accountSid !== \"undefined\") {\n            payload[\"accountSid\"] = accountSid;\n        }\n        if (typeof authToken !== \"undefined\") {\n            payload[\"authToken\"] = authToken;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update Twilio provider\n   *\n   * Update a Twilio provider by its unique ID.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {boolean} enabled\n   * @param {string} accountSid\n   * @param {string} authToken\n   * @param {string} from\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */ async updateTwilioProvider(providerId, name, enabled, accountSid, authToken, from) {\n        if (typeof providerId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        const apiPath = \"/messaging/providers/twilio/{providerId}\".replace(\"{providerId}\", providerId);\n        const payload = {};\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        if (typeof accountSid !== \"undefined\") {\n            payload[\"accountSid\"] = accountSid;\n        }\n        if (typeof authToken !== \"undefined\") {\n            payload[\"authToken\"] = authToken;\n        }\n        if (typeof from !== \"undefined\") {\n            payload[\"from\"] = from;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create Vonage provider\n   *\n   * Create a new Vonage provider.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {string} from\n   * @param {string} apiKey\n   * @param {string} apiSecret\n   * @param {boolean} enabled\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */ async createVonageProvider(providerId, name, from, apiKey, apiSecret, enabled) {\n        if (typeof providerId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = \"/messaging/providers/vonage\";\n        const payload = {};\n        if (typeof providerId !== \"undefined\") {\n            payload[\"providerId\"] = providerId;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof from !== \"undefined\") {\n            payload[\"from\"] = from;\n        }\n        if (typeof apiKey !== \"undefined\") {\n            payload[\"apiKey\"] = apiKey;\n        }\n        if (typeof apiSecret !== \"undefined\") {\n            payload[\"apiSecret\"] = apiSecret;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update Vonage provider\n   *\n   * Update a Vonage provider by its unique ID.\n   *\n   * @param {string} providerId\n   * @param {string} name\n   * @param {boolean} enabled\n   * @param {string} apiKey\n   * @param {string} apiSecret\n   * @param {string} from\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Provider>}\n   */ async updateVonageProvider(providerId, name, enabled, apiKey, apiSecret, from) {\n        if (typeof providerId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        const apiPath = \"/messaging/providers/vonage/{providerId}\".replace(\"{providerId}\", providerId);\n        const payload = {};\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        if (typeof apiKey !== \"undefined\") {\n            payload[\"apiKey\"] = apiKey;\n        }\n        if (typeof apiSecret !== \"undefined\") {\n            payload[\"apiSecret\"] = apiSecret;\n        }\n        if (typeof from !== \"undefined\") {\n            payload[\"from\"] = from;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n       * Get provider\n       *\n       * Get a provider by its unique ID.\n  \n       *\n       * @param {string} providerId\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Provider>}\n       */ async getProvider(providerId) {\n        if (typeof providerId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        const apiPath = \"/messaging/providers/{providerId}\".replace(\"{providerId}\", providerId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Delete provider\n   *\n   * Delete a provider by its unique ID.\n   *\n   * @param {string} providerId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async deleteProvider(providerId) {\n        if (typeof providerId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        const apiPath = \"/messaging/providers/{providerId}\".replace(\"{providerId}\", providerId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"delete\", uri, apiHeaders, payload);\n    }\n    /**\n   * List provider logs\n   *\n   * Get the provider activity logs listed by its unique ID.\n   *\n   * @param {string} providerId\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.LogList>}\n   */ async listProviderLogs(providerId, queries) {\n        if (typeof providerId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"providerId\"');\n        }\n        const apiPath = \"/messaging/providers/{providerId}/logs\".replace(\"{providerId}\", providerId);\n        const payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * List subscriber logs\n   *\n   * Get the subscriber activity logs listed by its unique ID.\n   *\n   * @param {string} subscriberId\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.LogList>}\n   */ async listSubscriberLogs(subscriberId, queries) {\n        if (typeof subscriberId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"subscriberId\"');\n        }\n        const apiPath = \"/messaging/subscribers/{subscriberId}/logs\".replace(\"{subscriberId}\", subscriberId);\n        const payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * List topics\n   *\n   * Get a list of all topics from the current Appwrite project.\n   *\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.TopicList>}\n   */ async listTopics(queries, search) {\n        const apiPath = \"/messaging/topics\";\n        const payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        if (typeof search !== \"undefined\") {\n            payload[\"search\"] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create topic\n   *\n   * Create a new topic.\n   *\n   * @param {string} topicId\n   * @param {string} name\n   * @param {string[]} subscribe\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Topic>}\n   */ async createTopic(topicId, name, subscribe) {\n        if (typeof topicId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"topicId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = \"/messaging/topics\";\n        const payload = {};\n        if (typeof topicId !== \"undefined\") {\n            payload[\"topicId\"] = topicId;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof subscribe !== \"undefined\") {\n            payload[\"subscribe\"] = subscribe;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n       * Get topic\n       *\n       * Get a topic by its unique ID.\n  \n       *\n       * @param {string} topicId\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Topic>}\n       */ async getTopic(topicId) {\n        if (typeof topicId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"topicId\"');\n        }\n        const apiPath = \"/messaging/topics/{topicId}\".replace(\"{topicId}\", topicId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n       * Update topic\n       *\n       * Update a topic by its unique ID.\n  \n       *\n       * @param {string} topicId\n       * @param {string} name\n       * @param {string[]} subscribe\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Topic>}\n       */ async updateTopic(topicId, name, subscribe) {\n        if (typeof topicId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"topicId\"');\n        }\n        const apiPath = \"/messaging/topics/{topicId}\".replace(\"{topicId}\", topicId);\n        const payload = {};\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof subscribe !== \"undefined\") {\n            payload[\"subscribe\"] = subscribe;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Delete topic\n   *\n   * Delete a topic by its unique ID.\n   *\n   * @param {string} topicId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async deleteTopic(topicId) {\n        if (typeof topicId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"topicId\"');\n        }\n        const apiPath = \"/messaging/topics/{topicId}\".replace(\"{topicId}\", topicId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"delete\", uri, apiHeaders, payload);\n    }\n    /**\n   * List topic logs\n   *\n   * Get the topic activity logs listed by its unique ID.\n   *\n   * @param {string} topicId\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.LogList>}\n   */ async listTopicLogs(topicId, queries) {\n        if (typeof topicId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"topicId\"');\n        }\n        const apiPath = \"/messaging/topics/{topicId}/logs\".replace(\"{topicId}\", topicId);\n        const payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * List subscribers\n   *\n   * Get a list of all subscribers from the current Appwrite project.\n   *\n   * @param {string} topicId\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.SubscriberList>}\n   */ async listSubscribers(topicId, queries, search) {\n        if (typeof topicId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"topicId\"');\n        }\n        const apiPath = \"/messaging/topics/{topicId}/subscribers\".replace(\"{topicId}\", topicId);\n        const payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        if (typeof search !== \"undefined\") {\n            payload[\"search\"] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create subscriber\n   *\n   * Create a new subscriber.\n   *\n   * @param {string} topicId\n   * @param {string} subscriberId\n   * @param {string} targetId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Subscriber>}\n   */ async createSubscriber(topicId, subscriberId, targetId) {\n        if (typeof topicId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"topicId\"');\n        }\n        if (typeof subscriberId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"subscriberId\"');\n        }\n        if (typeof targetId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"targetId\"');\n        }\n        const apiPath = \"/messaging/topics/{topicId}/subscribers\".replace(\"{topicId}\", topicId);\n        const payload = {};\n        if (typeof subscriberId !== \"undefined\") {\n            payload[\"subscriberId\"] = subscriberId;\n        }\n        if (typeof targetId !== \"undefined\") {\n            payload[\"targetId\"] = targetId;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n       * Get subscriber\n       *\n       * Get a subscriber by its unique ID.\n  \n       *\n       * @param {string} topicId\n       * @param {string} subscriberId\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Subscriber>}\n       */ async getSubscriber(topicId, subscriberId) {\n        if (typeof topicId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"topicId\"');\n        }\n        if (typeof subscriberId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"subscriberId\"');\n        }\n        const apiPath = \"/messaging/topics/{topicId}/subscribers/{subscriberId}\".replace(\"{topicId}\", topicId).replace(\"{subscriberId}\", subscriberId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Delete subscriber\n   *\n   * Delete a subscriber by its unique ID.\n   *\n   * @param {string} topicId\n   * @param {string} subscriberId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async deleteSubscriber(topicId, subscriberId) {\n        if (typeof topicId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"topicId\"');\n        }\n        if (typeof subscriberId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"subscriberId\"');\n        }\n        const apiPath = \"/messaging/topics/{topicId}/subscribers/{subscriberId}\".replace(\"{topicId}\", topicId).replace(\"{subscriberId}\", subscriberId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"delete\", uri, apiHeaders, payload);\n    }\n}\nexports.Messaging = Messaging; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=messaging.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/services/messaging.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/services/storage.js":
/*!*************************************************************!*\
  !*** ./node_modules/node-appwrite/dist/services/storage.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar client = __webpack_require__(/*! ../client */ \"(rsc)/./node_modules/node-appwrite/dist/client.js\");\nclass Storage {\n    constructor(client){\n        this.client = client;\n    }\n    /**\n   * List buckets\n   *\n   * Get a list of all the storage buckets. You can use the query params to filter your results.\n   *\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.BucketList>}\n   */ async listBuckets(queries, search) {\n        const apiPath = \"/storage/buckets\";\n        const payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        if (typeof search !== \"undefined\") {\n            payload[\"search\"] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create bucket\n   *\n   * Create a new storage bucket.\n   *\n   * @param {string} bucketId\n   * @param {string} name\n   * @param {string[]} permissions\n   * @param {boolean} fileSecurity\n   * @param {boolean} enabled\n   * @param {number} maximumFileSize\n   * @param {string[]} allowedFileExtensions\n   * @param {Compression} compression\n   * @param {boolean} encryption\n   * @param {boolean} antivirus\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Bucket>}\n   */ async createBucket(bucketId, name, permissions, fileSecurity, enabled, maximumFileSize, allowedFileExtensions, compression, encryption, antivirus) {\n        if (typeof bucketId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = \"/storage/buckets\";\n        const payload = {};\n        if (typeof bucketId !== \"undefined\") {\n            payload[\"bucketId\"] = bucketId;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof permissions !== \"undefined\") {\n            payload[\"permissions\"] = permissions;\n        }\n        if (typeof fileSecurity !== \"undefined\") {\n            payload[\"fileSecurity\"] = fileSecurity;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        if (typeof maximumFileSize !== \"undefined\") {\n            payload[\"maximumFileSize\"] = maximumFileSize;\n        }\n        if (typeof allowedFileExtensions !== \"undefined\") {\n            payload[\"allowedFileExtensions\"] = allowedFileExtensions;\n        }\n        if (typeof compression !== \"undefined\") {\n            payload[\"compression\"] = compression;\n        }\n        if (typeof encryption !== \"undefined\") {\n            payload[\"encryption\"] = encryption;\n        }\n        if (typeof antivirus !== \"undefined\") {\n            payload[\"antivirus\"] = antivirus;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get bucket\n   *\n   * Get a storage bucket by its unique ID. This endpoint response returns a JSON object with the storage bucket metadata.\n   *\n   * @param {string} bucketId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Bucket>}\n   */ async getBucket(bucketId) {\n        if (typeof bucketId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        const apiPath = \"/storage/buckets/{bucketId}\".replace(\"{bucketId}\", bucketId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update bucket\n   *\n   * Update a storage bucket by its unique ID.\n   *\n   * @param {string} bucketId\n   * @param {string} name\n   * @param {string[]} permissions\n   * @param {boolean} fileSecurity\n   * @param {boolean} enabled\n   * @param {number} maximumFileSize\n   * @param {string[]} allowedFileExtensions\n   * @param {Compression} compression\n   * @param {boolean} encryption\n   * @param {boolean} antivirus\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Bucket>}\n   */ async updateBucket(bucketId, name, permissions, fileSecurity, enabled, maximumFileSize, allowedFileExtensions, compression, encryption, antivirus) {\n        if (typeof bucketId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = \"/storage/buckets/{bucketId}\".replace(\"{bucketId}\", bucketId);\n        const payload = {};\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof permissions !== \"undefined\") {\n            payload[\"permissions\"] = permissions;\n        }\n        if (typeof fileSecurity !== \"undefined\") {\n            payload[\"fileSecurity\"] = fileSecurity;\n        }\n        if (typeof enabled !== \"undefined\") {\n            payload[\"enabled\"] = enabled;\n        }\n        if (typeof maximumFileSize !== \"undefined\") {\n            payload[\"maximumFileSize\"] = maximumFileSize;\n        }\n        if (typeof allowedFileExtensions !== \"undefined\") {\n            payload[\"allowedFileExtensions\"] = allowedFileExtensions;\n        }\n        if (typeof compression !== \"undefined\") {\n            payload[\"compression\"] = compression;\n        }\n        if (typeof encryption !== \"undefined\") {\n            payload[\"encryption\"] = encryption;\n        }\n        if (typeof antivirus !== \"undefined\") {\n            payload[\"antivirus\"] = antivirus;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"put\", uri, apiHeaders, payload);\n    }\n    /**\n   * Delete bucket\n   *\n   * Delete a storage bucket by its unique ID.\n   *\n   * @param {string} bucketId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async deleteBucket(bucketId) {\n        if (typeof bucketId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        const apiPath = \"/storage/buckets/{bucketId}\".replace(\"{bucketId}\", bucketId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"delete\", uri, apiHeaders, payload);\n    }\n    /**\n   * List files\n   *\n   * Get a list of all the user files. You can use the query params to filter your results.\n   *\n   * @param {string} bucketId\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.FileList>}\n   */ async listFiles(bucketId, queries, search) {\n        if (typeof bucketId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        const apiPath = \"/storage/buckets/{bucketId}/files\".replace(\"{bucketId}\", bucketId);\n        const payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        if (typeof search !== \"undefined\") {\n            payload[\"search\"] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n       * Create file\n       *\n       * Create a new file. Before using this route, you should create a new bucket resource using either a [server integration](https://appwrite.io/docs/server/storage#storageCreateBucket) API or directly from your Appwrite console.\n  \n  Larger files should be uploaded using multiple requests with the [content-range](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Range) header to send a partial request with a maximum supported chunk of `5MB`. The `content-range` header values should always be in bytes.\n  \n  When the first request is sent, the server will return the **File** object, and the subsequent part request must include the file&#039;s **id** in `x-appwrite-id` header to allow the server to know that the partial upload is for the existing file and not for a new one.\n  \n  If you&#039;re creating a new file using one of the Appwrite SDKs, all the chunking logic will be managed by the SDK internally.\n  \n       *\n       * @param {string} bucketId\n       * @param {string} fileId\n       * @param {File} file\n       * @param {string[]} permissions\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.File>}\n       */ async createFile(bucketId, fileId, file, permissions, onProgress = (progress)=>{}) {\n        if (typeof bucketId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"fileId\"');\n        }\n        if (typeof file === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"file\"');\n        }\n        const apiPath = \"/storage/buckets/{bucketId}/files\".replace(\"{bucketId}\", bucketId);\n        const payload = {};\n        if (typeof fileId !== \"undefined\") {\n            payload[\"fileId\"] = fileId;\n        }\n        if (typeof file !== \"undefined\") {\n            payload[\"file\"] = file;\n        }\n        if (typeof permissions !== \"undefined\") {\n            payload[\"permissions\"] = permissions;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"multipart/form-data\"\n        };\n        return await this.client.chunkedUpload(\"post\", uri, apiHeaders, payload, onProgress);\n    }\n    /**\n   * Get file\n   *\n   * Get a file by its unique ID. This endpoint response returns a JSON object with the file metadata.\n   *\n   * @param {string} bucketId\n   * @param {string} fileId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.File>}\n   */ async getFile(bucketId, fileId) {\n        if (typeof bucketId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"fileId\"');\n        }\n        const apiPath = \"/storage/buckets/{bucketId}/files/{fileId}\".replace(\"{bucketId}\", bucketId).replace(\"{fileId}\", fileId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update file\n   *\n   * Update a file by its unique ID. Only users with write permissions have access to update this resource.\n   *\n   * @param {string} bucketId\n   * @param {string} fileId\n   * @param {string} name\n   * @param {string[]} permissions\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.File>}\n   */ async updateFile(bucketId, fileId, name, permissions) {\n        if (typeof bucketId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"fileId\"');\n        }\n        const apiPath = \"/storage/buckets/{bucketId}/files/{fileId}\".replace(\"{bucketId}\", bucketId).replace(\"{fileId}\", fileId);\n        const payload = {};\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof permissions !== \"undefined\") {\n            payload[\"permissions\"] = permissions;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"put\", uri, apiHeaders, payload);\n    }\n    /**\n   * Delete File\n   *\n   * Delete a file by its unique ID. Only users with write permissions have access to delete this resource.\n   *\n   * @param {string} bucketId\n   * @param {string} fileId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async deleteFile(bucketId, fileId) {\n        if (typeof bucketId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"fileId\"');\n        }\n        const apiPath = \"/storage/buckets/{bucketId}/files/{fileId}\".replace(\"{bucketId}\", bucketId).replace(\"{fileId}\", fileId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"delete\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get file for download\n   *\n   * Get a file content by its unique ID. The endpoint response return with a &#039;Content-Disposition: attachment&#039; header that tells the browser to start downloading the file to user downloads directory.\n   *\n   * @param {string} bucketId\n   * @param {string} fileId\n   * @throws {AppwriteException}\n   * @returns {Promise<ArrayBuffer>}\n   */ async getFileDownload(bucketId, fileId) {\n        if (typeof bucketId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"fileId\"');\n        }\n        const apiPath = \"/storage/buckets/{bucketId}/files/{fileId}/download\".replace(\"{bucketId}\", bucketId).replace(\"{fileId}\", fileId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload, \"arrayBuffer\");\n    }\n    /**\n   * Get file preview\n   *\n   * Get a file preview image. Currently, this method supports preview for image files (jpg, png, and gif), other supported formats, like pdf, docs, slides, and spreadsheets, will return the file icon image. You can also pass query string arguments for cutting and resizing your preview image. Preview is supported only for image files smaller than 10MB.\n   *\n   * @param {string} bucketId\n   * @param {string} fileId\n   * @param {number} width\n   * @param {number} height\n   * @param {ImageGravity} gravity\n   * @param {number} quality\n   * @param {number} borderWidth\n   * @param {string} borderColor\n   * @param {number} borderRadius\n   * @param {number} opacity\n   * @param {number} rotation\n   * @param {string} background\n   * @param {ImageFormat} output\n   * @throws {AppwriteException}\n   * @returns {Promise<ArrayBuffer>}\n   */ async getFilePreview(bucketId, fileId, width, height, gravity, quality, borderWidth, borderColor, borderRadius, opacity, rotation, background, output) {\n        if (typeof bucketId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"fileId\"');\n        }\n        const apiPath = \"/storage/buckets/{bucketId}/files/{fileId}/preview\".replace(\"{bucketId}\", bucketId).replace(\"{fileId}\", fileId);\n        const payload = {};\n        if (typeof width !== \"undefined\") {\n            payload[\"width\"] = width;\n        }\n        if (typeof height !== \"undefined\") {\n            payload[\"height\"] = height;\n        }\n        if (typeof gravity !== \"undefined\") {\n            payload[\"gravity\"] = gravity;\n        }\n        if (typeof quality !== \"undefined\") {\n            payload[\"quality\"] = quality;\n        }\n        if (typeof borderWidth !== \"undefined\") {\n            payload[\"borderWidth\"] = borderWidth;\n        }\n        if (typeof borderColor !== \"undefined\") {\n            payload[\"borderColor\"] = borderColor;\n        }\n        if (typeof borderRadius !== \"undefined\") {\n            payload[\"borderRadius\"] = borderRadius;\n        }\n        if (typeof opacity !== \"undefined\") {\n            payload[\"opacity\"] = opacity;\n        }\n        if (typeof rotation !== \"undefined\") {\n            payload[\"rotation\"] = rotation;\n        }\n        if (typeof background !== \"undefined\") {\n            payload[\"background\"] = background;\n        }\n        if (typeof output !== \"undefined\") {\n            payload[\"output\"] = output;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload, \"arrayBuffer\");\n    }\n    /**\n   * Get file for view\n   *\n   * Get a file content by its unique ID. This endpoint is similar to the download method but returns with no  &#039;Content-Disposition: attachment&#039; header.\n   *\n   * @param {string} bucketId\n   * @param {string} fileId\n   * @throws {AppwriteException}\n   * @returns {Promise<ArrayBuffer>}\n   */ async getFileView(bucketId, fileId) {\n        if (typeof bucketId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"bucketId\"');\n        }\n        if (typeof fileId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"fileId\"');\n        }\n        const apiPath = \"/storage/buckets/{bucketId}/files/{fileId}/view\".replace(\"{bucketId}\", bucketId).replace(\"{fileId}\", fileId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload, \"arrayBuffer\");\n    }\n}\nexports.Storage = Storage; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=storage.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/services/storage.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/services/teams.js":
/*!***********************************************************!*\
  !*** ./node_modules/node-appwrite/dist/services/teams.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar client = __webpack_require__(/*! ../client */ \"(rsc)/./node_modules/node-appwrite/dist/client.js\");\nclass Teams {\n    constructor(client){\n        this.client = client;\n    }\n    /**\n   * List teams\n   *\n   * Get a list of all the teams in which the current user is a member. You can use the parameters to filter your results.\n   *\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.TeamList<Preferences>>}\n   */ async list(queries, search) {\n        const apiPath = \"/teams\";\n        const payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        if (typeof search !== \"undefined\") {\n            payload[\"search\"] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create team\n   *\n   * Create a new team. The user who creates the team will automatically be assigned as the owner of the team. Only the users with the owner role can invite new members, add new owners and delete or update the team.\n   *\n   * @param {string} teamId\n   * @param {string} name\n   * @param {string[]} roles\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Team<Preferences>>}\n   */ async create(teamId, name, roles) {\n        if (typeof teamId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = \"/teams\";\n        const payload = {};\n        if (typeof teamId !== \"undefined\") {\n            payload[\"teamId\"] = teamId;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        if (typeof roles !== \"undefined\") {\n            payload[\"roles\"] = roles;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get team\n   *\n   * Get a team by its ID. All team members have read access for this resource.\n   *\n   * @param {string} teamId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Team<Preferences>>}\n   */ async get(teamId) {\n        if (typeof teamId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        const apiPath = \"/teams/{teamId}\".replace(\"{teamId}\", teamId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update name\n   *\n   * Update the team&#039;s name by its unique ID.\n   *\n   * @param {string} teamId\n   * @param {string} name\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Team<Preferences>>}\n   */ async updateName(teamId, name) {\n        if (typeof teamId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = \"/teams/{teamId}\".replace(\"{teamId}\", teamId);\n        const payload = {};\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"put\", uri, apiHeaders, payload);\n    }\n    /**\n   * Delete team\n   *\n   * Delete a team using its ID. Only team members with the owner role can delete the team.\n   *\n   * @param {string} teamId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async delete(teamId) {\n        if (typeof teamId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        const apiPath = \"/teams/{teamId}\".replace(\"{teamId}\", teamId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"delete\", uri, apiHeaders, payload);\n    }\n    /**\n   * List team memberships\n   *\n   * Use this endpoint to list a team&#039;s members using the team&#039;s ID. All team members have read access to this endpoint.\n   *\n   * @param {string} teamId\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.MembershipList>}\n   */ async listMemberships(teamId, queries, search) {\n        if (typeof teamId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        const apiPath = \"/teams/{teamId}/memberships\".replace(\"{teamId}\", teamId);\n        const payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        if (typeof search !== \"undefined\") {\n            payload[\"search\"] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n       * Create team membership\n       *\n       * Invite a new member to join your team. Provide an ID for existing users, or invite unregistered users using an email or phone number. If initiated from a Client SDK, Appwrite will send an email or sms with a link to join the team to the invited user, and an account will be created for them if one doesn&#039;t exist. If initiated from a Server SDK, the new member will be added automatically to the team.\n  \n  You only need to provide one of a user ID, email, or phone number. Appwrite will prioritize accepting the user ID &gt; email &gt; phone number if you provide more than one of these parameters.\n  \n  Use the `url` parameter to redirect the user from the invitation email to your app. After the user is redirected, use the [Update Team Membership Status](https://appwrite.io/docs/references/cloud/client-web/teams#updateMembershipStatus) endpoint to allow the user to accept the invitation to the team. \n  \n  Please note that to avoid a [Redirect Attack](https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Unvalidated_Redirects_and_Forwards_Cheat_Sheet.md) Appwrite will accept the only redirect URLs under the domains you have added as a platform on the Appwrite Console.\n  \n       *\n       * @param {string} teamId\n       * @param {string[]} roles\n       * @param {string} email\n       * @param {string} userId\n       * @param {string} phone\n       * @param {string} url\n       * @param {string} name\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Membership>}\n       */ async createMembership(teamId, roles, email, userId, phone, url, name) {\n        if (typeof teamId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof roles === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"roles\"');\n        }\n        const apiPath = \"/teams/{teamId}/memberships\".replace(\"{teamId}\", teamId);\n        const payload = {};\n        if (typeof email !== \"undefined\") {\n            payload[\"email\"] = email;\n        }\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof phone !== \"undefined\") {\n            payload[\"phone\"] = phone;\n        }\n        if (typeof roles !== \"undefined\") {\n            payload[\"roles\"] = roles;\n        }\n        if (typeof url !== \"undefined\") {\n            payload[\"url\"] = url;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get team membership\n   *\n   * Get a team member by the membership unique id. All team members have read access for this resource.\n   *\n   * @param {string} teamId\n   * @param {string} membershipId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Membership>}\n   */ async getMembership(teamId, membershipId) {\n        if (typeof teamId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof membershipId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n        const apiPath = \"/teams/{teamId}/memberships/{membershipId}\".replace(\"{teamId}\", teamId).replace(\"{membershipId}\", membershipId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n       * Update membership\n       *\n       * Modify the roles of a team member. Only team members with the owner role have access to this endpoint. Learn more about [roles and permissions](https://appwrite.io/docs/permissions).\n  \n       *\n       * @param {string} teamId\n       * @param {string} membershipId\n       * @param {string[]} roles\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Membership>}\n       */ async updateMembership(teamId, membershipId, roles) {\n        if (typeof teamId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof membershipId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n        if (typeof roles === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"roles\"');\n        }\n        const apiPath = \"/teams/{teamId}/memberships/{membershipId}\".replace(\"{teamId}\", teamId).replace(\"{membershipId}\", membershipId);\n        const payload = {};\n        if (typeof roles !== \"undefined\") {\n            payload[\"roles\"] = roles;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Delete team membership\n   *\n   * This endpoint allows a user to leave a team or for a team owner to delete the membership of any other team member. You can also use this endpoint to delete a user membership even if it is not accepted.\n   *\n   * @param {string} teamId\n   * @param {string} membershipId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async deleteMembership(teamId, membershipId) {\n        if (typeof teamId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof membershipId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n        const apiPath = \"/teams/{teamId}/memberships/{membershipId}\".replace(\"{teamId}\", teamId).replace(\"{membershipId}\", membershipId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"delete\", uri, apiHeaders, payload);\n    }\n    /**\n       * Update team membership status\n       *\n       * Use this endpoint to allow a user to accept an invitation to join a team after being redirected back to your app from the invitation email received by the user.\n  \n  If the request is successful, a session for the user is automatically created.\n  \n       *\n       * @param {string} teamId\n       * @param {string} membershipId\n       * @param {string} userId\n       * @param {string} secret\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Membership>}\n       */ async updateMembershipStatus(teamId, membershipId, userId, secret) {\n        if (typeof teamId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof membershipId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"membershipId\"');\n        }\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof secret === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"secret\"');\n        }\n        const apiPath = \"/teams/{teamId}/memberships/{membershipId}/status\".replace(\"{teamId}\", teamId).replace(\"{membershipId}\", membershipId);\n        const payload = {};\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof secret !== \"undefined\") {\n            payload[\"secret\"] = secret;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get team preferences\n   *\n   * Get the team&#039;s shared preferences by its unique ID. If a preference doesn&#039;t need to be shared by all team members, prefer storing them in [user preferences](https://appwrite.io/docs/references/cloud/client-web/account#getPrefs).\n   *\n   * @param {string} teamId\n   * @throws {AppwriteException}\n   * @returns {Promise<Preferences>}\n   */ async getPrefs(teamId) {\n        if (typeof teamId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        const apiPath = \"/teams/{teamId}/prefs\".replace(\"{teamId}\", teamId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update preferences\n   *\n   * Update the team&#039;s preferences by its unique ID. The object you pass is stored as is and replaces any previous value. The maximum allowed prefs size is 64kB and throws an error if exceeded.\n   *\n   * @param {string} teamId\n   * @param {object} prefs\n   * @throws {AppwriteException}\n   * @returns {Promise<Preferences>}\n   */ async updatePrefs(teamId, prefs) {\n        if (typeof teamId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"teamId\"');\n        }\n        if (typeof prefs === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"prefs\"');\n        }\n        const apiPath = \"/teams/{teamId}/prefs\".replace(\"{teamId}\", teamId);\n        const payload = {};\n        if (typeof prefs !== \"undefined\") {\n            payload[\"prefs\"] = prefs;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"put\", uri, apiHeaders, payload);\n    }\n}\nexports.Teams = Teams; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=teams.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/services/teams.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/node-appwrite/dist/services/users.js":
/*!***********************************************************!*\
  !*** ./node_modules/node-appwrite/dist/services/users.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar client = __webpack_require__(/*! ../client */ \"(rsc)/./node_modules/node-appwrite/dist/client.js\");\nclass Users {\n    constructor(client){\n        this.client = client;\n    }\n    /**\n   * List users\n   *\n   * Get a list of all the project&#039;s users. You can use the query params to filter your results.\n   *\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.UserList<Preferences>>}\n   */ async list(queries, search) {\n        const apiPath = \"/users\";\n        const payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        if (typeof search !== \"undefined\") {\n            payload[\"search\"] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create user\n   *\n   * Create a new user.\n   *\n   * @param {string} userId\n   * @param {string} email\n   * @param {string} phone\n   * @param {string} password\n   * @param {string} name\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */ async create(userId, email, phone, password, name) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = \"/users\";\n        const payload = {};\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof email !== \"undefined\") {\n            payload[\"email\"] = email;\n        }\n        if (typeof phone !== \"undefined\") {\n            payload[\"phone\"] = phone;\n        }\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create user with Argon2 password\n   *\n   * Create a new user. Password provided must be hashed with the [Argon2](https://en.wikipedia.org/wiki/Argon2) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n   *\n   * @param {string} userId\n   * @param {string} email\n   * @param {string} password\n   * @param {string} name\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */ async createArgon2User(userId, email, password, name) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"password\"');\n        }\n        const apiPath = \"/users/argon2\";\n        const payload = {};\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof email !== \"undefined\") {\n            payload[\"email\"] = email;\n        }\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create user with bcrypt password\n   *\n   * Create a new user. Password provided must be hashed with the [Bcrypt](https://en.wikipedia.org/wiki/Bcrypt) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n   *\n   * @param {string} userId\n   * @param {string} email\n   * @param {string} password\n   * @param {string} name\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */ async createBcryptUser(userId, email, password, name) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"password\"');\n        }\n        const apiPath = \"/users/bcrypt\";\n        const payload = {};\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof email !== \"undefined\") {\n            payload[\"email\"] = email;\n        }\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * List Identities\n   *\n   * Get identities for all users.\n   *\n   * @param {string[]} queries\n   * @param {string} search\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.IdentityList>}\n   */ async listIdentities(queries, search) {\n        const apiPath = \"/users/identities\";\n        const payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        if (typeof search !== \"undefined\") {\n            payload[\"search\"] = search;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Delete identity\n   *\n   * Delete an identity by its unique ID.\n   *\n   * @param {string} identityId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async deleteIdentity(identityId) {\n        if (typeof identityId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"identityId\"');\n        }\n        const apiPath = \"/users/identities/{identityId}\".replace(\"{identityId}\", identityId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"delete\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create user with MD5 password\n   *\n   * Create a new user. Password provided must be hashed with the [MD5](https://en.wikipedia.org/wiki/MD5) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n   *\n   * @param {string} userId\n   * @param {string} email\n   * @param {string} password\n   * @param {string} name\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */ async createMD5User(userId, email, password, name) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"password\"');\n        }\n        const apiPath = \"/users/md5\";\n        const payload = {};\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof email !== \"undefined\") {\n            payload[\"email\"] = email;\n        }\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create user with PHPass password\n   *\n   * Create a new user. Password provided must be hashed with the [PHPass](https://www.openwall.com/phpass/) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n   *\n   * @param {string} userId\n   * @param {string} email\n   * @param {string} password\n   * @param {string} name\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */ async createPHPassUser(userId, email, password, name) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"password\"');\n        }\n        const apiPath = \"/users/phpass\";\n        const payload = {};\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof email !== \"undefined\") {\n            payload[\"email\"] = email;\n        }\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create user with Scrypt password\n   *\n   * Create a new user. Password provided must be hashed with the [Scrypt](https://github.com/Tarsnap/scrypt) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n   *\n   * @param {string} userId\n   * @param {string} email\n   * @param {string} password\n   * @param {string} passwordSalt\n   * @param {number} passwordCpu\n   * @param {number} passwordMemory\n   * @param {number} passwordParallel\n   * @param {number} passwordLength\n   * @param {string} name\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */ async createScryptUser(userId, email, password, passwordSalt, passwordCpu, passwordMemory, passwordParallel, passwordLength, name) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"password\"');\n        }\n        if (typeof passwordSalt === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"passwordSalt\"');\n        }\n        if (typeof passwordCpu === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"passwordCpu\"');\n        }\n        if (typeof passwordMemory === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"passwordMemory\"');\n        }\n        if (typeof passwordParallel === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"passwordParallel\"');\n        }\n        if (typeof passwordLength === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"passwordLength\"');\n        }\n        const apiPath = \"/users/scrypt\";\n        const payload = {};\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof email !== \"undefined\") {\n            payload[\"email\"] = email;\n        }\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        if (typeof passwordSalt !== \"undefined\") {\n            payload[\"passwordSalt\"] = passwordSalt;\n        }\n        if (typeof passwordCpu !== \"undefined\") {\n            payload[\"passwordCpu\"] = passwordCpu;\n        }\n        if (typeof passwordMemory !== \"undefined\") {\n            payload[\"passwordMemory\"] = passwordMemory;\n        }\n        if (typeof passwordParallel !== \"undefined\") {\n            payload[\"passwordParallel\"] = passwordParallel;\n        }\n        if (typeof passwordLength !== \"undefined\") {\n            payload[\"passwordLength\"] = passwordLength;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create user with Scrypt modified password\n   *\n   * Create a new user. Password provided must be hashed with the [Scrypt Modified](https://gist.github.com/Meldiron/eecf84a0225eccb5a378d45bb27462cc) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n   *\n   * @param {string} userId\n   * @param {string} email\n   * @param {string} password\n   * @param {string} passwordSalt\n   * @param {string} passwordSaltSeparator\n   * @param {string} passwordSignerKey\n   * @param {string} name\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */ async createScryptModifiedUser(userId, email, password, passwordSalt, passwordSaltSeparator, passwordSignerKey, name) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"password\"');\n        }\n        if (typeof passwordSalt === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"passwordSalt\"');\n        }\n        if (typeof passwordSaltSeparator === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"passwordSaltSeparator\"');\n        }\n        if (typeof passwordSignerKey === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"passwordSignerKey\"');\n        }\n        const apiPath = \"/users/scrypt-modified\";\n        const payload = {};\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof email !== \"undefined\") {\n            payload[\"email\"] = email;\n        }\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        if (typeof passwordSalt !== \"undefined\") {\n            payload[\"passwordSalt\"] = passwordSalt;\n        }\n        if (typeof passwordSaltSeparator !== \"undefined\") {\n            payload[\"passwordSaltSeparator\"] = passwordSaltSeparator;\n        }\n        if (typeof passwordSignerKey !== \"undefined\") {\n            payload[\"passwordSignerKey\"] = passwordSignerKey;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create user with SHA password\n   *\n   * Create a new user. Password provided must be hashed with the [SHA](https://en.wikipedia.org/wiki/Secure_Hash_Algorithm) algorithm. Use the [POST /users](https://appwrite.io/docs/server/users#usersCreate) endpoint to create users with a plain text password.\n   *\n   * @param {string} userId\n   * @param {string} email\n   * @param {string} password\n   * @param {PasswordHash} passwordVersion\n   * @param {string} name\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */ async createSHAUser(userId, email, password, passwordVersion, name) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"email\"');\n        }\n        if (typeof password === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"password\"');\n        }\n        const apiPath = \"/users/sha\";\n        const payload = {};\n        if (typeof userId !== \"undefined\") {\n            payload[\"userId\"] = userId;\n        }\n        if (typeof email !== \"undefined\") {\n            payload[\"email\"] = email;\n        }\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        if (typeof passwordVersion !== \"undefined\") {\n            payload[\"passwordVersion\"] = passwordVersion;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get user\n   *\n   * Get a user by its unique ID.\n   *\n   * @param {string} userId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */ async get(userId) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = \"/users/{userId}\".replace(\"{userId}\", userId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Delete user\n   *\n   * Delete a user by its unique ID, thereby releasing it&#039;s ID. Since ID is released and can be reused, all user-related resources like documents or storage files should be deleted before user deletion. If you want to keep ID reserved, use the [updateStatus](https://appwrite.io/docs/server/users#usersUpdateStatus) endpoint instead.\n   *\n   * @param {string} userId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async delete(userId) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = \"/users/{userId}\".replace(\"{userId}\", userId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"delete\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update email\n   *\n   * Update the user email by its unique ID.\n   *\n   * @param {string} userId\n   * @param {string} email\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */ async updateEmail(userId, email) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof email === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"email\"');\n        }\n        const apiPath = \"/users/{userId}/email\".replace(\"{userId}\", userId);\n        const payload = {};\n        if (typeof email !== \"undefined\") {\n            payload[\"email\"] = email;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create user JWT\n   *\n   * Use this endpoint to create a JSON Web Token for user by its unique ID. You can use the resulting JWT to authenticate on behalf of the user. The JWT secret will become invalid if the session it uses gets deleted.\n   *\n   * @param {string} userId\n   * @param {string} sessionId\n   * @param {number} duration\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Jwt>}\n   */ async createJWT(userId, sessionId, duration) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = \"/users/{userId}/jwts\".replace(\"{userId}\", userId);\n        const payload = {};\n        if (typeof sessionId !== \"undefined\") {\n            payload[\"sessionId\"] = sessionId;\n        }\n        if (typeof duration !== \"undefined\") {\n            payload[\"duration\"] = duration;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n       * Update user labels\n       *\n       * Update the user labels by its unique ID. \n  \n  Labels can be used to grant access to resources. While teams are a way for user&#039;s to share access to a resource, labels can be defined by the developer to grant access without an invitation. See the [Permissions docs](https://appwrite.io/docs/permissions) for more info.\n       *\n       * @param {string} userId\n       * @param {string[]} labels\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.User<Preferences>>}\n       */ async updateLabels(userId, labels) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof labels === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"labels\"');\n        }\n        const apiPath = \"/users/{userId}/labels\".replace(\"{userId}\", userId);\n        const payload = {};\n        if (typeof labels !== \"undefined\") {\n            payload[\"labels\"] = labels;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"put\", uri, apiHeaders, payload);\n    }\n    /**\n   * List user logs\n   *\n   * Get the user activity logs list by its unique ID.\n   *\n   * @param {string} userId\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.LogList>}\n   */ async listLogs(userId, queries) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = \"/users/{userId}/logs\".replace(\"{userId}\", userId);\n        const payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * List user memberships\n   *\n   * Get the user membership list by its unique ID.\n   *\n   * @param {string} userId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.MembershipList>}\n   */ async listMemberships(userId) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = \"/users/{userId}/memberships\".replace(\"{userId}\", userId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update MFA\n   *\n   * Enable or disable MFA on a user account.\n   *\n   * @param {string} userId\n   * @param {boolean} mfa\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */ async updateMfa(userId, mfa) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof mfa === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"mfa\"');\n        }\n        const apiPath = \"/users/{userId}/mfa\".replace(\"{userId}\", userId);\n        const payload = {};\n        if (typeof mfa !== \"undefined\") {\n            payload[\"mfa\"] = mfa;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Delete Authenticator\n   *\n   * Delete an authenticator app.\n   *\n   * @param {string} userId\n   * @param {AuthenticatorType} type\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */ async deleteMfaAuthenticator(userId, type) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof type === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"type\"');\n        }\n        const apiPath = \"/users/{userId}/mfa/authenticators/{type}\".replace(\"{userId}\", userId).replace(\"{type}\", type);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"delete\", uri, apiHeaders, payload);\n    }\n    /**\n   * List Factors\n   *\n   * List the factors available on the account to be used as a MFA challange.\n   *\n   * @param {string} userId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.MfaFactors>}\n   */ async listMfaFactors(userId) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = \"/users/{userId}/mfa/factors\".replace(\"{userId}\", userId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get MFA Recovery Codes\n   *\n   * Get recovery codes that can be used as backup for MFA flow by User ID. Before getting codes, they must be generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method.\n   *\n   * @param {string} userId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.MfaRecoveryCodes>}\n   */ async getMfaRecoveryCodes(userId) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = \"/users/{userId}/mfa/recovery-codes\".replace(\"{userId}\", userId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Regenerate MFA Recovery Codes\n   *\n   * Regenerate recovery codes that can be used as backup for MFA flow by User ID. Before regenerating codes, they must be first generated using [createMfaRecoveryCodes](/docs/references/cloud/client-web/account#createMfaRecoveryCodes) method.\n   *\n   * @param {string} userId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.MfaRecoveryCodes>}\n   */ async updateMfaRecoveryCodes(userId) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = \"/users/{userId}/mfa/recovery-codes\".replace(\"{userId}\", userId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"put\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create MFA Recovery Codes\n   *\n   * Generate recovery codes used as backup for MFA flow for User ID. Recovery codes can be used as a MFA verification type in [createMfaChallenge](/docs/references/cloud/client-web/account#createMfaChallenge) method by client SDK.\n   *\n   * @param {string} userId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.MfaRecoveryCodes>}\n   */ async createMfaRecoveryCodes(userId) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = \"/users/{userId}/mfa/recovery-codes\".replace(\"{userId}\", userId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update name\n   *\n   * Update the user name by its unique ID.\n   *\n   * @param {string} userId\n   * @param {string} name\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */ async updateName(userId, name) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof name === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"name\"');\n        }\n        const apiPath = \"/users/{userId}/name\".replace(\"{userId}\", userId);\n        const payload = {};\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update password\n   *\n   * Update the user password by its unique ID.\n   *\n   * @param {string} userId\n   * @param {string} password\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */ async updatePassword(userId, password) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof password === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"password\"');\n        }\n        const apiPath = \"/users/{userId}/password\".replace(\"{userId}\", userId);\n        const payload = {};\n        if (typeof password !== \"undefined\") {\n            payload[\"password\"] = password;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update phone\n   *\n   * Update the user phone by its unique ID.\n   *\n   * @param {string} userId\n   * @param {string} number\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */ async updatePhone(userId, number) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof number === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"number\"');\n        }\n        const apiPath = \"/users/{userId}/phone\".replace(\"{userId}\", userId);\n        const payload = {};\n        if (typeof number !== \"undefined\") {\n            payload[\"number\"] = number;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get user preferences\n   *\n   * Get the user preferences by its unique ID.\n   *\n   * @param {string} userId\n   * @throws {AppwriteException}\n   * @returns {Promise<Preferences>}\n   */ async getPrefs(userId) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = \"/users/{userId}/prefs\".replace(\"{userId}\", userId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update user preferences\n   *\n   * Update the user preferences by its unique ID. The object you pass is stored as is, and replaces any previous value. The maximum allowed prefs size is 64kB and throws error if exceeded.\n   *\n   * @param {string} userId\n   * @param {object} prefs\n   * @throws {AppwriteException}\n   * @returns {Promise<Preferences>}\n   */ async updatePrefs(userId, prefs) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof prefs === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"prefs\"');\n        }\n        const apiPath = \"/users/{userId}/prefs\".replace(\"{userId}\", userId);\n        const payload = {};\n        if (typeof prefs !== \"undefined\") {\n            payload[\"prefs\"] = prefs;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * List user sessions\n   *\n   * Get the user sessions list by its unique ID.\n   *\n   * @param {string} userId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.SessionList>}\n   */ async listSessions(userId) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = \"/users/{userId}/sessions\".replace(\"{userId}\", userId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n       * Create session\n       *\n       * Creates a session for a user. Returns an immediately usable session object.\n  \n  If you want to generate a token for a custom authentication flow, use the [POST /users/{userId}/tokens](https://appwrite.io/docs/server/users#createToken) endpoint.\n       *\n       * @param {string} userId\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Session>}\n       */ async createSession(userId) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = \"/users/{userId}/sessions\".replace(\"{userId}\", userId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Delete user sessions\n   *\n   * Delete all user&#039;s sessions by using the user&#039;s unique ID.\n   *\n   * @param {string} userId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async deleteSessions(userId) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = \"/users/{userId}/sessions\".replace(\"{userId}\", userId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"delete\", uri, apiHeaders, payload);\n    }\n    /**\n   * Delete user session\n   *\n   * Delete a user sessions by its unique ID.\n   *\n   * @param {string} userId\n   * @param {string} sessionId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async deleteSession(userId, sessionId) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof sessionId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"sessionId\"');\n        }\n        const apiPath = \"/users/{userId}/sessions/{sessionId}\".replace(\"{userId}\", userId).replace(\"{sessionId}\", sessionId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"delete\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update user status\n   *\n   * Update the user status by its unique ID. Use this endpoint as an alternative to deleting a user if you want to keep user&#039;s ID reserved.\n   *\n   * @param {string} userId\n   * @param {boolean} status\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */ async updateStatus(userId, status) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof status === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"status\"');\n        }\n        const apiPath = \"/users/{userId}/status\".replace(\"{userId}\", userId);\n        const payload = {};\n        if (typeof status !== \"undefined\") {\n            payload[\"status\"] = status;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * List User Targets\n   *\n   * List the messaging targets that are associated with a user.\n   *\n   * @param {string} userId\n   * @param {string[]} queries\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.TargetList>}\n   */ async listTargets(userId, queries) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = \"/users/{userId}/targets\".replace(\"{userId}\", userId);\n        const payload = {};\n        if (typeof queries !== \"undefined\") {\n            payload[\"queries\"] = queries;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Create User Target\n   *\n   * Create a messaging target.\n   *\n   * @param {string} userId\n   * @param {string} targetId\n   * @param {MessagingProviderType} providerType\n   * @param {string} identifier\n   * @param {string} providerId\n   * @param {string} name\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Target>}\n   */ async createTarget(userId, targetId, providerType, identifier, providerId, name) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof targetId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"targetId\"');\n        }\n        if (typeof providerType === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"providerType\"');\n        }\n        if (typeof identifier === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"identifier\"');\n        }\n        const apiPath = \"/users/{userId}/targets\".replace(\"{userId}\", userId);\n        const payload = {};\n        if (typeof targetId !== \"undefined\") {\n            payload[\"targetId\"] = targetId;\n        }\n        if (typeof providerType !== \"undefined\") {\n            payload[\"providerType\"] = providerType;\n        }\n        if (typeof identifier !== \"undefined\") {\n            payload[\"identifier\"] = identifier;\n        }\n        if (typeof providerId !== \"undefined\") {\n            payload[\"providerId\"] = providerId;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Get User Target\n   *\n   * Get a user&#039;s push notification target by ID.\n   *\n   * @param {string} userId\n   * @param {string} targetId\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Target>}\n   */ async getTarget(userId, targetId) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof targetId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"targetId\"');\n        }\n        const apiPath = \"/users/{userId}/targets/{targetId}\".replace(\"{userId}\", userId).replace(\"{targetId}\", targetId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"get\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update User target\n   *\n   * Update a messaging target.\n   *\n   * @param {string} userId\n   * @param {string} targetId\n   * @param {string} identifier\n   * @param {string} providerId\n   * @param {string} name\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.Target>}\n   */ async updateTarget(userId, targetId, identifier, providerId, name) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof targetId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"targetId\"');\n        }\n        const apiPath = \"/users/{userId}/targets/{targetId}\".replace(\"{userId}\", userId).replace(\"{targetId}\", targetId);\n        const payload = {};\n        if (typeof identifier !== \"undefined\") {\n            payload[\"identifier\"] = identifier;\n        }\n        if (typeof providerId !== \"undefined\") {\n            payload[\"providerId\"] = providerId;\n        }\n        if (typeof name !== \"undefined\") {\n            payload[\"name\"] = name;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Delete user target\n   *\n   * Delete a messaging target.\n   *\n   * @param {string} userId\n   * @param {string} targetId\n   * @throws {AppwriteException}\n   * @returns {Promise<{}>}\n   */ async deleteTarget(userId, targetId) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof targetId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"targetId\"');\n        }\n        const apiPath = \"/users/{userId}/targets/{targetId}\".replace(\"{userId}\", userId).replace(\"{targetId}\", targetId);\n        const payload = {};\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"delete\", uri, apiHeaders, payload);\n    }\n    /**\n       * Create token\n       *\n       * Returns a token with a secret key for creating a session. Use the user ID and secret and submit a request to the [PUT /account/sessions/token](https://appwrite.io/docs/references/cloud/client-web/account#createSession) endpoint to complete the login process.\n  \n       *\n       * @param {string} userId\n       * @param {number} length\n       * @param {number} expire\n       * @throws {AppwriteException}\n       * @returns {Promise<Models.Token>}\n       */ async createToken(userId, length, expire) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        const apiPath = \"/users/{userId}/tokens\".replace(\"{userId}\", userId);\n        const payload = {};\n        if (typeof length !== \"undefined\") {\n            payload[\"length\"] = length;\n        }\n        if (typeof expire !== \"undefined\") {\n            payload[\"expire\"] = expire;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"post\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update email verification\n   *\n   * Update the user email verification status by its unique ID.\n   *\n   * @param {string} userId\n   * @param {boolean} emailVerification\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */ async updateEmailVerification(userId, emailVerification) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof emailVerification === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"emailVerification\"');\n        }\n        const apiPath = \"/users/{userId}/verification\".replace(\"{userId}\", userId);\n        const payload = {};\n        if (typeof emailVerification !== \"undefined\") {\n            payload[\"emailVerification\"] = emailVerification;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n    /**\n   * Update phone verification\n   *\n   * Update the user phone verification status by its unique ID.\n   *\n   * @param {string} userId\n   * @param {boolean} phoneVerification\n   * @throws {AppwriteException}\n   * @returns {Promise<Models.User<Preferences>>}\n   */ async updatePhoneVerification(userId, phoneVerification) {\n        if (typeof userId === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"userId\"');\n        }\n        if (typeof phoneVerification === \"undefined\") {\n            throw new client.AppwriteException('Missing required parameter: \"phoneVerification\"');\n        }\n        const apiPath = \"/users/{userId}/verification/phone\".replace(\"{userId}\", userId);\n        const payload = {};\n        if (typeof phoneVerification !== \"undefined\") {\n            payload[\"phoneVerification\"] = phoneVerification;\n        }\n        const uri = new URL(this.client.config.endpoint + apiPath);\n        const apiHeaders = {\n            \"content-type\": \"application/json\"\n        };\n        return await this.client.call(\"patch\", uri, apiHeaders, payload);\n    }\n}\nexports.Users = Users; //# sourceMappingURL=out.js.map\n //# sourceMappingURL=users.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/node-appwrite/dist/services/users.js\n");

/***/ })

};
;